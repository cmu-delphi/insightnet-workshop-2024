{
  "hash": "a86554a18a3efe5cd2acef19392686bc",
  "result": {
    "markdown": "---\ntalk-title: \"Signal Discovery, Data Fetching, & Panel Data\"\ntalk-short-title: \"Panel Data\"\ntalk-subtitle: \"InsightNet Forecasting Workshop 2024\"\nauthor: \"Ryan J. Tibshirani\"\nother-authors: \"Rachel Lobay, Daniel J. McDonald, Alice Cima, and Logan C. Brooks\"\nrepo-address: \"cmu-delphi/insightnet-workshop-2024\"\ntalk-date: \"11 December -- Morning\"\nformat: revealjs\n---\n---\n---\n\n\\DeclareMathOperator*{\\minimize}{minimize}\n\n\n\n\n\n\n\n::: flex\n::: w-20\n\n:::\n::: w-80\n## {{< meta talk-title >}} {background-image=\"gfx/cover-art-1.svg\" background-position=\"bottom\"}\n\n### {{< meta talk-subtitle >}}\n\n<br>\n\n#### {{< meta author >}} \n{{< meta other-authors >}}\n\n{{< meta talk-date >}}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/theme-load-pkg_339718572a4491a1989a414c3fc32d70'}\n\n:::\n\n\n## Outline\n\n1. Delphi \n\n1. Panel Data\n\n1. Versioned Data\n\n1. Epidata API\n\n1. Epidatr\n\n1. Find Data Sources and Signals\n\n1. Versioning in epidatr\n\n\n# Delphi\n\n## About Delphi\n\n* Founded in 2012 at Carnegie Mellon University, now expanded to UC Berkeley, and University of British Columbia.\n\n* Currently 5 faculty, ~10 PhD students, ~15 staff (mostly software engineers).\n\n* Easy to join us from anywhere (lots of volunteers during Covid-19 pandemic).\n\n* We are:\n    + CDC Center of Excellence for Influenza and Covid-19 Forecasting (2019-24).\n    + CDC Innovation Center for Outbreak Analytics and Disease Modeling (2024-29).\n\n[**Our mission:**]{.primary} To develop the theory and practice of [epidemic detection, tracking and forecasting]{.primary}, and their use in decision making, both public and private.\n\n## What does Delphi do?\n\n* Procure [real-time, aggregated data streams]{.primary} informative of infectious diseases and syndromes, in collaboration with partners in industry and government.\n\n* Extract signals and make them widely available via the [Epidata platform & API]{.primary}.\n\n* Develop and deploy algorithms for [epidemic detection, tracking, forecasting]{.primary}.\n\n* Develop and maintain statistical software packages for these tasks.\n\n* Make it all production-grade, maximally-accessible, and open-source (to serve CDC, state and local public health agencies, epi-forecasting researchers, data journalists, the public)\n\n## What we provide\n\n<style>\n/* Move the external link icon (square with arrow) to the right of the link */\na[target=\"_blank\"] {\n  position: relative; /* Make the link a positioned container */\n}\n\n/* Style for the external link icon */\na[target=\"_blank\"]::after {\n  font-size: 16px;   /* Adjust the size of the icon */\n  position: absolute; /* Position the icon absolutely inside the link */\n  right: 0;           /* Move the icon to the right side of the link */\n  top: 80%;           /* Vertically at bottom */\n}\n</style>\n\n<div style=\"position: relative; width: 80%; height: auto; margin: 0 auto;\">\n  <!-- Embed the JPG image with 80% width -->\n  <img src=\"gfx/web_of_parts.jpg\" width=\"100%\" height=\"auto\">\n  \n  <!-- Create clickable areas on top of the JPG -->\n  <!-- Signal discovery -->\n  <a href=\"https://delphi.cmu.edu/signals/\"\n     style=\"position: absolute; top: 30px; left: 12px; width: 310px; height: 100px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n  \n  <a href=\"https://cmu-delphi.github.io/epiprocess/\"\n     style=\"position: absolute; top: 30px; left: 362px; width: 290px; height: 90px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n\n  <a href=\"https://cmu-delphi.github.io/delphi-tooling-book/\"\n     style=\"position: absolute; top: 30px; left: 682px; width: 270px; height: 90px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n\n  <a href=\"https://cmu-delphi.github.io/delphi-epidata/\"\n     style=\"position: absolute; top: 242px; left: 182px; width: 370px; height: 100px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n\n  <a href=\"https://cmu-delphi.github.io/epidatr/\"\n     style=\"position: absolute; top: 222px; left: 582px; width: 260px; height: 140px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n  \n  <a href=\"https://cmu-delphi.github.io/epipredict/\"\n     style=\"position: absolute; top: 222px; left: 866px; width: 170px; height: 150px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n  \n<a href=\"https://delphi.cmu.edu/epidemic-signals/about-delphi-epidata-covidcast/\"\n     style=\"position: absolute; top: 392px; left: 192px; width: 760px; height: 120px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n</div>\n\n# Panel Data\n\n## Panel data\n\n* [**Panel data**](https://en.wikipedia.org/wiki/Panel_data) or longitudinal data, contain cross-sectional measurements of subjects over time.\n\n* Since we're working with aggregated data, the subjects are geographic units (e.g. counties, states) and not individuals.\n\n* In table form, panel data is a time index + one or more locations/keys.\n\n* For example: The estimated percentage of outpatient doctor visits that are COVID-related in WA from Dec. 2021 to Feb. 2022 ([docs](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html)):\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/panel-wa-ex_8aa3718745569d8bb7fe5c46abce0311'}\n::: {.cell-output .cell-output-stdout}\n```\nAn `epi_df` object, 6 x 3 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2022-02-01\n\n# A tibble: 6 Ã— 3\n  geo_value time_value percent_cli\n* <chr>     <date>           <dbl>\n1 wa        2021-12-01        4.70\n2 wa        2021-12-02        4.60\n3 wa        2021-12-03        4.56\n4 wa        2021-12-04        4.93\n5 wa        2021-12-05        4.17\n6 wa        2021-12-06        4.12\n```\n:::\n:::\n\n\n## Examples of panel data - COVID-19 cases\n\n[[**JHU CSSE COVID cases per 100k **]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html) estimates the daily number of new confirmed COVID-19 cases per 100,000 population, averaged over the past 7 days.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/examples-panel-covid_fa312711bda637c63c850d9d6f8d8478'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-panel-covid-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Examples of panel data - CHNG-CLI\n\n[[**Change Healthcare COVID-like illness (CHNG-CLI)**]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/chng.html) reports the percentage of outpatient visits for COVID-related symptoms, based on deidentified Change Healthcare claims data.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/examples-chng-cli_5cdcf69992b456078e3028441b7e41de'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-chng-cli-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Examples of panel data - CHNG-COVID\n\n[[**Change Healthcare COVID (CHNG-COVID)**]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/chng.html) reports the percentage of outpatient visits with confirmed COVID-19, based on Change Healthcare claims data.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/examples-chng-covid_b576380c845ee0804b3c3ce63a29881b'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-chng-covid-1.svg){fig-align='center'}\n:::\n:::\n\n\n<!--  Numerator = denote the Covid counts. Denominator be the total count of visits. Scaling by population is not necessary here because the signal is already normalized to the total number of visits, which acts as a proxy for population size. -->\n\n## Examples of panel data - HHS Admissions\n\n[[**Confirmed COVID-19 Hospital Admissions per 100k**]{.primary}](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/hhs.html) estimates the daily sum of adult and pediatric confirmed COVID-19 hospital admissions, per 100,000 population, averaged over the past 7 days.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/examples-hhs-admissions_61a2d440e96bbf0d074d3a4516c78e5c'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-hhs-admissions-1.svg){fig-align='center'}\n:::\n:::\n\n\n<!-- \n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + visualizing panel data\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/multiple-signals-unscale_4f17e01941efb5083214ccb6224a4ea0'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/multiple-signals-unscale-1.svg){fig-align='center'}\n:::\n:::\n\n\n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + **scaling** + visualizing panel data\n\n\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/scaled-signals_4f7c77a15c2ccbf5b16edf5083d49049'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/scaled-signals-1.svg){fig-align='center'}\n:::\n:::\n\n<div style=\"text-align: center;\">\n<small>[Figure 1 from Reinhart et al. (2021)](https://www.pnas.org/doi/10.1073/pnas.2111452118)</small>\n</div>\n\n**Takeaway:** The auxiliary signals track changes in the official reported cases quite well. This is clearer when they have all been placed on the same range as reported cases per 100,000 people.\n-->\n\n## Examples of panel data - COVID-19 cases and deaths in CA\n* [**Takeaway**]{.primary}: Cases appear to strongly correlate with deaths several weeks later.\n* We'll see this again in an upcoming session...\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/plot-ca-cases-deaths_e095992ce0f33a66126a69094109374b'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/plot-ca-cases-deaths-1.svg){fig-align='center'}\n:::\n:::\n\n\n# Versioned Data\n\n## Intro to versioned data\n* In panel data, we've seen that time is indicated by `time_value`.\n\n* Now, we add a second time index to indicate the data version...\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/versioned-wa-ex_d1b4d93f7cbb457f818704822d087176'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 4\n  geo_value time_value version    percent_cli\n  <chr>     <date>     <date>           <dbl>\n1 wa        2021-12-01 2021-12-05       0.884\n2 wa        2021-12-01 2021-12-06       0.917\n3 wa        2021-12-01 2021-12-07       0.896\n4 wa        2021-12-01 2021-12-08       0.985\n5 wa        2021-12-01 2021-12-09       1.03 \n6 wa        2021-12-01 2021-12-10       1.00 \n```\n:::\n:::\n\n\n* Note that this feature can be indicated in different ways (ex. `version`, `issue`, `release`, `as_of`). \n\n## Versioned panel data\nEstimated percentage of outpatient (DV-CLI) data across multiple issue dates, with updates and revisions to past data as new issue dates are released:\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/versioned-panel-multi-states-ex_5f25462de6bd98e9cb2a09fc0f9ebc24'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/versioned-panel-multi-states-ex-1.svg){fig-align='center'}\n:::\n:::\n\n<div style=\"text-align: center;\">\n<small>[Figure 5 from Reinhart et al. (2021)](https://www.pnas.org/doi/10.1073/pnas.2111452118)</small>\n</div>\n\n## Latency and revision in signals\n\n* [**Latency**]{.primary} refers to the delay between data collection and availability.\n\n**Example**: A signal based on medical insurance claims may take several days to appear but is subject to delays as claims are processed over weeks.\n\n* [**Revision**]{.primary} occurs when data is updated or corrected after initial publication, often due to new information or late reporting.\n\n**Example**: COVID-19 case reports are revised frequently after initial publication as new data comes in or reporting backlogs are cleared.\n\n## Latency and revision in signals - Example\n\n* Recall the first example of panel & versioned data we've seen... \n\n* This signal is 4 days [**latent**]{.primary} (min(`version` - `time_value`))\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/latency-wa-ex_0e31c864291e0c2c73bcfc1c0e043a88'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 5\n  geo_value time_value version    percent_cli version_time_diff\n  <chr>     <date>     <date>           <dbl> <drtn>           \n1 wa        2021-12-01 2021-12-05       0.884 4 days           \n2 wa        2021-12-02 2021-12-06       0.737 4 days           \n3 wa        2021-12-03 2021-12-07       0.662 4 days           \n4 wa        2021-12-04 2021-12-08       0.663 4 days           \n5 wa        2021-12-05 2021-12-09       0.872 4 days           \n6 wa        2021-12-06 2021-12-10       0.642 4 days           \n```\n:::\n:::\n\n\n* And clearly undergoes [**revision**]{.primary} over time (ex. consider Dec. 1's `percent_cli` across `version`):\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/revision-wa-ex_d69634ad6ceca1f61828848e78a309bd'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 5\n  geo_value time_value version    percent_cli version_time_diff\n  <chr>     <date>     <date>           <dbl> <drtn>           \n1 wa        2021-12-01 2021-12-05       0.884 4 days           \n2 wa        2021-12-01 2021-12-06       0.917 5 days           \n3 wa        2021-12-01 2021-12-07       0.896 6 days           \n4 wa        2021-12-01 2021-12-08       0.985 7 days           \n5 wa        2021-12-01 2021-12-09       1.03  8 days           \n6 wa        2021-12-01 2021-12-10       1.00  9 days           \n```\n:::\n:::\n\n\n<!-- min_lag: the minimum time to any value min(as.integer(version) - as.integer(time_value)  -->\n<!-- max_lag: the amount of time until the final (new) version -->\n<!-- revision_summary computes some basic statistics about the revision behavior of an archive, returning a tibble summarizing the revisions per time_value+epi_key features. -->\n\n## Revision triangle, Outpatient visits in WA 2022\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/revision-triangle_be4dc28073dfc2594745256bfdb6f450'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/revision-triangle-1.png){fig-align='center'}\n:::\n:::\n\n\n## Revisions\nMany data sources are subject to revisions:\n\n* Case and death counts are frequently corrected or adjusted by authorities.\n\n* Medical claims data can take weeks to be submitted and processed.\n\n<!--* In the previous slide's example because doctor's visits may be reported to the health system partners several days after they occur, these signals are typically available with several days of lag. This means that estimates for a specific day are only available several days later. -->\n\n* Lab tests and medical records can be backlogged for a variety of reasons.\n\n* Surveys are not always completed promptly.\n\n* [**Key**]{.primary}: An accurate revision log is crucial for researchers building forecasts. \n\n**A forecast that is made today can should rely on information we have access to today.**\n\n## Three types of revisions\n1. [**Sources that don't revise**]{.primary} - Ex. Facebook or Google symptoms (provisional and final are the same)\n\n1. [**Predictable revisions**]{.secondary} - Ex. Claims data (CHNG) and public health reports aligned by test, hosp., or death date\n\n1. [**Revisions that are large and erratic to predict**]{.tertiary} - Ex. COVID cases and deaths, especially when aligned by report date (which can be highly variable & less predictable compared to test data). \n\n## Types of revisions - Comparison between 2. and 3.\n\n* Revision behavior for two indicators in the HRR containing Charlotte, NC.\n\n<!-- Each colored line corresponds to the data as reported on a particular date (as of dates varying from 28 September through 19 October). -->\n* [**DV-CLI signal (left)**]{.secondary} was regularly revised throughout the period, although effects fade farther back.\n\n* [**JHU CSSE cases (right)**]{.tertiary} remain \"as reported\" on Sept. 28, with a spike toward the end of this period, until a major correction is made on Oct. 19, which brings this down & affects prior data.\n\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/fig1-McDonald_57f281feb348198c973755563067043e'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/fig1-McDonald-1.svg){fig-align='center'}\n:::\n:::\n\n<div style=\"text-align: center;\">\n<small>[Figure 1 from McDonald et al. (2021)](https://www.pnas.org/doi/pdf/10.1073/pnas.2111453118)</small>\n</div>\n\n## Key takeaways\n\n* [**Medical claims revisions**]{.secondary}: More systematic and predictable.\n* [**COVID-19 case report revisions**]{.tertiary}: Erratic and often unpredictable.\n* Large spikes or anomalies can occur as\n    + [**Reporting backlogs**]{.tertiary} are cleared.\n    + [**Changes in case definitions**]{.tertiary} are implemented.\n\n## Reporting backlogs - Example\n\n* **Left**: Reported cases per day in Bexar County, Texas, during the summer of 2020. On July 16, 4,810 [backlogged cases]{.primary} were reported, reflecting a 2-week delay. This caused a prolonged spike due to the 7-day trailing average applied to the counts.\n\n* **Right**: CTIS estimates of CLI-in-community showed more stable underlying trends.\n\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/fig4-Reinhart_5c64d9eee7a82fc1f0adb871bc0fb385'}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/fig4-Reinhart-1.svg){fig-align='center'}\n:::\n:::\n\n<div style=\"text-align: center;\">\n<small>[Figure 4 from Reinhart et al. (2021)](https://www.pnas.org/doi/10.1073/pnas.2111452118)</small>\n</div>\n\n## Reporting backlogs - Key takeaways\n\n* [**Reporting issues been common across U.S. jurisdictions**]{.primary}.\n\n* For example, audits have regularly discovered [**misclassified or unreported cases and deaths**]{.primary}.\n\n* This underscores the value of [**cross-checking data with external sources**]{.primary} not part of the same reporting systems.\n\n\n# Epidata API\n\n## Goals of Delphi Epidata platform and repository\n\n<div style=\"font-size: 0.9em;\">\n1. **Be the one-stop shop for aggregated epi-surveillance time-series (\"epi-signals\")**\n    + Hence: include also signals available elsewhere, especially if they don't keep data revisions - E.g. CDC's own NSSP, NWSS\n    + Be the national historical repository of record & preserve the raw data\n\n2. **Be the national clearinghouse for epi-signals, including those held elsewhere**\n    + The go-to place for signal discovery\n\n3. **Add value to existing signals and synthesize new ones**\n    + Added value: see next slide\n    + Synthesize new: via signal fusion, e.g. nowcasting\n\n4. **Be the focal point for community-wide efforts to open up privately held data**\n    + Better positioned than government or industry\n</div>\n\n\n## The bigger goal\nThe goal is to make epi-surveillance [more nimble, complete, standardized, robust, and real-time]{.primary} and\n\n[less burdensome on the health system itself]{.primary}. \n\nEpidata is not the solution; but we hope it is a blueprint towards such a solution.\n\n\n## What is the Epidata repository\n\n[**Epidata**]{.primary} is a repository of aggregated epi-surveillance time series. To the full extent we can, we make everything [free and open-source]{.primary}.\n\n* To date, it has accumulated over 5 billion records (each record is the value of a signal, at a particular date, and a particular location).\n\n* At the peak of the pandemic, we were receiving millions of API queries per day.\n\n* [**Data comes from**]{.primary}: public health reporting, medical insurance claims, medical device data, Google search queries, wastewater, app-based mobility patterns.\n\n* Many of our data streams simply aren't available anywhere else.\n\n* [**Added value we provide**]{.primary}: revision tracking, anomaly detection, trend detection, smoothing, imputation, geo-temporal-demographic disaggregation\n\n## Features of Delphi Epidata\n\n* Built-in support for:\n    + Data revisions (\"backfill\").  Concepts of \"reporting date\" and \"as of\".\n    + Backfill projection and alerting to changes in backfill dynamics\n    + Geo levels w/ auto-aggregation: county, MSA, HRR, state, HHS region, nation\n        - Also esoteric ones: DMA, sewer sheds\n    + Demographic breakdown\n    + Representation for missingness and censoring\n    + Population sizes and fine-grained population density\n    \n* Pre-computed smoothing and normalization (customization planned)\n\n* Access control\n\n* Code is Open Source.  Signals are as accessible (w/ API, SDK) as allowed by DUAs\n\n\n## Epidata API \n\n* [Delphi's Epidata API](https://cmu-delphi.github.io/delphi-epidata/) provides real-time access to epidemiological surveillance data. \n\n* The [main endpoint](https://cmu-delphi.github.io/delphi-epidata/api/covidcast.html) (covidcast) providing daily updates about current COVID-19 and influenza activity across the United States.\n\n* A [variety of other endpoints](https://cmu-delphi.github.io/delphi-epidata/api/README.html), providing primarily historical data about various diseases including COVID-19, influenza, dengue fever, and norovirus in several countries.\n\n* A [full-featured R client](https://cmu-delphi.github.io/delphi-epidata/api/client_libraries.html) is available for quick access to all data. \n\n* A [Legacy Python client](https://cmu-delphi.github.io/delphi-epidata/api/client_libraries.html#python) is available, full-featured Python client in development.\n\n## Some of our data sources\n### Ongoing Sources:\n* [**Insurance claims**]{.primary}: %Covid {inpatient, outpatient}, by {county x day}\n* [**Google Symptom searches**]{.primary}: 7 symptoms groups, by {county x day}\n* [**Quidel/Ortho antigen tests**]{.primary}: %Covid by age group, by {county x day}\n* [**NCHS Deaths**]{.primary}: all-cause, pneumonia, flu, Covid, by {state x week}\n* [**NSSP ED visits**]{.primary}: %Covid, %flu, %RSV, by {county x week}  (new!)\n* [**NWSS Covid**]{.primary}, by {sampling-site x day}  (in progress)\n\n## Some of our data sources\n### Active during pandemic, could be restarted for the next PHE:\n* [**HHS Hosp/ICU beds**]{.primary}: Covid, flu, by age-group, by {state x day}, {facility x week}\n* [**CTIS (\"Delphi Facebook Survey\")**]{.primary}: many dozens of questions, by (county x day)\n* [**STLT-reported**]{.primary}: {cases, deaths} via {JHU, USAFacts}, by (country x day)\n* [**Safegraph mobility**]{.primary}: misc measures by {county x day},{county x week}\n\n\n\n\n## Some of our pre-pandemic data sources\n* FluView ILINet, by {state x week}\n\n* FluView Clinical (% positive flu, PH and clinical labs)\n\n* Google Health Trends (GHT), precursor to Google Symptoms\n\n* Google Flu Trends (GFT), precursor to to GHT\n\n* Twitter flu\n\n* Access counts for flu-related CDC pages, by {city x week}\n\n* Access counts for flu-related Wikipedia entries by {day x hour}\n\n* Flu-surv (flu hosp rates, now expanded to RESP-NET)\n\n* Misc signals for dengue, norovirus\n\n* Misc signals for PAHO countries, ECDC, KCDC, Taiwan,...\n\n* Delphi ILI nowcasts, by {state x week}, visualized in \"ILI Nearby\" website\n\n* Delphi ILI forecasts, by {state x week}\n\n## Severity pyramid\n\n<div style=\"position: relative; width: 90%; height: auto; margin: 0 auto;\">\n  <!-- Embed the JPG image with 80% width -->\n  <img src=\"gfx/severity_pyramid.jpg\" width=\"100%\" height=\"auto\">\n\n  <!-- Create clickable areas on top of the JPG -->\n  <!-- NCHS mortality -->\n  <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/nchs-mortality.html\"\n     style=\"position: absolute; top: 85px; left: 685px; width: 170px; height: 25px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n\n  <!-- Hospital admissions - medical insurance claims -->\n  <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/hospital-admissions.html\"\n     style=\"position: absolute; top: 165px; left: 685px; width: 245px; height: 20px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n  \n  <!-- Hospital reporting -->\n  <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/hhs.html\"\n     style=\"position: absolute; top: 215px; left: 685px; width: 188px; height: 16px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n\n  <!-- Reported cases -->\n  <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html\"\n     style=\"position: absolute; top: 275px; left: 685px; width: 160px; height: 13px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>  \n  \n  <!-- Quidel -->\n  <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/quidel.html\"\n     style=\"position: absolute; top: 295px; left: 685px; width: 227px; height: 20px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n\n  <!-- Doctor visits -->\n  <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html\"\n     style=\"position: absolute; top: 335px; left: 685px; width: 245px; height: 19px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a> \n  \n   <!-- Google search trends -->\n   <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/google-symptoms.html\"\n     style=\"position: absolute; top: 390px; left: 685px; width: 209px; height: 19px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n\n   <!-- FB survey -->\n   <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/fb-survey.html\"\n     style=\"position: absolute; top: 410px; left: 685px; width: 158px; height: 20px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n  \n   <!-- SafeGraph -->\n   <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/safegraph.html\"\n     style=\"position: absolute; top: 530px; left: 685px; width: 175px; height: 18px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n  \n   <!-- FB survey -->\n   <a href=\"https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/fb-survey.html\"\n     style=\"position: absolute; top: 550px; left: 685px; width: 158px; height: 16px; border: 0px solid blue; background-color: rgba(0, 0, 0, 0);\">\n  </a>\n  \n</div>\n\n# Epidatr\n\n## Installing `epidatr`\nInstalling the package in R is straightforward...\n\nInstall the CRAN version\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/install-epidatr-cran_7ee22f1d1fd70747a3ec281caa3fbe35'}\n\n```{.r .cell-code}\n# Install the CRAN version\npak::pkg_install(\"epidatr\")\n```\n:::\n\n\n<br>\n\nor the development version\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/install-epidatr-dev_79be1658c8fb5dd16b17faf8f9063c10'}\n\n```{.r .cell-code}\n# Install the development version from the GitHub dev branch\n# pak::pkg_install(\"cmu-delphi/epidatr@dev\")\n```\n:::\n\n\nThe CRAN listing is [here](https://cran.r-project.org/package=epidatr/index.html).\n\n## Python\n\nIn Python, install [`delphi-epidata` from PyPI](https://pypi.org/project/delphi-epidata/) with \n\n``` sh\npip install delphi-epidata\n```\n\n<br>\n\n`delphi-epidata` is soon to be replaced with `epidatpy`.\n\n``` sh\n# Latest dev version\npip install -e \"git+https://github.com/cmu-delphi/epidatpy.git#egg=epidatpy\"\n\n# PyPI version (not yet available)\npip install epidatpy\n```\n\n\n\n\n## Using `epidatr` and `epidatpy`\nThe following shows how to import the library and fetch all confirmed influenza hospital admissions occurring each day for North Carolina:\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/hhs-influenza-pub-covidcast_fef555e7133748ac10f73e05da84ea48'}\n\n```{.r .cell-code}\nlibrary(epidatr)\nres <- pub_covidcast('hhs', 'confirmed_admissions_influenza_1d', 'state', 'day', geo_values = 'nc',\n                     time_values = c(20240401, 20240405:20240414))\nhead(res, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 15\n  geo_value signal     source geo_type time_type time_value direction issue     \n  <chr>     <chr>      <chr>  <fct>    <fct>     <date>         <dbl> <date>    \n1 nc        confirmedâ€¦ hhs    state    day       2024-04-01        NA 2024-04-22\n2 nc        confirmedâ€¦ hhs    state    day       2024-04-05        NA 2024-04-22\n3 nc        confirmedâ€¦ hhs    state    day       2024-04-06        NA 2024-04-22\n# â„¹ 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>,\n#   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl>\n```\n:::\n:::\n\n\n<br>\n\nPython equivalent:\n``` python\nres = Epidata.covidcast('hhs', 'confirmed_admissions_influenza_1d', 'day', 'state', [20240401, Epidata.range(20240405, 20240414)], 'nc')\nprint(res['result'], res['message'], len(res['epidata']))\n```\n\n\n\n## API keys\n\n* Anyone may access the Epidata API anonymously without providing any personal data. \n\n* Anonymous API access is subject to the following restrictions:\n  1) public datasets only; 2) rate limited to 60 requests per hour; 3) only two parameters may have multiple selections\n\n* An API key grants priviledged access to the API and can be obtained by [registering with us](https://api.delphi.cmu.edu/epidata/admin/registration_form). \n\n* Privileges of registration:\n  1) no rate limit; 2) no limit on multiple selections\n\n::: {.callout-tip}\n## Tip\nThe `epidatr` client automatically searches for the key in the `DELPHI_EPIDATA_KEY` environment variable. We recommend storing it in your `.Renviron` file, which R reads by default. More on setting your API key [here](https://rdrr.io/cran/epidatr/man/get_api_key.html).\n:::\n\n\n\n# Find Data Sources & Signals\n\n## Finding data sources and signals of interest\n\n* Diverse Data Streams\n    +  [**Variety of Data**]{.primary}: Access to medical claims data, cases and deaths, mobility data, and more.\n    +  [**Geographic Coverage**]{.primary}: Includes multiple regions, making it comprehensive yet complex.\n    +  [**Challenge**]{.primary}: Difficulty in pinpointing the specific data stream of interest.\n\n* Using the Documentation\n    +  [**Comprehensive Listings**]{.primary}: Documentation details all available data sources and signals for both [COVID-19](https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html) and other [endpoints](https://cmu-delphi.github.io/delphi-epidata/api/README.html#source-specific-parameters).\n\n* Docs are great for a deep dive into the data, whereas the apps & tools are useful to see what is available...\n\n\n\n\n## Cheatsheet of web-based apps we provide\nWe provide...\n\n* A [signal discovery app](https://delphi.cmu.edu/signals/), to explore what epi-signals are available in Delphi Epidata and elsewhere in the community.\n\n* A [general signal visualization tool](https://delphi.cmu.edu/epivis/).\n\n* A [signal dashboard](https://delphi.cmu.edu/covidcast/) and a \"classic\" [map-based version](https://delphi.cmu.edu/covidcast/classic/) to visualize a core set of COVID-19 and flu indicators.\n\n* A [COVID-19 signal export app](https://delphi.cmu.edu/covidcast/export/), a [dashboard builder](https://delphi.cmu.edu/covidcast/dashboard/), and more!\n\n## Signal dashboard - For COVID-19 & flu data\n\n::: flex\n::: w-40\n\n* The [signal dashboard](https://delphi.cmu.edu/covidcast/) displays a selection of signals for COVID-19 & flu.\n\n<br>\n\n* Browse by location or indicator to choose which signal you are interested in & then export the data for analysis.\n\n<br>\n\n* **Example**: Google symptom search trends in NC.\n\n<!-- \n* Includes \"Data Export\" to pull a selected signal & download as a CSV. -->\n:::\n::: w-60\n\n<a href=\"https://delphi.cmu.edu/covidcast/indicator/?date=20240426&region=NC\">\n  <img src=\"gfx/google_symptoms_signal_dash.jpg\" alt=\"Signal Discover Screenshot\">\n</a>\n\n:::\n:::\n\n\n## Signal discovery app - Browse for more data\n* [**Signal discovery app**]{.primary}: An easy way to find data sources and signals (no programming required).\n    +  Search tool that is a good to browse & find data.\n* [Let's try it out together!](https://delphi.cmu.edu/signals/)\n<a href=\"https://delphi.cmu.edu/signals/\">\n  <img src=\"gfx/signal_discover_screenshot.jpg\" alt=\"Signal Discover Screenshot\" style=\"height: auto; width: auto;\">\n</a>\n\n## Example - NCHS weekly flu mortality data in states\n\n<a href=\"https://delphi.cmu.edu/signals/\">\n  <img src=\"gfx/signal_discover_screenshot_ex.jpg\" alt=\"Signal Discover Screenshot\" style=\"height: auto; width: auto;\">\n</a>\n\n<!-- To reproduce: Pathogen/Syndrom = flu, Severity pyramid = Dead (top of pyramid), Geo-level = ADM1 (e.g. U.S. states) -->\n\n## Interactive tooling in R \n\n* Moving from initial web-based browsing to programming, [**how do we find sources and signals in R?**]{.primary}\n\n* Functions to enhance data discovery in `epidatr`:\n\n`avail_endpoints()` Function:\n    +  Lists all endpoints with brief descriptions.\n    + Highlights specific endpoints that cover non-US locations, facilitating targeted searches.\n    \n[**Output Format**]{.primary}: Returns a tibble for easy viewing and analysis of available data sources.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/avail-endpoints-fun_9a9e96268a77e53be38ec9b447c8c4c7'}\n\n```{.r .cell-code}\navail_endpoints() \n```\n:::\n\n\n##  Using the `covidcast_epidata()` function \n\n* **Function Overview**: `covidcast_epidata()` provides detailed insights into data sources from the COVIDcast endpoint.\n\n* **Source List**: Each data source is listed in `covid_sources$sources`, with associated tibbles describing included signals.\n    \n* **Editor Support**: In RStudio or similar editors, use tab completion to explore:\n\n    + **Data Sources**: Type `covid_sources$source$` to view available data sources.\n        \n    + **Signals**: Type `covid_sources$signals$` to see signal options with autocomplete assistance.\n        \n* **Filtering Convenience**: Signal names are prefixed with their respective data source for easier navigation.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/covidcast-epidata-fun_52de8a9b645126e752ebb51b4f75bc25'}\n\n```{.r .cell-code}\ncovid_sources <- covidcast_epidata()\nhead(covid_sources$sources, n = 2) # head(list, n = 2) will print the first two elements of the list\n```\n:::\n\n\n## Fetching data - COVIDcast main endpoint \n\n* Fetching data from the Delphi Epidata API is simple. \n\n* The `pub_covidcast()` function lets us access the `covidcast` endpoint.\n\n* We need to specify the following six arguments...\n    1. `source`: Data source name\n    2. `signals`: Signal name\n    3. `geo_type`: Geographic level \n    4. `time_type`: Time resolution\n    5. `geo_values`: Location(s)\n    6. `time_values`: times of interest\n    \n* Let's give this a try!\n\n\n## Fetching data - COVIDcast main endpoint \n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/us-jhu-pub-covidcast_f7fea313ca3fc7de3d14b918d9381862'}\n\n```{.r .cell-code}\nlibrary(epidatr)\nlibrary(dplyr)\n\nepidata <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"confirmed_7dav_incidence_prop\", \n  geo_type = \"nation\",\n  time_type = \"day\",\n  geo_values = \"us\",\n  time_values = epirange(20210101, 20210401)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-us-jhu-pub-covidcast_c82d27de9c808865dcf9350006a03076'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 8\n  geo_value signal             source geo_type time_value issue        lag value\n  <chr>     <chr>              <chr>  <fct>    <date>     <date>     <dbl> <dbl>\n1 us        confirmed_7dav_inâ€¦ jhu-câ€¦ nation   2021-01-01 2023-03-10   798  61.9\n2 us        confirmed_7dav_inâ€¦ jhu-câ€¦ nation   2021-01-02 2023-03-10   797  64.2\n3 us        confirmed_7dav_inâ€¦ jhu-câ€¦ nation   2021-01-03 2023-03-10   796  67.1\n```\n:::\n:::\n\nHere `value` is the requested signal â€“ in this case, the number of daily new confirmed COVID-19 cases per 100,000 population from January to April 2021. <!-- (and standard error if it is applicable to the metric). -->\n\n\n## Returned data - COVIDcast main endpoint \n\n* `pub_covidcast()` outputs a tibble, where each row represents one observation.\n\n* Each observation covers a set of events aggregated by time and by geographic region is a record in our database. Each such record includes:\n* `time_value`: time period when the events occurred.\n* `geo_value`: geographic region where the events occurred.\n* `value`: estimated value.\n* `stderr`: standard error of the estimate, usually referring to the sampling error.\n* `sample_size`: number of events used in the estimation.\n\n<!--For example, a number of COVID-19 antigen tests were performed in the state of New York on August 1. The `time_value` would be August 1, with `geo_value` indicating the state of New York, while the remaining fields would give the estimated test positivity rate (the percentage of tests that were positive for COVID-19), its standard error, and the number of tests used to calculate the estimate.-->\n\n## Returned data - COVIDcast main endpoint \nCruciallyâ€”and unlike most other sources of COVID-19 dataâ€”our API reports two additional fields with each record:\n\n* `issue`: The time period when this observation was published.\n\n* `lag`: The time delay between when the events occurred and when this observation was published.\n\n* Meaning that unlike most other sources of COVID data, it tracks the complete revision history of every signal.\n\n* This allows for historical reconstructions of what information was available at specific times. [**More on this soon!**]{.primary}\n\n\n## Geographic levels\n\n* The Epidata API makes signals available at different geographic levels, depending on the endpoint.\n* For the `confirmed_7dav_incidence_prop` signal, we can obtain values for each state.\n\n* Simply change `geo_type` and `geo_values` in the previous example to get...\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/state-jhu-pub-covidcast_76f944375131f92839ea5ac23ddd651d'}\n\n```{.r .cell-code}\n# Obtain the most up-to-date version of the smoothed covid-like illness (CLI)\n# signal from the COVID-19 Trends and Impact survey for all states\nstate_epidata <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"confirmed_7dav_incidence_prop\",\n  geo_type = \"state\",\n  time_type = \"day\",\n  geo_values = \"*\",\n  time_values = epirange(20210101, 20210401)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-state-jhu-pub-covidcast_4e2500d41f1ccd8d2695f1d5ebb46430'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  geo_value signal             source geo_type time_value issue        lag value\n  <chr>     <chr>              <chr>  <fct>    <date>     <date>     <dbl> <dbl>\n1 ak        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  35.9\n2 al        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  67.7\n3 ar        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  76.2\n4 as        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791   0  \n5 az        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-03   791  83.4\n6 ca        confirmed_7dav_inâ€¦ jhu-câ€¦ state    2021-01-01 2023-03-10   798 104. \n```\n:::\n:::\n\n\n\n## COVIDcast main endpoint - Example query \nCounty `geo_values` are [FIPS codes](https://en.wikipedia.org/wiki/List_of_United_States_FIPS_codes_by_county) and are discussed in the API docs [here](https://cmu-delphi.github.io/delphi-epidata/api/covidcast_geography.html). The example below is for Orange County, California. \n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/county-jhu-pub-covid_c386d1850061bc546454df193b1c610d'}\n\n```{.r .cell-code}\njhu_county_data <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"confirmed_7dav_incidence_prop\",\n  geo_type = \"county\",\n  time_type = \"day\",\n  time_values = epirange(20210101, 20210401),\n  geo_values = \"06059\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-county-jhu-pub-covid_68133ff7e3fa216509d4d3232b0c21af'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  geo_value signal             source geo_type time_value issue        lag value\n  <chr>     <chr>              <chr>  <fct>    <date>     <date>     <dbl> <dbl>\n1 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-01 2023-03-03   791  105.\n2 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-02 2023-03-03   790  107.\n3 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-03 2023-03-03   789  108.\n4 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-04 2023-03-03   788  107.\n5 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-05 2023-03-03   787  105.\n6 06059     confirmed_7dav_inâ€¦ jhu-câ€¦ county   2021-01-06 2023-03-03   786  104.\n```\n:::\n:::\n\n\n::: {.callout-important icon=\"false\"}\n\n## Note\n\nThe `covidcast` endpoint supports `*` in its time and geo fields. Try to obtain the signal values for all available counties by replacing `geo_values = \"06059\"` with `geo_values = \"*\"`.\n:::\n\n## Example queries - Other endpoints: Hospitalizations\n\n[**COVID-19 Hospitalization: Facility Lookup**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility_lookup.html> </small>\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/hosp-facility-lookup_85773673fb7cada0dbc225e2e0fac1e8'}\n\n```{.r .cell-code}\npub_covid_hosp_facility_lookup(city = \"southlake\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 Ã— 10\n  hospital_pk state ccn    hospital_name    address city  zip   hospital_subtype\n  <chr>       <chr> <chr>  <chr>            <chr>   <chr> <chr> <chr>           \n1 450888      TX    450888 TEXAS HEALTH HAâ€¦ 1545 Eâ€¦ SOUTâ€¦ 76092 Short Term      \n2 670132      TX    670132 METHODIST SOUTHâ€¦ 421 E â€¦ SOUTâ€¦ 76092 Short Term      \n# â„¹ 2 more variables: fips_code <chr>, is_metro_micro <dbl>\n```\n:::\n:::\n\n\n<br> \n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/hosp-facility-lookup-wy_faa46fa7addde30f63f97cfe2abfb02e'}\n\n```{.r .cell-code}\npub_covid_hosp_facility_lookup(state = \"WY\") |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 10\n  hospital_pk     state ccn   hospital_name address city  zip   hospital_subtype\n  <chr>           <chr> <chr> <chr>         <chr>   <chr> <chr> <chr>           \n1 100 LANCASTER â€¦ WY    2020â€¦ 42091         <NA>    [C39â€¦ MAIN  390195          \n2 2333 BIDDLE AVE WY    2020â€¦ 26163         POINT â€¦ [C23â€¦ HENRY 230146          \n3 2333 BIDDLE AVâ€¦ WY    2020â€¦ 26163         POINT â€¦ [C23â€¦ SELEC 232031          \n4 2752 CENTURY Bâ€¦ WY    2020â€¦ 42011         POINT â€¦ [C39â€¦ SURGI 390316          \n5 310 SOUTH FALLâ€¦ WY    2020â€¦ 05037         POINT â€¦ [C04â€¦ CROSS 041307          \n6 5200 FAIRVIEW â€¦ WY    2020â€¦ 27025         POINT â€¦ [C24â€¦ FAIRV 240050          \n# â„¹ 2 more variables: fips_code <chr>, is_metro_micro <dbl>\n```\n:::\n\n```{.r .cell-code}\n# A non-example (there is no city called New York in Wyoming)\n# pub_covid_hosp_facility_lookup(state = \"WY\", city = \"New York\")\n```\n:::\n\n\n\n## Example queries - Other endpoints: Hospitalizations\n\n[**COVID-19 Hospitalization by Facility**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/hosp-by-facility_9d4e87a921fd5f14a96aa5518c4cbb15'}\n\n```{.r .cell-code}\npub_covid_hosp_facility(\n  hospital_pks = \"100075\",\n  collection_weeks = epirange(20200101, 20200501)\n) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 113\n  hospital_pk state ccn    hospital_name    address city  zip   hospital_subtype\n  <chr>       <chr> <chr>  <chr>            <chr>   <chr> <chr> <chr>           \n1 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n2 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n3 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n4 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n5 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n6 100075      FL    100075 ST JOSEPHS HOSPâ€¦ 3001 Wâ€¦ TAMPA 33677 Short Term      \n# â„¹ 105 more variables: fips_code <chr>, geocoded_hospital_address <chr>,\n#   hhs_ids <chr>, publication_date <date>, collection_week <date>,\n#   is_metro_micro <lgl>, total_beds_7_day_sum <dbl>,\n#   all_adult_hospital_beds_7_day_sum <dbl>,\n#   all_adult_hospital_inpatient_beds_7_day_sum <dbl>,\n#   inpatient_beds_used_7_day_sum <dbl>,\n#   all_adult_hospital_inpatient_bed_occupied_7_day_sum <dbl>, â€¦\n```\n:::\n:::\n\n\n[**COVID-19 Hospitalization by State**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/hosp-by-state_a6c751f35ed7313d6b725796911b9a15'}\n\n```{.r .cell-code}\npub_covid_hosp_state_timeseries(states = \"MA\", dates = \"20200510\")\n```\n:::\n\n\n## Example queries - Other endpoints: Flu endpoints\n\n[**FluSurv hospitalization data**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/flusurv.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/flusurv_6f379821e559bdd3ada128ace1f4a055'}\n\n```{.r .cell-code}\npub_flusurv(locations = \"ca\", epiweeks = 202001) \n```\n:::\n\n\n[**Fluview data**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/fluview.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/fluview_d4983ac78e8b7910a57562929490c6d3'}\n\n```{.r .cell-code}\npub_fluview(regions = \"nat\", epiweeks = epirange(201201, 202001))\n```\n:::\n\n\n[**NIDSS Flu**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/nidss_flu.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/NIDSS-flu_ba2db0b3c3fe607722a8243aefae5b35'}\n\n```{.r .cell-code}\npub_nidss_flu(regions = \"taipei\", epiweeks = epirange(200901, 201301))\n```\n:::\n\n\n## Example queries - Other endpoints: Dengue endpoints\n\n[**Delphiâ€™s Dengue Nowcast**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/dengue_nowcast.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/Delphi-dengue-nowcast_200ae1c80dddb6a94159f938cd7c0e7d'}\n\n```{.r .cell-code}\npub_dengue_nowcast(locations = \"pr\", epiweeks = epirange(201401, 202301))\n```\n:::\n\n\n[**NIDSS dengue**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/nidss_dengue.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/NIDSS-dengue_102b584d5525ce8cc1945c48ba074281'}\n\n```{.r .cell-code}\npub_nidss_dengue(locations = \"taipei\", epiweeks = epirange(200301, 201301))\n```\n:::\n\n\n[**PAHO Dengue**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/paho_dengue.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/PAHO-Dengue_ba46325159f36683fe30ea99b813b2cf'}\n\n```{.r .cell-code}\npub_paho_dengue(regions = \"ca\", epiweeks = epirange(200201, 202319))\n```\n:::\n\n\n## Example queries - Other endpoints: Wikipedia\n\n[**Wikipedia access**]{.primary}\n\n<small> API docs: <https://cmu-delphi.github.io/delphi-epidata/api/wiki.html> </small>\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/pub-wiki_325078e5c6e78ea8342544776b9e3222'}\n\n```{.r .cell-code}\npub_wiki(\n  language = \"en\",\n  articles = \"influenza\",\n  time_type = \"week\",\n  time_values = epirange(202001, 202319)\n) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 6\n  article   count     total  hour epiweek    value\n  <chr>     <dbl>     <dbl> <dbl> <date>     <dbl>\n1 influenza  6516 663604044    -1 2019-12-29  9.82\n2 influenza 10244 789885521    -1 2020-01-05 13.0 \n3 influenza 10728 783760384    -1 2020-01-12 13.7 \n4 influenza 24843 785222292    -1 2020-01-19 31.6 \n5 influenza 62850 780291898    -1 2020-01-26 80.5 \n6 influenza 41768 778222703    -1 2020-02-02 53.7 \n```\n:::\n:::\n\n\n::: {.callout-tip}\n## Tip - public vs private methods\n\nAside from these public methods we've gone through (these start with `pub_`),\nthere are private methods (these start with `pvt_` when you type `avail_endpoints()`).\nThese require private access keys to use (separate from the Delphi Epidata API key). \nTo run these locally, you will need to store these secrets in your `.Reviron` file, or set them as environmental variables.\nSee [Private methods](https://cmu-delphi.github.io/epidatr/articles/signal-discovery.html) for examples of using private endpoints.\n:::\n\n## Signal metadata\n\n* Some endpoints provide additional metadata for signals.\n    + [**Time Information**]{.primary}: Details on available time frames and last update times.\n    + [**Geography Information**]{.primary}: Details on available geography types. \n\n* Key Endpoints for Metadata\n    + `pub_covidcast_meta()`: Access metadata for the COVIDcast endpoint.\n    + `pub_fluview_meta()`: Get metadata for the FluView endpoint.\n    + `pub_meta()`: General metadata for the Delphi Epidata API.\n\n# Versioning in `epidatr`\n\n## Versioned data in `epidatr`\n\n* Epidata API contains comprehensive data record, capturing each signal's estimate, location, date, and update timeline.\n\n* Requesting Specific Data Versions:\n    + Use `as_of` or `issues` arguments to specify data availability.\n    + Use `as_of` to fetch one version and `issues` to fetch multiple.\n    + Only one argument can be used at a time; not all endpoints support both\n    \n* Let's start with fetching one version...\n\n## Obtaining data \"as of\" a specific date\n\n* **Example**: [Doctor Visits Signal](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html) (from the `covidcast` endpoint)\n    + Estimates the percentage of outpatient doctor visits that are COVID-related.\nTo give a specific example, let's consider the estimate for PA on May 1, 2020:\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/pa-may-1st-as-of_6a684eaea42c98d8b8b36cde87efeb39'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  as_of = \"2020-05-07\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-pa-may-1st-as-of_2b2402c9c4b810bd35e19e8d0325d5b7'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 Ã— 7\n  geo_value signal           source        time_value issue        lag value\n  <chr>     <chr>            <chr>         <date>     <date>     <dbl> <dbl>\n1 pa        smoothed_adj_cli doctor-visits 2020-05-01 2020-05-07     6  2.58\n```\n:::\n:::\n\n\n* Initial estimate was *issued* on May 7, 2020 (due to delay from aggregation and ingestion by the API).\n\n## Obtaining data \"as of\" a specific date\n\n[**Default behaviour:**]{.primary} If we don't specify `as_of`, we get the most recent estimate:\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/pa-may-1st-most-recent_bba5ba22f7e72130d664c2dd272bd775'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-pa-may-1st-most-recent_5a9b21e7e5adc3485db253e8441f4fda'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  5.97     NA\n```\n:::\n:::\n\n\n* [**Substantial Estimate Change**]{.primary}:\n    + Estimate increased from <3% to almost 6% after May 7, reflecting new data on visits from May 1.\n    \n* [**Versioning is Important in Forecasting**]{.primary}:\n    + Accurate backtesting requires using data available at the time of model fitting, not later updates, for accurate forecasting results.\n\n\n## Obtaining multiple specific issues for one state\nBy using the `issues` argument, we can request all issues in a certain time period:\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/pa-multiple-issues_69730a9ceadf3d302e4c36d7225e47d0'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"2020-05-01\", \"2020-05-15\")\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-pa-multiple-issues_4cf66e5f9adf03ad2a657d57b91a5b8f'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  3.66     NA\n```\n:::\n:::\n\n\n## Obtaining multiple issues for one state\n\nTo ensure that you've captured all issues up to a specific date (e.g., \"2020-05-15\"), set an extreme lower bound: `issues = epirange(\"1900-01-01\", \"2020-05-15\")`.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/extreme-lb-multiple-issues_b82b525865b8d2bc3133cf87722f3cc2'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"1900-01-01\", \"2020-05-15\")\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-extreme-lb-multiple-issues_7dfa358269ab2d2ebdfb4323f86f8dab'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  3.66     NA\n```\n:::\n:::\n\n\n* This doesn't change anything here, but it may matter for other types of data where you don't know the latency or reporting lag.\n\n* When in doubt, refer to the [signal's API documentation](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html)\nto find the earliest date available.\n\n## Obtaining multiple issues for one state\n\n* Once the maximum issue is reached and there are no more issues to come, the data is considered finalized, regardless of the maximum issue you requested.\n\n* For example, the last issue is from July 2020 and so the data is finalized as of July 2020 (not the last issue we requested).\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/extreme-lb-ub-multiple-issues_c7094c22e145b7d7bc4f75be8469af04'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"1900-01-01\", \"2024-12-11\") # From the 1900s to today\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-extreme-lb-ub-multiple-issues_19a18ab917ad5271ddbdcd4b5a0cf95a'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-06-29    59  5.99     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-06-30    60  5.99     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-01    61  5.95     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-02    62  5.97     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-03    63  5.97     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  5.97     NA\n```\n:::\n:::\n\n\n* We caution against starting queries with too late a minimum issue or too early maximum issue, as it could lead to incorrect or misleading results. You're safest bet to capture all issues is on the next slide...\n\n\n\n## Obtaining all issues for one state\n\nThe fast way to obtain all available issues for PA, set `issues` to be `*`:\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/pa-all-issues_ec0533b51d299d17a2a98bc8ceb49a40'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = \"*\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-pa-all-issues_852509fed32745bfb1f63fdee6122d09'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  3.66     NA\n7 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-15    14  3.66     NA\n8 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-16    15  3.61     NA\n```\n:::\n:::\n\n\n## Obtaining all issues for all states\n\nA very useful feature is the ability to extract all `geo_values` and `issues` by using `*` in both.\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/all-the-states-and-issues_0fe9a6ae9910bc1b63c1f68a22182699'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\",\n  geo_values = \"*\",\n  issues = \"*\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-all-the-states-and-issues_e65c739d4c0cb97a4712d288cd16adfc'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-07     6  1.61     NA\n2 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  2.40     NA\n3 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-09     8  2.38     NA\n4 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-12    11  2.38     NA\n5 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-13    12  2.36     NA\n6 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-14    13  2.36     NA\n```\n:::\n:::\n\n\nSo, now we obtain all available issues for all states (not just PA) for the specified date range. Neat!\n\n## Last but not least... The do nothing approach \n\n![](gfx/do-nothing.jpg){height=\"550px\"}\n\n## Last but not least... The do nothing approach \n**Final question:** What do you think happens when we adopt a \"do nothing\" approach to `geo_values` and `issues` (take both of them out) for this example?\n\n<small> **Hint**: remember a couple slides ago, when we removed `as_of`, we got the most recent estimate for PA. </small>\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/do-nothing_e45d66cf853ad32e8a5d333313a2d93e'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\"\n)\n```\n:::\n\n\n## Obtaining one issue for all states\n[**Final question:**]{.primary}  What do you think happens when we adopt a \"do nothing\" approach to `geo_values` and `issues` (take both of them out)?\n\n<small> [**Hint**]{.primary}: remember a couple slides ago, when we removed `as_of`, we got the most recent estimate for PA. </small>\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/one-issue-all-states_fd128c73a1287639373101ff62b07a26'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/head-one-issue-all-states_a1c301ead285d794d3ff5bc3978766fd'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 ak        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  5.72     NA\n2 al        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  2.74     NA\n3 ar        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  4.23     NA\n4 az        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  2.78     NA\n5 ca        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  4.25     NA\n6 co        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-07-04    64  8.77     NA\n```\n:::\n:::\n\n\nWe get the [**most recent issue**]{.primary} for [**all states**]{.primary}!\n\n\n<!-- ## Observations issued with a specific lag\n<div style=\"font-size: 0.8em;\">\n* We can use the `lag` argument to request only data reported with a certain lag. \n\n* **Example**: Request  a lag of 7 days fetches only data issued exactly 7 days after the corresponding `time_value`:\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/specific lag_c9f669fa7ec3511bd6e6abe1a0e8aee4'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  lag = 7\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/unnamed-chunk-2_3b32fe6103a674312acf9af4d0417bec'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-01 2020-05-08     7  3.28     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-02 2020-05-09     7  3.23     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-05 2020-05-12     7  2.78     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-06 2020-05-13     7  2.56     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-07 2020-05-14     7  2.19     NA\n```\n:::\n:::\n\n</div>\n\n## Query results exclusion\n<div style=\"font-size: 0.8em;\">\n* Although the query we ran on the previous slide requested values from May 1 to May 7, May 3 and May 4 were not included due to a 7-day lag.\n\n* Results for those dates appear only if updates are issued on the corresponding lag day (e.g., May 10).\n\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/query results exclusion_814781c95d7c2f65d81c8ffd802ddd03'}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-03\", \"2020-05-03\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"2020-05-09\", \"2020-05-15\")\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='day1-morning_cache/revealjs/unnamed-chunk-3_93cd832c89993ef6f6650c9a0c5df8a6'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 Ã— 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-03 2020-05-09     6  2.79     NA\n2 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-03 2020-05-12     9  3.02     NA\n3 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-03 2020-05-13    10  3.04     NA\n4 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-03 2020-05-14    11  3.02     NA\n5 pa        smoothed_adj_cli doctor-viâ€¦ 2020-05-03 2020-05-15    12  3.05     NA\n```\n:::\n:::\n\n</div>\n-->\n\n## Main takeaways\n\n* [**Delphi Epidata:**]{.primary} A one-stop platform for real-time epidemic data, providing aggregated signals for disease tracking and forecasting from diverse sources like health records, mobility patterns, and more.\n    \n* [**Epidata API:**]{.primary} Open-access API delivering up-to-date, granular epidemiological data + makes all historical versions available.\n\n* [**Epidatr:**]{.primary} Enables you to access Delphi's epidemiological data through R and Python, offering easy installation, powerful API functions, and interactive tools for discovering and analyzing health signals.\n\n* [**Versioned Data and Latency:**]{.primary} Panel data captures time-series trends, which are often subject to revision.  A standout feature of this API is its inclusion of two critical fields...\n\n    1. `as_of`:  One version of the data, and referring to the specific date when the data was last update (i.e. the data was updated `as_of` this date)\n    \n    2. `issues`: Multiple versions of the data, each corresponding to different `as_of` dates, capturing revisions over time.\n    \nTheir purpose is to manage the record of revisions for transparency and accuracy in data analysis.\n\n## Final slide {.smaller}\n\n\n### Thanks:\n\n\n\n\n\n- The whole [CMU Delphi Team](https://delphi.cmu.edu/about/team/) (across many institutions)\n- Optum/UnitedHealthcare, Change Healthcare.\n- Google, Facebook, Amazon Web Services.\n- Quidel, SafeGraph, Qualtrics.\n- Centers for Disease Control and Prevention.\n- Council of State and Territorial Epidemiologists\n\n\n::: {layout-row=1 fig-align=\"center\"}\n![](gfx/delphi.jpg){height=\"100px\"}\n![](gfx/berkeley.jpg){height=\"100px\"}\n![](gfx/cmu.jpg){height=\"100px\"}\n![](gfx/ubc.jpg){width=\"250px\"}\n![](gfx/stanford.jpg){width=\"250px\"}\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}