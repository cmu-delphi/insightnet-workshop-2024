{
<<<<<<< HEAD
  "hash": "28f72bb7c4a04f21e070b09c447e6616",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntalk-title: \"Signal Discovery & Data Fetching\"\ntalk-short-title: \"Day 1 Morning\"\ntalk-subtitle: \"\"\nauthor: \"\"\nother-authors: \"\"\nrepo-address: \"cmu-delphi/insightnet-workshop-2024\"\ntalk-date: \"\"\nformat: revealjs\n---\n\n\n\n<!-- Set any of the above to \"\" to omit them -->\n\n<!-- Or adjust the formatting in _titleslide.qmd -->\n\n\n---\n---\n\n\n\\DeclareMathOperator*{\\minimize}{minimize}\n\n\n\n\n\n\n\n\n\n::: flex\n::: w-20\n\n:::\n::: w-80\n## {{< meta talk-title >}} {background-image=\"gfx/cover-art-1.svg\" background-position=\"bottom\"}\n\n### {{< meta talk-subtitle >}}\n\n<br>\n\n#### {{< meta author >}} \n\n{{< meta other-authors >}}\n\n\n{{< meta talk-date >}}\n\n\n:::\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n## Outline\n\n1. About Delphi \n\n1. Goals of Delphi Epidata platform\n\n1. Epidata API\n\n1. Finding data sources and signals\n\n1. Versioned data\n\n\n# Delphi\n\n## About Delphi\n\n* Founded in 2012 at Carnegie Mellon University, now expanded to UC Berkeley, and University of British Columbia.\n\n* Currently 5 faculty, ~10 PhD students, ~15 staff (mostly software engineers).\n\n* Easy to join us from anywhere (lots of volunteers during Covid-19 pandemic).\n\n* We are:\n    + CDC Center of Excellence for Influenza and Covid-19 Forecasting (2019-24).\n    + CDC Innovation Center for Outbreak Analytics and Disease Modeling (2024-29).\n\n**Our mission:** To develop the theory and practice of [epidemic detection, tracking and forecasting]{.primary}, and their use in decision making, both public and private.\n\n## What does Delphi do?\n\n* Procure [real-time, aggregated data streams]{.primary} informative of infectious diseases and syndromes, in collaboration with partners in industry and government.\n\n* Extract signals and make them widely available via the [Epidata platform & API]{.primary}.\n\n* Develop and deploy algorithms for [epidemic detection, tracking, forecasting]{.primary}.\n\n* Develop and maintain statistical software packages for these tasks.\n\n* Make it all production-grade, maximally-accessible, and open-source (to serve CDC, state and local public health agencies, epi-forecasting researchers, data journalists, the public)\n\n\n## What we provide\n\n![](gfx/web_of_parts.jpg)\n\n## Goals of Delphi Epidata platform and repository\n\n<div style=\"font-size: 0.9em;\">\n1. **Be the one-stop shop for aggregated epi-surveillance time-series (\"epi-signals\")**\n    + Hence: include also signals available elsewhere, especially if they don't keep data revisions - E.g. CDC's own NSSP, NWSS\n    + Be the national historical repository of record & preserve the raw data\n\n2. **Be the national clearinghouse for epi-signals, including those held elsewhere**\n    + The go-to place for signal discovery\n\n3. **Add value to existing signals and synthesize new ones**\n    + Added value: see next slide\n    + Synthesize new: via signal fusion, e.g. nowcasting\n\n4. **Be the focal point for community-wide efforts to open up privately held data**\n    + Better positioned than government or industry\n</div>\n\n## The bigger goal\nThe goal is to make epi-surveillance [more nimble, complete, standardized, robust, and real-time]{.primary}; and [less burdensome on the health system itself]{.primary}. Epidata is not the solution; but we hope it is a blueprint towards such a solution. \n\n# Epidata API\n\n## What is the Epidata repository\n\n[Epidata]{.primary} is a repository of aggregated epi-surveillance time series. To the full extent we can, we make everything [free and open-source]{.primary}.\n\n* To date, it has accumulated over 5 billion records (each record is the value of a signal, at a particular date, and a particular location).\n\n* At the peak of the pandemic, we were receiving millions of API queries per day.\n\n* Data comes from: public health reporting, medical insurance claims, medical device data, Google search queries, wastewater, app-based mobility patterns.\n\n* Many of our data streams simply aren't available anywhere else.\n\n* Added value we provide: revision tracking, anomaly detection, trend detection, smoothing, imputation, geo-temporal-demographic disaggregation\n\n## Features of Delphi Epidata\n\n<div style=\"font-size: 0.8em;\">\n* Built-in support for:\n    + Data revisions (\"backfill\").  Concepts of \"reporting date\" and \"as of\".\n    + Backfill projection and alerting to changes in backfill dynamics\n    + Geo levels w/ auto-aggregation: county, MSA, HRR, state, HHS region, nation\n        - Also esoteric ones: DMA, sewer sheds\n    + Demographic breakdown\n    + Representation for missingness and censoring\n    + Population sizes and fine-grained population density\n    \n* Pre-computed smoothing and normalization (customization planned)\n\n* Access control\n\n* Code is Open Source.  Signals are as accessible (w/ API, SDK) as allowed by DUAs\n\n</div>\n\n\n## Epidata API \n\n* [Delphi's Epidata API](https://cmu-delphi.github.io/delphi-epidata/) provides real-time access to epidemiological surveillance data. \n\n* The [main endpoint](https://cmu-delphi.github.io/delphi-epidata/api/covidcast.html) (covidcast) providing daily updates about current COVID-19 and influenza activity across the United States.\n\n* A [variety of other endpoints](https://cmu-delphi.github.io/delphi-epidata/api/README.html), providing primarily historical data about various diseases including COVID-19, influenza, dengue fever, and norovirus in several countries.\n\n* A [full-featured R client](https://cmu-delphi.github.io/delphi-epidata/api/client_libraries.html) is available for quick access to all data. \n\n* A [Legacy Python client](https://cmu-delphi.github.io/delphi-epidata/api/client_libraries.html#python) is available, full-featured Python client in development.\n\n## Some of our data sources\n* **Ongoing Sources**:\n    + Insurance claims: %Covid {inpatient, outpatient}, by {county x day}\n    + Google Symptom searches: 7 symptoms groups, by {county x day}\n    + Quidel/Ortho antigen tests: %Covid by age group, by {county x day}\n    + NCHS Deaths: all-cause, pneumonia, flu, Covid, by {state x week}\n    + NSSP ED visits: %Covid, %flu, %RSV, by {county x week}  (new!)\n    + NWSS Covid, by {sampling-site x day}  (in progress)\n\n## Some of our data sources\n* **Active during the pandemic, and could be restarted for the next PHE**:\n    + HHS Hosp/ICU beds: Covid, flu, by age-group, by {state x day}, {facility x week}\n    + CTIS (\"Delphi Facebook Survey\"): many dozens of questions, by (county x day)\n    + STLT-reported {cases, deaths} via {JHU, USAFacts}, by (country x day)\n    + Safegraph mobility: misc measures by {county x day},{county x week}\n\n\n\n## Some of our Pre-Pandemic Data Sources\n<div style=\"font-size: 0.8em;\">\n* FluView ILINet, by {state x week}\n\n* FluView Clinical (% positive flu, PH and clinical labs)\n\n* Google Health Trends (GHT), precursor to Google Symptoms\n\n* Google Flu Trends (GFT), precursor to to GHT\n\n* Twitter flu\n\n* Access counts for flu-related CDC pages, by {city x week}\n\n* Access counts for flu-related Wikipedia entries by {day x hour}\n\n* Flu-surv (flu hosp rates, now expanded to RESP-NET)\n\n* Misc signals for dengue, norovirus\n\n* Misc signals for PAHO countries, ECDC, KCDC, Taiwan,...\n\n* Delphi ILI nowcasts, by {state x week}, visualized in \"ILI Nearby\" website\n\n* Delphi ILI forecasts, by {state x week}\n</div>\n\n##\n\n![](gfx/severity_pyramid.jpg){height=75%}\n\n# Epidatr\n\n## Installing `epidatr`\nInstalling the package is straightforward:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Install the CRAN version\npak::pkg_install(\"epidatr\")\n# Install the development version from the GitHub dev branch\n# pak::pkg_install(\"cmu-delphi/epidatr@dev\")\n```\n:::\n\n\n\nThe CRAN listing is [here](https://cran.r-project.org/package=epidatr/index.html).\n\n::: {.callout-important icon=\"false\"}\n\n## Python\n\nIn Python, install [`delphi-epidata` from PyPI](https://pypi.org/project/delphi-epidata/) with `pip install delphi-epidata`.\n:::\n\n## Using `epidatr` and `epidatpy`\n<div style=\"font-size: 0.8em;\">\nThe following shows how to import the library and fetch Delphi's COVID-19 Surveillance Streams from Facebook Survey CLI for county 06001:\n</div> \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Configure API key interactively, if needed. See\n# https://cmu-delphi.github.io/epidatr/articles/epidatr.html#api-keys for details.\n#save_api_key()\nlibrary(epidatr)\nres <- pub_covidcast('fb-survey', 'smoothed_cli', 'county', 'day', geo_values = '06001',\n                     time_values = c(20200401, 20200405:20200414))\nhead(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 15\n  geo_value signal     source geo_type time_type time_value direction issue     \n  <chr>     <chr>      <chr>  <fct>    <fct>     <date>         <dbl> <date>    \n1 06001     smoothed_… fb-su… county   day       2020-04-06        NA 2020-09-03\n2 06001     smoothed_… fb-su… county   day       2020-04-07        NA 2020-09-03\n3 06001     smoothed_… fb-su… county   day       2020-04-08        NA 2020-09-03\n4 06001     smoothed_… fb-su… county   day       2020-04-09        NA 2020-09-03\n5 06001     smoothed_… fb-su… county   day       2020-04-10        NA 2020-09-03\n6 06001     smoothed_… fb-su… county   day       2020-04-11        NA 2020-09-03\n# ℹ 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>,\n#   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n## API keys\n<div style=\"font-size: 0.8em;\">\n* Anyone may access the Epidata API anonymously without providing any personal data. \n\n* Anonymous API access is subject to the following restrictions:\n  1. public datasets only\n  2. rate limited to 60 requests per hour\n  3. only two parameters may have multiple selections\n\n* An API key grants priviledged access to the Epidata API and can be obtained by [registering with us](https://api.delphi.cmu.edu/epidata/admin/registration_form). \n\n* Privileges of registration:\n  1. no rate limit\n  2. no limit on multiple selections\n</div>\n\n::: {.callout-tip}\n## Tip\nThe `epidatr` client automatically searches for the key in the `DELPHI_EPIDATA_KEY` environment variable. We recommend storing it in your `.Renviron` file, which R reads by default. More on setting your API key [here](https://rdrr.io/cran/epidatr/man/get_api_key.html).\n:::\n\n# Find data sources & signals\n\n## Finding data sources and signals of interest\n<div style=\"font-size: 0.8em;\">\n* Diverse Data Streams\n    +  **Variety of Data**: Access to medical claims data, cases and deaths, mobility data, and more.\n    +  **Geographic Coverage**: Includes multiple regions, making it comprehensive yet complex.\n    +  **Challenge**: Difficulty in pinpointing the specific data stream of interest.\n\n* Using the Documentation\n    +  **Comprehensive Listings**: Documentation details all available data sources and signals for both [COVID-19](https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html) and other [endpoints](https://cmu-delphi.github.io/delphi-epidata/api/README.html#source-specific-parameters).\n\n* Docs are great for a deep dive into the data, whereas the apps & tools are useful to see what is available...\n</div>\n\n## Cheatsheet of tools we provide\nWe provide...\n\n* A [signal discovery app](https://delphi.cmu.edu/signals/), to explore what epi-signals are available in Delphi Epidata and elsewhere in the community.\n\n* A [general signal visualization tool](https://delphi.cmu.edu/epivis/).\n\n* A [signal dashboard](https://delphi.cmu.edu/covidcast/) and a \"classic\" [map-based version](https://delphi.cmu.edu/covidcast/classic/) to visualize a core set of COVID-19 and flu indicators.\n\n* A [COVID-19 signal export app](https://delphi.cmu.edu/covidcast/export/), a [dashboard builder](https://delphi.cmu.edu/covidcast/dashboard/), and more!\n\n## Signal dashboard - For COVID-19 & flu data\n\n::: flex\n::: w-50\n\n* The [signal dashboard](https://delphi.cmu.edu/covidcast/) displays a selection of our signals for COVID-19 and the flu.\n\n* Includes an \"Advanced Data Export\" to pull a selected signal & download as a CSV. \n\n* Browse by location or indicator to choose which signal you are interested in & then export the data for further analysis.\n\n:::\n::: w-50\n\n![](gfx/covid_hosp_admissions.jpg)\n:::\n:::\n\n## Signal discovery app - Browse for more data\n* **Signal discovery app**: An easy way to find data sources and signals (no programming required).\n    +  Search tool that is a good to browse & find data.\n* [Let's try it out together!](https://delphi.cmu.edu/signals/)\n![](gfx/signal_discover_screenshot.jpg){height=auto, width = 50%} \n\n\n## Interactive tooling\n<div style=\"font-size: 0.8em;\">\nOther main way to find data sources and signals in R...\nFunctions to enhance data discovery in `epidatr`:\n\n* `avail_endpoints()` Function:\n    +  Lists all endpoints with brief descriptions.\n    + Highlights specific endpoints that cover non-US locations, facilitating targeted searches.\n    \n* **Output Format**: Returns a tibble for easy viewing and analysis of available data sources.\n</div>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\navail_endpoints() \n```\n:::\n\n\n\n##  Using the `covidcast_epidata()` function \n<div style=\"font-size: 0.8em;\">\n* In-Depth Data Exploration\n    + **Function Overview**: `covidcast_epidata()` provides detailed insights into data sources from the COVIDcast endpoint.\n    + **Source List**: Each data source is listed in `covid_sources$sources`, with associated tibbles describing included signals.\n    \n* Tab Completion for Ease of Use\n    + **Editor Support**: In RStudio or similar editors, use tab completion to explore:\n        - **Data Sources**: Type `covid_sources$source$` to view available data sources.\n        - **Signals**: Type `covid_sources$signals$` to see signal options with autocomplete assistance.\n        \n* **Filtering Convenience**: Signal names are prefixed with their respective data source for easier navigation.\n</div>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncovid_sources <- covidcast_epidata()\nhead(covid_sources$sources, n = 2) # head(list, n = 2) will print the first two elements of the list\n```\n:::\n\n\n\n## Fetching data - COVIDcast main endpoint \n<div style=\"font-size: 0.8em;\">\n* Fetching data from the Delphi Epidata API is simple. \n\n* The `pub_covidcast()` function lets us access the `covidcast` endpoint.\n\n* We need to specify the following six arguments...\n    1. `source`: Data source name\n    2. `signals`: Signal name\n    3. `geo_type`: Geographic level \n    4. `time_type`: Time resolution\n    5. `geo_values`: Location(s)\n    6. `time_values`: times of interest\n    \n* Let's give this a try!\n</div>\n\n## Fetching data - COVIDcast main endpoint \n\n<div style=\"font-size: 0.8em;\">\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(epidatr)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Obtain the most up-to-date version of the smoothed covid-like illness (CLI)\n# signal from the COVID-19 Trends and Impact survey for the US\nepidata <- pub_covidcast(\n  source = \"fb-survey\",\n  signals = \"smoothed_cli\",\n  geo_type = \"nation\",\n  time_type = \"day\",\n  geo_values = \"us\",\n  time_values = epirange(20210105, 20210410)\n)\nhead(epidata) %>% select(geo_value, signal, source, geo_type, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  geo_value signal      source geo_type time_value issue        lag value stderr\n  <chr>     <chr>       <chr>  <fct>    <date>     <date>     <dbl> <dbl>  <dbl>\n1 us        smoothed_c… fb-su… nation   2021-01-05 2021-01-10     5  1.18 0.0162\n2 us        smoothed_c… fb-su… nation   2021-01-06 2021-01-29    23  1.18 0.0163\n3 us        smoothed_c… fb-su… nation   2021-01-07 2021-01-29    22  1.20 0.0165\n4 us        smoothed_c… fb-su… nation   2021-01-08 2021-01-29    21  1.22 0.0167\n5 us        smoothed_c… fb-su… nation   2021-01-09 2021-01-29    20  1.22 0.0169\n6 us        smoothed_c… fb-su… nation   2021-01-10 2021-01-29    19  1.23 0.0171\n```\n\n\n:::\n:::\n\n\nHere `value` is the requested signal – in this case, the smoothed estimate of the percentage of people with COVID-like illness, based on the symptom surveys, and `stderr` is its standard error.\n</div>\n\n## Returned data - COVIDcast main endpoint \n<div style=\"font-size: 0.8em;\">\n* `pub_covidcast()` outputs a tibble, where each row represents one observation.\n\n* Each observation covers a set of events aggregated by time and by geographic region is a record in our database. Each such record includes:\n* `time_value`: time period when the events occurred.\n* `geo_value`: geographic region where the events occurred.\n* `value`: estimated value.\n* `stderr`: standard error of the estimate, usually referring to the sampling error.\n* `sample_size`: number of events used in the estimation.\n</div>\n<!--  For example, a number of COVID-19 antigen tests were performed in the state of New York on August 1. The `time_value`ould be August 1, with `geo_value` indicating the state of New York, while the remaining fields would give the estimated test positivity rate (the percentage of tests that were positive for COVID-19), its standard error, and the number of tests used to calculate the estimate. -->\n\n## Returned data - COVIDcast main endpoint \nCrucially—and unlike most other sources of COVID-19 data—our API reports two additional fields with each record:\n\n* `issue`: The time period when this observation was published.\n\n* `lag`: The time delay between when the events occurred and when this observation was published.\n\n* Meaning that unlike most other sources of COVID data, it tracks the complete revision history of every signal.\n\n* This allows for historical reconstructions of what information was available at specific times. **More on this soon!**\n\n\n## Geographic levels\n<div style=\"font-size: 0.8em;\">\n* The Epidata API makes signals available at different geographic levels, depending on the endpoint\n* For the `smoothed_cli` signal, we can obtain values for each state\n\n* Simply change `geo_type` and `geo_values` in the previous example to get...\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Obtain the most up-to-date version of the smoothed covid-like illness (CLI)\n# signal from the COVID-19 Trends and Impact survey for all states\nstate_epidata <- pub_covidcast(\n  source = \"fb-survey\",\n  signals = \"smoothed_cli\",\n  geo_type = \"state\",\n  time_type = \"day\",\n  geo_values = \"*\",\n  time_values = epirange(20210105, 20210410)\n)\nhead(state_epidata) %>% select(geo_value, signal, source, geo_type, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  geo_value signal      source geo_type time_value issue        lag value stderr\n  <chr>     <chr>       <chr>  <fct>    <date>     <date>     <dbl> <dbl>  <dbl>\n1 ak        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 0.747 0.250 \n2 al        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 2.36  0.187 \n3 ar        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 1.93  0.200 \n4 az        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 1.56  0.129 \n5 ca        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 1.24  0.0542\n6 co        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 0.934 0.107 \n```\n\n\n:::\n:::\n\n\n</div>\n\n## COVIDcast main endpoint - Example query \n<div style=\"font-size: 0.75em;\">\nCounty `geo_values` are [FIPS codes](https://en.wikipedia.org/wiki/List_of_United_States_FIPS_codes_by_county) and are discussed in the API docs [here](https://cmu-delphi.github.io/delphi-epidata/api/covidcast_geography.html). The example below is for Orange County, California. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfb_county_data <- pub_covidcast(\n  source = \"fb-survey\",\n  signals = \"smoothed_accept_covid_vaccine\",\n  geo_type = \"county\",\n  time_type = \"day\",\n  time_values = epirange(20201221, 20201225),\n  geo_values = \"06059\"\n)\nhead(fb_county_data) %>% select(geo_value, signal, source, geo_type, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 9\n  geo_value signal      source geo_type time_value issue        lag value stderr\n  <chr>     <chr>       <chr>  <fct>    <date>     <date>     <dbl> <dbl>  <dbl>\n1 06059     smoothed_a… fb-su… county   2020-12-21 2020-12-22     1  80.9   2.08\n2 06059     smoothed_a… fb-su… county   2020-12-22 2020-12-23     1  78.9   1.76\n3 06059     smoothed_a… fb-su… county   2020-12-23 2020-12-24     1  80.0   1.50\n4 06059     smoothed_a… fb-su… county   2020-12-24 2020-12-25     1  79.3   1.35\n5 06059     smoothed_a… fb-su… county   2020-12-25 2020-12-26     1  80.3   1.21\n```\n\n\n:::\n:::\n\n\n</div>\n::: {.callout-important icon=\"false\"}\n\n## Note\n\nThe `covidcast` endpoint supports `*` in its time and geo fields. Try to obtain the signal values for all available counties by replacing `geo_values = \"06059\"` with\n`geo_values = \"*\"`.\n:::\n\n## Example queries - Other endpoints <br> Hospitalizations\n\n1. **COVID-19 Hospitalization: Facility Lookup**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility_lookup.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_facility_lookup(city = \"southlake\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 10\n  hospital_pk state ccn    hospital_name    address city  zip   hospital_subtype\n  <chr>       <chr> <chr>  <chr>            <chr>   <chr> <chr> <chr>           \n1 450888      TX    450888 TEXAS HEALTH HA… 1545 E… SOUT… 76092 Short Term      \n2 670132      TX    670132 METHODIST SOUTH… 421 E … SOUT… 76092 Short Term      \n# ℹ 2 more variables: fips_code <chr>, is_metro_micro <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# pub_covid_hosp_facility_lookup(state = \"WY\")\n# A non-example (there is no city called New York in Wyoming)\n# pub_covid_hosp_facility_lookup(state = \"WY\", city = \"New York\")\n```\n:::\n\n\n\n\n## Example queries - Other endpoints <br> Hospitalizations\n\n2. **COVID-19 Hospitalization by Facility**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_facility(\n  hospital_pks = \"100075\",\n  collection_weeks = epirange(20200101, 20200501)\n)\n```\n:::\n\n\n\n3. **COVID-19 Hospitalization by State**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_state_timeseries(states = \"MA\", dates = \"20200510\")\n```\n:::\n\n\n\n## Example queries - Other endpoints <br> Flu endpoints\n\n1. **FluSurv hospitalization data**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/flusurv.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_flusurv(locations = \"ca\", epiweeks = 202001)\n```\n:::\n\n\n\n2. **Fluview data**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/fluview.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_fluview(regions = \"nat\", epiweeks = epirange(201201, 202001))\n```\n:::\n\n\n\n3. **NIDSS Flu**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/nidss_flu.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_nidss_flu(regions = \"taipei\", epiweeks = epirange(200901, 201301))\n```\n:::\n\n\n\n## Example queries - Other endpoints <br> Dengue endpoints\n\n1. **Delphi’s Dengue Nowcast**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/dengue_nowcast.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_dengue_nowcast(locations = \"pr\", epiweeks = epirange(201401, 202301))\n```\n:::\n\n\n\n2. **NIDSS dengue**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/nidss_dengue.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_nidss_dengue(locations = \"taipei\", epiweeks = epirange(200301, 201301))\n```\n:::\n\n\n\n3. **PAHO Dengue**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/paho_dengue.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_paho_dengue(regions = \"ca\", epiweeks = epirange(200201, 202319))\n```\n:::\n\n\n\n## Example queries - Other endpoints <br> Wikipedia\n\n**Wikipedia access**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/wiki.html>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_wiki(\n  language = \"en\",\n  articles = \"influenza\",\n  time_type = \"week\",\n  time_values = epirange(202001, 202319)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 64 × 6\n   article   count     total  hour epiweek     value\n   <chr>     <dbl>     <dbl> <dbl> <date>      <dbl>\n 1 influenza  6516 663604044    -1 2019-12-29   9.82\n 2 influenza 10244 789885521    -1 2020-01-05  13.0 \n 3 influenza 10728 783760384    -1 2020-01-12  13.7 \n 4 influenza 24843 785222292    -1 2020-01-19  31.6 \n 5 influenza 62850 780291898    -1 2020-01-26  80.5 \n 6 influenza 41768 778222703    -1 2020-02-02  53.7 \n 7 influenza 29434 767244708    -1 2020-02-09  38.4 \n 8 influenza 22714 764074572    -1 2020-02-16  29.7 \n 9 influenza 88758 767718009    -1 2020-02-23 116.  \n10 influenza 62433 759825311    -1 2020-03-01  82.2 \n# ℹ 54 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\n## Tip - public vs private methods\n\nAside from these public methods we've gone through (these start with `pub_`),\nthere are private methods (these start with `pvt_` when you type `avail_endpoints()`).\nThese require private access keys to use (separate from the Delphi Epidata API key). \nTo run these locally, you will need to store these secrets in your `.Reviron` file, or set them as environmental variables.\nSee [Private methods](https://cmu-delphi.github.io/epidatr/articles/signal-discovery.html) for examples of using private endpoints.\n:::\n\n## Signal metadata\n\n* Some endpoints provide additional metadata for signals.\n    + **Time Information**: Details on available time frames and last update times.\n    + **Geography Information**: Details on available geography types. \n\n* Key Endpoints for Metadata\n    + `pub_covidcast_meta()`: Access metadata for the COVIDcast endpoint.\n    + `pub_fluview_meta()`: Get metadata for the FluView endpoint.\n    + `pub_meta()`: General metadata for the Delphi Epidata API.\n\n# Panel data\n\n## Panel data\n<div style=\"font-size: 0.91em;\">\n* [Panel data](https://en.wikipedia.org/wiki/Panel_data) or longitudinal data, contain cross-sectional measurements of subjects over time.\n\n* In table form, panel data is a time index + one or more locations/keys.\n\n* For example: The estimated percentage of outpatient doctor visits that are COVID-related in MA over 2021 ([docs](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html)):\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `epi_df` object, 6 x 3 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2021-12-17\n\n# A tibble: 6 × 3\n  geo_value time_value percent_cli\n* <chr>     <date>           <dbl>\n1 ma        2021-03-01        3.31\n2 ma        2021-03-02        2.87\n3 ma        2021-03-03        2.95\n4 ma        2021-03-04        3.17\n5 ma        2021-03-05        3.35\n6 ma        2021-03-06        3.38\n```\n\n\n:::\n:::\n\n\n</div>\n\n## Examples of panel data - COVID-19 cases\n\n**JHU CSSE COVID cases in the U.S.** (smoothed with a 7-day trailing average) over the year of the pandemic (April 15, 2020 – April 15, 2021).\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-jhu-csse-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Examples of panel data - CHNG-CLI\n\n**Change Healthcare COVID-like illness (CHNG-CLI)** reports the percentage of outpatient visits for COVID-related symptoms, based on deidentified Change Healthcare claims data.\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/chng.html>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-chng-cli-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Examples of panel data - CHNG-COVID\n\n**Change Healthcare COVID (CHNG-COVID)** reports the percentage of outpatient visits with confirmed COVID-19, based on Change Healthcare claims data.\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/paho_dengue.html>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-chng-covid-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Examples of panel data - CTIS-CLI\n\n**COVID-19 Trends and Impact Survey CLI (CTIS-CLI)** estimates the percentage of the population with COVID-like illness based on Delphi's Facebook user surveys.\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/fb-survey.html>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/examples-ctis-cli-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + visualizing panel data\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/multiple-signals-unscale-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + **scaling** + visualizing panel data\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/scaled-signals-1.svg){fig-align='center'}\n:::\n:::\n\n\n\nThe auxiliary signals track changes in officially reported cases quite well. This is more clear when they have all been placed on the same range as reported cases per 100,000 people.\n \n## COVID-19 cases and deaths in CA example\n* **Takeaway**: Cases appear to strongly correlate with deaths several weeks later.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/plot-ca-cases-deaths-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n# Versioned data\n\n## Intro to versioned data\n* In panel data, we've seen that time is indicated by `time_value`.\n\n* Now, we add a second time index to indicate the data version...\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <geo_value, time_value, version>\n   geo_value time_value    version percent_cli\n      <char>     <Date>     <Date>       <num>\n1:        ma 2021-03-01 2021-03-04    6.470187\n2:        ma 2021-03-01 2021-03-05    6.207676\n3:        ma 2021-03-01 2021-03-06    5.664716\n4:        ma 2021-03-01 2021-03-07    5.636590\n5:        ma 2021-03-01 2021-03-08    5.665734\n6:        ma 2021-03-01 2021-03-09    5.537332\n```\n\n\n:::\n:::\n\n\n\n* Note that this feature can be indicated in different ways (ex. `version`, `issue`, `release`, `as_of`). \n\n## Versioned panel data\nEstimated percentage of outpatient (DV-CLI) data across multiple issue dates, with updates and revisions to past data as new issue dates are released:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/versioned-panel-ex-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Latency and revision in signals\n\n* **Latency** refers to the delay between data collection and availability.\n\nExample: A signal based on medical insurance claims may take several days to appear but is subject to delays as claims are processed over weeks.\n\n* **Revision** occurs when data is updated or corrected after initial publication, often due to new information or late reporting.\n\nExample: COVID-19 case reports are revised frequently after initial publication as new data comes in or reporting backlogs are cleared.\n\n## Latency and revision in signals - Example\n<div style=\"font-size: 0.9em;\">\n* Recall the first example of panel & versioned data we've seen.\n\n<!-- on the % of COVID-related outpatient visits in MA during 2021. -->\n\n* This signal is 3 days latent (`version` - `time_value`) & clearly undergoes revision over time (ex. consider March 1's `percent_cli` across `version`).\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <geo_value, time_value, version>\n   geo_value time_value    version percent_cli\n      <char>     <Date>     <Date>       <num>\n1:        ma 2021-03-01 2021-03-04    6.470187\n2:        ma 2021-03-01 2021-03-05    6.207676\n3:        ma 2021-03-01 2021-03-06    5.664716\n4:        ma 2021-03-01 2021-03-07    5.636590\n5:        ma 2021-03-01 2021-03-08    5.665734\n6:        ma 2021-03-01 2021-03-09    5.537332\n```\n\n\n:::\n:::\n\n\n\n* The amount of lag in reporting can vary, and not all visits are reported with the same lag.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n     min median     mean     max\n  3 days 3 days 3.6 days 16 days\n```\n\n\n:::\n:::\n\n\n</div>\n\n<!-- min_lag: the minimum time to any value  -->\n\n## Revisions\nMany data sources are subject to revisions:\n\n* Case and death counts are frequently corrected or adjusted by authorities.\n\n* Medical claims data can take weeks to be submitted and processed.\n\n<!--* In the previous slide's example because doctor's visits may be reported to the health system partners several days after they occur, these signals are typically available with several days of lag. This means that estimates for a specific day are only available several days later. -->\n\n* Lab tests and medical records can be backlogged for a variety of reasons.\n\n* Surveys are not always completed promptly.\n\n* **Key**: An accurate revision log is crucial for researchers building forecasts of COVID-19 cases or outcomes. \n**A forecast that is made today can should rely on information we have access to today.**\n\n## Types of revisions\n1. **Sources that don't revise** - Ex. Facebook or Google symptoms (provisional and final are the same)\n\n1. **Predictable revisions** - Ex. Claims data (CHNG) and public health reports aligned by observation/test, hosp, or death date\n\n1. **Revisions that are large and erratic to predict** - Ex. COVID cases and deaths \n\n## Types of revisions - Comparison between 2. and 3.\n<div style=\"font-size: 0.8em;\">\n* Revision behavior for two indicators in the HRR containing Charlotte, NC.\n\n<!-- Each colored line corresponds to the data as reported on a particular date (as of dates varying from 28 September through 19 October). -->\n* **DV-CLI signal (left) ** was regularly revised throughout the period, although effects fade farther back.\n\n* **JHU CSSE cases (right) ** remain \"as reported\" on Sept. 28, with a spike toward the end of this period, until a major correction is made on Oct. 19, which brings this down & affects prior data.\n</div>\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/figure-1-revisions-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Key takeaways\n\n* **Medical claims revisions:** More systematic and predictable.\n* **COVID-19 case report revisions:** Erratic and often unpredictable.\n* Large spikes or anomalies can occur as:\n    + **Reporting backlogs** are cleared.\n    + **Changes in case definitions** are implemented.\n\n## Reporting backlogs - Example\n\n* **Left**: Reported cases per day in Bexar County, Texas, during the summer of 2020. On July 16, 4,810 **backlogged cases** were reported, reflecting a 2-week delay. This caused a prolonged spike due to the 7-day trailing average applied to the counts.\n\n* **Right**: CTIS estimates of CLI-in-community showed more stable underlying trends.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day1-morning_files/figure-revealjs/figure-4-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## Reporting backlogs - Key takeaways\n\n* **Reporting issues been common across U.S. jurisdictions.**\n\n* For example, audits have regularly discovered **misclassified or unreported cases and deaths**.\n\n* This underscores the value of **cross-checking data with external sources** not part of the same reporting systems.\n\n# Versioning in `epidatr`\n\n## Versioned data in `epidatr`\n<div style=\"font-size: 0.8em;\">\n* Epidata API contains comprehensive data record, capturing each signal's estimate, location, date, and update timeline.\n    \n* **Example**: [Doctor Visits Signal](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html) (from the `covidcast` endpoint)\n    + Estimates the percentage of outpatient doctor visits that are COVID-related.\nTo give a specific example, let's consider the estimate for PA on May 1, 2020:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  as_of = \"2020-05-07\"\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  geo_value signal           source        time_value issue        lag value\n  <chr>     <chr>            <chr>         <date>     <date>     <dbl> <dbl>\n1 pa        smoothed_adj_cli doctor-visits 2020-05-01 2020-05-07     6  2.58\n```\n\n\n:::\n:::\n\n\n\n* Initial estimate was *issued* on May 7, 2020 (due to delay from aggregation and ingestion by the API).\n\n</div>\n\n## Understanding data \"as of\" a specific date\n<div style=\"font-size: 0.7em;\">\n* Requesting Specific Data Versions:\n    + Use `as_of`, `issues`, or `lag` arguments to specify data availability.\n    + Only one argument can be used at a time; not all endpoints support all three.\n    \n* We've already used the `as_of` argument, so let's try `lag` \n    + Example for May 7, 2020 (we should get the same output as before):\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  lag = 6\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-07     6  2.58     NA\n```\n\n\n:::\n:::\n\n\n**Result**: Estimate of <3% issued on May 7, 2020.\n</div>\n\n## Understanding data \"as of\" a specific date\n<div style=\"font-size: 0.7em;\">\n**Default behaviour:** If we don't specify `as_of`, we get the most recent estimate:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\"\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-07-04    64  5.97     NA\n```\n\n\n:::\n:::\n\n\n\n* Substantial Estimate Change:\n    + Estimate increased from <3% to almost 6% after May 7, reflecting new data on visits from May 1.\n    \n* Critical for Forecasting:\n    + Accurate backtesting requires using data available at the time of model fitting, not later updates, to ensure valid forecasting results.\n</div>\n\n## Multiple issues of observations\nBy using the `issues` argument, we can request all issues in a certain time period:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"2020-05-01\", \"2020-05-15\")\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-14    13  3.66     NA\n```\n\n\n:::\n:::\n\n\n\n## Observations issued with a specific lag\n<div style=\"font-size: 0.8em;\">\n* We can use the `lag` argument to request only data reported with a certain lag. \n\n* **Example**: Request  a lag of 7 days fetches only data issued exactly 7 days after the corresponding `time_value`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  lag = 7\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-08     7  3.28     NA\n2 pa        smoothed_adj_cli doctor-vi… 2020-05-02 2020-05-09     7  3.23     NA\n3 pa        smoothed_adj_cli doctor-vi… 2020-05-05 2020-05-12     7  2.78     NA\n4 pa        smoothed_adj_cli doctor-vi… 2020-05-06 2020-05-13     7  2.56     NA\n5 pa        smoothed_adj_cli doctor-vi… 2020-05-07 2020-05-14     7  2.19     NA\n```\n\n\n:::\n:::\n\n\n</div>\n\n## Query results exclusion\n<div style=\"font-size: 0.8em;\">\n* Although the query we ran on the previous slide requested values from May 1 to May 7, May 3 and May 4 were not included due to a 7-day lag.\n\n* Results for those dates appear only if updates are issued on the corresponding lag day (e.g., May 10).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-03\", \"2020-05-03\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"2020-05-09\", \"2020-05-15\")\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-09     6  2.79     NA\n2 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-12     9  3.02     NA\n3 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-13    10  3.04     NA\n4 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-14    11  3.02     NA\n5 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-15    12  3.05     NA\n```\n\n\n:::\n:::\n\n\n</div>\n\n## Main takeaways\n<div style=\"font-size: 0.8em;\">\n* **Delphi Epidata:** A one-stop platform for real-time epidemic data, providing aggregated signals for disease tracking and forecasting from diverse sources like health records, mobility patterns, and more.\n    \n* **Epidata API:** Open-access API delivering up-to-date, granular epidemiological data + makes all historical versions available.\n\n* **Epidatr:** Enables you to access Delphi's epidemiological data through R and Python, offering easy installation, powerful API functions, and interactive tools for discovering and analyzing health signals.\n\n* **Versioned Data and Latency:** Panel data captures time-series trends, which are often subject to revision.  A standout feature of this API is its inclusion of two critical fields...\n\n    1. `issue`: When the data was published\n    \n    2. `lag`: The delay between the event and when it was published\n    \n    to manage latency and revisions for transparency and more accurate analysis.\n\n</div>\n\n## Final slide {.smaller}\n\n\n### Thanks:\n\n\n\n\n\n\n\n- The whole [CMU Delphi Team](https://delphi.cmu.edu/about/team/) (across many institutions)\n- Optum/UnitedHealthcare, Change Healthcare.\n- Google, Facebook, Amazon Web Services.\n- Quidel, SafeGraph, Qualtrics.\n- Centers for Disease Control and Prevention.\n- Council of State and Territorial Epidemiologists\n\n\n::: {layout-row=1 fig-align=\"center\"}\n![](gfx/delphi.jpg){height=\"100px\"}\n![](gfx/berkeley.jpg){height=\"100px\"}\n![](gfx/cmu.jpg){height=\"100px\"}\n![](gfx/ubc.jpg){width=\"250px\"}\n![](gfx/stanford.jpg){width=\"250px\"}\n:::\n\n\n",
    "supporting": [
      "day1-morning_files"
=======
  "hash": "45dd2ea4c070b07dbba3de83a46fb46c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntalk-title: \"Signal Discovery & Data Fetching\"\ntalk-short-title: \"Day 1 Morning\"\ntalk-subtitle: \"\"\nauthor: \"\"\nother-authors: \"\"\nrepo-address: \"cmu-delphi/insightnet-workshop-2024\"\ntalk-date: \"\"\nformat: revealjs\n---\n\n\n\n\n<!-- Set any of the above to \"\" to omit them -->\n\n<!-- Or adjust the formatting in _titleslide.qmd -->\n\n\n\n---\n---\n\n\n\n\\DeclareMathOperator*{\\minimize}{minimize}\n\n\n\n\n\n\n\n\n\n\n\n::: flex\n::: w-20\n\n:::\n::: w-80\n## {{< meta talk-title >}} {background-image=\"gfx/cover-art-1.svg\" background-position=\"bottom\"}\n\n### {{< meta talk-subtitle >}}\n\n<br>\n\n#### {{< meta author >}} \n\n\n{{< meta other-authors >}}\n\n\n{{< meta talk-date >}}\n\n\n\n\n:::\n:::\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n## Outline\n\n1. About Delphi \n\n1. Goals of Delphi Epidata platform\n\n1. Epidata API\n\n1. Finding data sources and signals\n\n1. Versioned data\n\n\n# Delphi\n\n## About Delphi\n\n* Founded in 2012 at Carnegie Mellon University, now expanded to UC Berkeley, and University of British Columbia.\n\n* Currently 5 faculty, ~10 PhD students, ~15 staff (mostly software engineers).\n\n* Easy to join us from anywhere (lots of volunteers during Covid-19 pandemic).\n\n* We are:\n    + CDC Center of Excellence for Influenza and Covid-19 Forecasting (2019-24).\n    + CDC Innovation Center for Outbreak Analytics and Disease Modeling (2024-29).\n\n**Our mission:** To develop the theory and practice of [epidemic detection, tracking and forecasting]{.primary}, and their use in decision making, both public and private.\n\n## What does Delphi do?\n\n* Procure [real-time, aggregated data streams]{.primary} informative of infectious diseases and syndromes, in collaboration with partners in industry and government.\n\n* Extract signals and make them widely available via the [Epidata platform & API]{.primary}.\n\n* Develop and deploy algorithms for [epidemic detection, tracking, forecasting]{.primary}.\n\n* Develop and maintain statistical software packages for these tasks.\n\n* Make it all production-grade, maximally-accessible, and open-source (to serve CDC, state and local public health agencies, epi-forecasting researchers, data journalists, the public)\n\n\n## What we provide\n\n![](gfx/web_of_parts.jpg)\n\n## Goals of Delphi Epidata platform and repository\n\n<div style=\"font-size: 0.9em;\">\n1. **Be the one-stop shop for aggregated epi-surveillance time-series (\"epi-signals\")**\n    + Hence: include also signals available elsewhere, especially if they don't keep data revisions - E.g. CDC's own NSSP, NWSS\n    + Be the national historical repository of record & preserve the raw data\n\n2. **Be the national clearinghouse for epi-signals, including those held elsewhere**\n    + The go-to place for signal discovery\n\n3. **Add value to existing signals and synthesize new ones**\n    + Added value: see next slide\n    + Synthesize new: via signal fusion, e.g. nowcasting\n\n4. **Be the focal point for community-wide efforts to open up privately held data**\n    + Better positioned than government or industry\n</div>\n\n## The bigger goal\nThe goal is to make epi-surveillance [more nimble, complete, standardized, robust, and real-time]{.primary}; and [less burdensome on the health system itself]{.primary}. Epidata is not the solution; but we hope it is a blueprint towards such a solution. \n\n# Epidata API\n\n## What is the Epidata repository\n\n[Epidata]{.primary} is a repository of aggregated epi-surveillance time series. To the full extent we can, we make everything [free and open-source]{.primary}.\n\n* To date, it has accumulated over 5 billion records (each record is the value of a signal, at a particular date, and a particular location).\n\n* At the peak of the pandemic, we were receiving millions of API queries per day.\n\n* Data comes from: public health reporting, medical insurance claims, medical device data, Google search queries, wastewater, app-based mobility patterns.\n\n* Many of our data streams simply aren't available anywhere else.\n\n* Added value we provide: revision tracking, anomaly detection, trend detection, smoothing, imputation, geo-temporal-demographic disaggregation\n\n## Features of Delphi Epidata\n\n<div style=\"font-size: 0.8em;\">\n* Built-in support for:\n    + Data revisions (\"backfill\").  Concepts of \"reporting date\" and \"as of\".\n    + Backfill projection and alerting to changes in backfill dynamics\n    + Geo levels w/ auto-aggregation: county, MSA, HRR, state, HHS region, nation\n        - Also esoteric ones: DMA, sewer sheds\n    + Demographic breakdown\n    + Representation for missingness and censoring\n    + Population sizes and fine-grained population density\n    \n* Pre-computed smoothing and normalization (customization planned)\n\n* Access control\n\n* Code is Open Source.  Signals are as accessible (w/ API, SDK) as allowed by DUAs\n\n</div>\n\n\n## Epidata API \n\n* [Delphi's Epidata API](https://cmu-delphi.github.io/delphi-epidata/) provides real-time access to epidemiological surveillance data. \n\n* The [main endpoint](https://cmu-delphi.github.io/delphi-epidata/api/covidcast.html) (covidcast) providing daily updates about current COVID-19 and influenza activity across the United States.\n\n* A [variety of other endpoints](https://cmu-delphi.github.io/delphi-epidata/api/README.html), providing primarily historical data about various diseases including COVID-19, influenza, dengue fever, and norovirus in several countries.\n\n* A [full-featured R client](https://cmu-delphi.github.io/delphi-epidata/api/client_libraries.html) is available for quick access to all data. \n\n* A [Legacy Python client](https://cmu-delphi.github.io/delphi-epidata/api/client_libraries.html#python) is available, full-featured Python client in development.\n\n## Some of our data sources\n* **Ongoing Sources**:\n    + Insurance claims: %Covid {inpatient, outpatient}, by {county x day}\n    + Google Symptom searches: 7 symptoms groups, by {county x day}\n    + Quidel/Ortho antigen tests: %Covid by age group, by {county x day}\n    + NCHS Deaths: all-cause, pneumonia, flu, Covid, by {state x week}\n    + NSSP ED visits: %Covid, %flu, %RSV, by {county x week}  (new!)\n    + NWSS Covid, by {sampling-site x day}  (in progress)\n\n## Some of our data sources\n* **Active during the pandemic, and could be restarted for the next PHE**:\n    + HHS Hosp/ICU beds: Covid, flu, by age-group, by {state x day}, {facility x week}\n    + CTIS (\"Delphi Facebook Survey\"): many dozens of questions, by (county x day)\n    + STLT-reported {cases, deaths} via {JHU, USAFacts}, by (country x day)\n    + Safegraph mobility: misc measures by {county x day},{county x week}\n\n\n\n## Some of our Pre-Pandemic Data Sources\n<div style=\"font-size: 0.8em;\">\n* FluView ILINet, by {state x week}\n\n* FluView Clinical (% positive flu, PH and clinical labs)\n\n* Google Health Trends (GHT), precursor to Google Symptoms\n\n* Google Flu Trends (GFT), precursor to to GHT\n\n* Twitter flu\n\n* Access counts for flu-related CDC pages, by {city x week}\n\n* Access counts for flu-related Wikipedia entries by {day x hour}\n\n* Flu-surv (flu hosp rates, now expanded to RESP-NET)\n\n* Misc signals for dengue, norovirus\n\n* Misc signals for PAHO countries, ECDC, KCDC, Taiwan,...\n\n* Delphi ILI nowcasts, by {state x week}, visualized in \"ILI Nearby\" website\n\n* Delphi ILI forecasts, by {state x week}\n</div>\n\n##\n\n![](gfx/severity_pyramid.jpg){height=75%}\n\n# Epidatr\n\n## Installing `epidatr`\nInstalling the package is straightforward:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Install the CRAN version\npak::pkg_install(\"epidatr\")\n# Install the development version from the GitHub dev branch\n# pak::pkg_install(\"cmu-delphi/epidatr@dev\")\n```\n:::\n\n\n\n\nThe CRAN listing is [here](https://cran.r-project.org/package=epidatr/index.html).\n\n::: {.callout-important icon=\"false\"}\n\n## Python\n\nIn Python, install [`delphi-epidata` from PyPI](https://pypi.org/project/delphi-epidata/) with `pip install delphi-epidata`.\n:::\n\n## Using `epidatr` and `epidatpy`\n<div style=\"font-size: 0.8em;\">\nThe following shows how to import the library and fetch Delphi's COVID-19 Surveillance Streams from Facebook Survey CLI for county 06001:\n</div> \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Configure API key interactively, if needed. See\n# https://cmu-delphi.github.io/epidatr/articles/epidatr.html#api-keys for details.\n#save_api_key()\nlibrary(epidatr)\nres <- pub_covidcast('fb-survey', 'smoothed_cli', 'county', 'day', geo_values = '06001',\n                     time_values = c(20200401, 20200405:20200414))\nhead(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 15\n  geo_value signal     source geo_type time_type time_value direction issue     \n  <chr>     <chr>      <chr>  <fct>    <fct>     <date>         <dbl> <date>    \n1 06001     smoothed_… fb-su… county   day       2020-04-06        NA 2020-09-03\n2 06001     smoothed_… fb-su… county   day       2020-04-07        NA 2020-09-03\n3 06001     smoothed_… fb-su… county   day       2020-04-08        NA 2020-09-03\n4 06001     smoothed_… fb-su… county   day       2020-04-09        NA 2020-09-03\n5 06001     smoothed_… fb-su… county   day       2020-04-10        NA 2020-09-03\n6 06001     smoothed_… fb-su… county   day       2020-04-11        NA 2020-09-03\n# ℹ 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>,\n#   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## API keys\n<div style=\"font-size: 0.8em;\">\n* Anyone may access the Epidata API anonymously without providing any personal data. \n\n* Anonymous API access is subject to the following restrictions:\n  1. public datasets only\n  2. rate limited to 60 requests per hour\n  3. only two parameters may have multiple selections\n\n* An API key grants priviledged access to the Epidata API and can be obtained by [registering with us](https://api.delphi.cmu.edu/epidata/admin/registration_form). \n\n* Privileges of registration:\n  1. no rate limit\n  2. no limit on multiple selections\n</div>\n\n::: {.callout-tip}\n## Tip\nThe `epidatr` client automatically searches for the key in the `DELPHI_EPIDATA_KEY` environment variable. We recommend storing it in your `.Renviron` file, which R reads by default. More on setting your API key [here](https://rdrr.io/cran/epidatr/man/get_api_key.html).\n:::\n\n# Find data sources & signals\n\n## Finding data sources and signals of interest\n<div style=\"font-size: 0.8em;\">\n* Diverse Data Streams\n    +  **Variety of Data**: Access to medical claims data, cases and deaths, mobility data, and more.\n    +  **Geographic Coverage**: Includes multiple regions, making it comprehensive yet complex.\n    +  **Challenge**: Difficulty in pinpointing the specific data stream of interest.\n\n* Using the Documentation\n    +  **Comprehensive Listings**: Documentation details all available data sources and signals for both [COVID-19](https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html) and other [endpoints](https://cmu-delphi.github.io/delphi-epidata/api/README.html#source-specific-parameters).\n\n* Docs are great for a deep dive into the data, whereas the apps & tools are useful to see what is available...\n</div>\n\n## Cheatsheet of tools we provide\nWe provide...\n\n* A [signal discovery app](https://delphi.cmu.edu/signals/), to explore what epi-signals are available in Delphi Epidata and elsewhere in the community.\n\n* A [general signal visualization tool](https://delphi.cmu.edu/epivis/).\n\n* A [signal dashboard](https://delphi.cmu.edu/covidcast/) and a \"classic\" [map-based version](https://delphi.cmu.edu/covidcast/classic/) to visualize a core set of COVID-19 and flu indicators.\n\n* A [COVID-19 signal export app](https://delphi.cmu.edu/covidcast/export/), a [dashboard builder](https://delphi.cmu.edu/covidcast/dashboard/), and more!\n\n## Signal dashboard - For COVID-19 & flu data\n\n::: flex\n::: w-50\n\n* The [signal dashboard](https://delphi.cmu.edu/covidcast/) displays a selection of our signals for COVID-19 and the flu.\n\n* Includes an \"Advanced Data Export\" to pull a selected signal & download as a CSV. \n\n* Browse by location or indicator to choose which signal you are interested in & then export the data for further analysis.\n\n:::\n::: w-50\n\n![](gfx/covid_hosp_admissions.jpg)\n:::\n:::\n\n## Signal discovery app - Browse for more data\n* **Signal discovery app**: An easy way to find data sources and signals (no programming required).\n    +  Search tool that is a good to browse & find data.\n* [Let's try it out together!](https://delphi.cmu.edu/signals/)\n![](gfx/signal_discover_screenshot.jpg){height=auto, width = 50%} \n\n\n## Interactive tooling\n<div style=\"font-size: 0.8em;\">\nOther main way to find data sources and signals in R...\nFunctions to enhance data discovery in `epidatr`:\n\n* `avail_endpoints()` Function:\n    +  Lists all endpoints with brief descriptions.\n    + Highlights specific endpoints that cover non-US locations, facilitating targeted searches.\n    \n* **Output Format**: Returns a tibble for easy viewing and analysis of available data sources.\n</div>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\navail_endpoints() \n```\n:::\n\n\n\n\n##  Using the `covidcast_epidata()` function \n<div style=\"font-size: 0.8em;\">\n* In-Depth Data Exploration\n    + **Function Overview**: `covidcast_epidata()` provides detailed insights into data sources from the COVIDcast endpoint.\n    + **Source List**: Each data source is listed in `covid_sources$sources`, with associated tibbles describing included signals.\n    \n* Tab Completion for Ease of Use\n    + **Editor Support**: In RStudio or similar editors, use tab completion to explore:\n        - **Data Sources**: Type `covid_sources$source$` to view available data sources.\n        - **Signals**: Type `covid_sources$signals$` to see signal options with autocomplete assistance.\n        \n* **Filtering Convenience**: Signal names are prefixed with their respective data source for easier navigation.\n</div>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncovid_sources <- covidcast_epidata()\nhead(covid_sources$sources, n = 2) # head(list, n = 2) will print the first two elements of the list\n```\n:::\n\n\n\n\n## Fetching data - COVIDcast main endpoint \n<div style=\"font-size: 0.8em;\">\n* Fetching data from the Delphi Epidata API is simple. \n\n* The `pub_covidcast()` function lets us access the `covidcast` endpoint.\n\n* We need to specify the following six arguments...\n    1. `source`: Data source name\n    2. `signals`: Signal name\n    3. `geo_type`: Geographic level \n    4. `time_type`: Time resolution\n    5. `geo_values`: Location(s)\n    6. `time_values`: times of interest\n    \n* Let's give this a try!\n</div>\n\n## Fetching data - COVIDcast main endpoint \n\n<div style=\"font-size: 0.8em;\">\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(epidatr)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Obtain the most up-to-date version of the smoothed covid-like illness (CLI)\n# signal from the COVID-19 Trends and Impact survey for the US\nepidata <- pub_covidcast(\n  source = \"fb-survey\",\n  signals = \"smoothed_cli\",\n  geo_type = \"nation\",\n  time_type = \"day\",\n  geo_values = \"us\",\n  time_values = epirange(20210105, 20210410)\n)\nhead(epidata) %>% select(geo_value, signal, source, geo_type, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  geo_value signal      source geo_type time_value issue        lag value stderr\n  <chr>     <chr>       <chr>  <fct>    <date>     <date>     <dbl> <dbl>  <dbl>\n1 us        smoothed_c… fb-su… nation   2021-01-05 2021-01-10     5  1.18 0.0162\n2 us        smoothed_c… fb-su… nation   2021-01-06 2021-01-29    23  1.18 0.0163\n3 us        smoothed_c… fb-su… nation   2021-01-07 2021-01-29    22  1.20 0.0165\n4 us        smoothed_c… fb-su… nation   2021-01-08 2021-01-29    21  1.22 0.0167\n5 us        smoothed_c… fb-su… nation   2021-01-09 2021-01-29    20  1.22 0.0169\n6 us        smoothed_c… fb-su… nation   2021-01-10 2021-01-29    19  1.23 0.0171\n```\n\n\n:::\n:::\n\n\n\nHere `value` is the requested signal – in this case, the smoothed estimate of the percentage of people with COVID-like illness, based on the symptom surveys, and `stderr` is its standard error.\n</div>\n\n## Returned data - COVIDcast main endpoint \n<div style=\"font-size: 0.8em;\">\n* `pub_covidcast()` outputs a tibble, where each row represents one observation.\n\n* Each observation covers a set of events aggregated by time and by geographic region is a record in our database. Each such record includes:\n* `time_value`: time period when the events occurred.\n* `geo_value`: geographic region where the events occurred.\n* `value`: estimated value.\n* `stderr`: standard error of the estimate, usually referring to the sampling error.\n* `sample_size`: number of events used in the estimation.\n</div>\n<!--  For example, a number of COVID-19 antigen tests were performed in the state of New York on August 1. The `time_value`ould be August 1, with `geo_value` indicating the state of New York, while the remaining fields would give the estimated test positivity rate (the percentage of tests that were positive for COVID-19), its standard error, and the number of tests used to calculate the estimate. -->\n\n## Returned data - COVIDcast main endpoint \nCrucially—and unlike most other sources of COVID-19 data—our API reports two additional fields with each record:\n\n* `issue`: The time period when this observation was published.\n\n* `lag`: The time delay between when the events occurred and when this observation was published.\n\n* Meaning that unlike most other sources of COVID data, it tracks the complete revision history of every signal.\n\n* This allows for historical reconstructions of what information was available at specific times. **More on this soon!**\n\n\n## Geographic levels\n<div style=\"font-size: 0.8em;\">\n* The Epidata API makes signals available at different geographic levels, depending on the endpoint\n* For the `smoothed_cli` signal, we can obtain values for each state\n\n* Simply change `geo_type` and `geo_values` in the previous example to get...\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Obtain the most up-to-date version of the smoothed covid-like illness (CLI)\n# signal from the COVID-19 Trends and Impact survey for all states\nstate_epidata <- pub_covidcast(\n  source = \"fb-survey\",\n  signals = \"smoothed_cli\",\n  geo_type = \"state\",\n  time_type = \"day\",\n  geo_values = \"*\",\n  time_values = epirange(20210105, 20210410)\n)\nhead(state_epidata) %>% select(geo_value, signal, source, geo_type, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  geo_value signal      source geo_type time_value issue        lag value stderr\n  <chr>     <chr>       <chr>  <fct>    <date>     <date>     <dbl> <dbl>  <dbl>\n1 ak        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 0.747 0.250 \n2 al        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 2.36  0.187 \n3 ar        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 1.93  0.200 \n4 az        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 1.56  0.129 \n5 ca        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 1.24  0.0542\n6 co        smoothed_c… fb-su… state    2021-01-05 2021-01-10     5 0.934 0.107 \n```\n\n\n:::\n:::\n\n\n\n</div>\n\n## COVIDcast main endpoint - Example query \n<div style=\"font-size: 0.75em;\">\nCounty `geo_values` are [FIPS codes](https://en.wikipedia.org/wiki/List_of_United_States_FIPS_codes_by_county) and are discussed in the API docs [here](https://cmu-delphi.github.io/delphi-epidata/api/covidcast_geography.html). The example below is for Orange County, California. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfb_county_data <- pub_covidcast(\n  source = \"fb-survey\",\n  signals = \"smoothed_accept_covid_vaccine\",\n  geo_type = \"county\",\n  time_type = \"day\",\n  time_values = epirange(20201221, 20201225),\n  geo_values = \"06059\"\n)\nhead(fb_county_data) %>% select(geo_value, signal, source, geo_type, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 9\n  geo_value signal      source geo_type time_value issue        lag value stderr\n  <chr>     <chr>       <chr>  <fct>    <date>     <date>     <dbl> <dbl>  <dbl>\n1 06059     smoothed_a… fb-su… county   2020-12-21 2020-12-22     1  80.9   2.08\n2 06059     smoothed_a… fb-su… county   2020-12-22 2020-12-23     1  78.9   1.76\n3 06059     smoothed_a… fb-su… county   2020-12-23 2020-12-24     1  80.0   1.50\n4 06059     smoothed_a… fb-su… county   2020-12-24 2020-12-25     1  79.3   1.35\n5 06059     smoothed_a… fb-su… county   2020-12-25 2020-12-26     1  80.3   1.21\n```\n\n\n:::\n:::\n\n\n\n</div>\n::: {.callout-important icon=\"false\"}\n\n## Note\n\nThe `covidcast` endpoint supports `*` in its time and geo fields. Try to obtain the signal values for all available counties by replacing `geo_values = \"06059\"` with\n`geo_values = \"*\"`.\n:::\n\n## Example queries - Other endpoints <br> Hospitalizations\n\n1. **COVID-19 Hospitalization: Facility Lookup**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility_lookup.html>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_facility_lookup(city = \"southlake\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 10\n  hospital_pk state ccn    hospital_name    address city  zip   hospital_subtype\n  <chr>       <chr> <chr>  <chr>            <chr>   <chr> <chr> <chr>           \n1 450888      TX    450888 TEXAS HEALTH HA… 1545 E… SOUT… 76092 Short Term      \n2 670132      TX    670132 METHODIST SOUTH… 421 E … SOUT… 76092 Short Term      \n# ℹ 2 more variables: fips_code <chr>, is_metro_micro <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# pub_covid_hosp_facility_lookup(state = \"WY\")\n# A non-example (there is no city called New York in Wyoming)\n# pub_covid_hosp_facility_lookup(state = \"WY\", city = \"New York\")\n```\n:::\n\n\n\n\n\n## Example queries - Other endpoints <br> Hospitalizations\n\n2. **COVID-19 Hospitalization by Facility**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_facility(\n  hospital_pks = \"100075\",\n  collection_weeks = epirange(20200101, 20200501)\n)\n```\n:::\n\n\n\n\n3. **COVID-19 Hospitalization by State**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_covid_hosp_state_timeseries(states = \"MA\", dates = \"20200510\")\n```\n:::\n\n\n\n\n## Example queries - Other endpoints <br> Flu endpoints\n\n1. **FluSurv hospitalization data**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/flusurv.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_flusurv(locations = \"ca\", epiweeks = 202001)\n```\n:::\n\n\n\n\n2. **Fluview data**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/fluview.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_fluview(regions = \"nat\", epiweeks = epirange(201201, 202001))\n```\n:::\n\n\n\n\n3. **NIDSS Flu**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/nidss_flu.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_nidss_flu(regions = \"taipei\", epiweeks = epirange(200901, 201301))\n```\n:::\n\n\n\n\n## Example queries - Other endpoints <br> Dengue endpoints\n\n1. **Delphi’s Dengue Nowcast**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/dengue_nowcast.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_dengue_nowcast(locations = \"pr\", epiweeks = epirange(201401, 202301))\n```\n:::\n\n\n\n\n2. **NIDSS dengue**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/nidss_dengue.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_nidss_dengue(locations = \"taipei\", epiweeks = epirange(200301, 201301))\n```\n:::\n\n\n\n\n3. **PAHO Dengue**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/paho_dengue.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_paho_dengue(regions = \"ca\", epiweeks = epirange(200201, 202319))\n```\n:::\n\n\n\n\n## Example queries - Other endpoints <br> Wikipedia\n\n**Wikipedia access**\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/wiki.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npub_wiki(\n  language = \"en\",\n  articles = \"influenza\",\n  time_type = \"week\",\n  time_values = epirange(202001, 202319)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 64 × 6\n   article   count     total  hour epiweek     value\n   <chr>     <dbl>     <dbl> <dbl> <date>      <dbl>\n 1 influenza  6516 663604044    -1 2019-12-29   9.82\n 2 influenza 10244 789885521    -1 2020-01-05  13.0 \n 3 influenza 10728 783760384    -1 2020-01-12  13.7 \n 4 influenza 24843 785222292    -1 2020-01-19  31.6 \n 5 influenza 62850 780291898    -1 2020-01-26  80.5 \n 6 influenza 41768 778222703    -1 2020-02-02  53.7 \n 7 influenza 29434 767244708    -1 2020-02-09  38.4 \n 8 influenza 22714 764074572    -1 2020-02-16  29.7 \n 9 influenza 88758 767718009    -1 2020-02-23 116.  \n10 influenza 62433 759825311    -1 2020-03-01  82.2 \n# ℹ 54 more rows\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## Tip - public vs private methods\n\nAside from these public methods we've gone through (these start with `pub_`),\nthere are private methods (these start with `pvt_` when you type `avail_endpoints()`).\nThese require private access keys to use (separate from the Delphi Epidata API key). \nTo run these locally, you will need to store these secrets in your `.Reviron` file, or set them as environmental variables.\nSee [Private methods](https://cmu-delphi.github.io/epidatr/articles/signal-discovery.html) for examples of using private endpoints.\n:::\n\n## Signal metadata\n\n* Some endpoints provide additional metadata for signals.\n    + **Time Information**: Details on available time frames and last update times.\n    + **Geography Information**: Details on available geography types. \n\n* Key Endpoints for Metadata\n    + `pub_covidcast_meta()`: Access metadata for the COVIDcast endpoint.\n    + `pub_fluview_meta()`: Get metadata for the FluView endpoint.\n    + `pub_meta()`: General metadata for the Delphi Epidata API.\n\n# Panel data\n\n## Panel data\n<div style=\"font-size: 0.91em;\">\n* [Panel data](https://en.wikipedia.org/wiki/Panel_data) or longitudinal data, contain cross-sectional measurements of subjects over time.\n\n* In table form, panel data is a time index + one or more locations/keys.\n\n* For example: The estimated percentage of outpatient doctor visits that are COVID-related in MA over 2021 ([docs](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html)):\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `epi_df` object, 6 x 3 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2021-12-17\n\n# A tibble: 6 × 3\n  geo_value time_value percent_cli\n* <chr>     <date>           <dbl>\n1 ma        2021-03-01        3.31\n2 ma        2021-03-02        2.87\n3 ma        2021-03-03        2.95\n4 ma        2021-03-04        3.17\n5 ma        2021-03-05        3.35\n6 ma        2021-03-06        3.38\n```\n\n\n:::\n:::\n\n\n\n</div>\n\n## Examples of panel data - COVID-19 cases\n\n**JHU CSSE COVID cases in the U.S.** (smoothed with a 7-day trailing average) over the year of the pandemic (April 15, 2020 – April 15, 2021).\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/examples-jhu-csse-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Examples of panel data - CHNG-CLI\n\n**Change Healthcare COVID-like illness (CHNG-CLI)** reports the percentage of outpatient visits for COVID-related symptoms, based on deidentified Change Healthcare claims data.\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/chng.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/examples-chng-cli-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Examples of panel data - CHNG-COVID\n\n**Change Healthcare COVID (CHNG-COVID)** reports the percentage of outpatient visits with confirmed COVID-19, based on Change Healthcare claims data.\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/paho_dengue.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/examples-chng-covid-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Examples of panel data - CTIS-CLI\n\n**COVID-19 Trends and Impact Survey CLI (CTIS-CLI)** estimates the percentage of the population with COVID-like illness based on Delphi's Facebook user surveys.\n\nAPI docs: <https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/fb-survey.html>\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/examples-ctis-cli-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + visualizing panel data\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/multiple-signals-unscale-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## All together - Visualizing multiple panel data signals\nExample: gathering different signals + **scaling** + visualizing panel data\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/scaled-signals-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\nThe auxiliary signals track changes in officially reported cases quite well. This is more clear when they have all been placed on the same range as reported cases per 100,000 people.\n \n## COVID-19 cases and deaths in CA example\n* **Takeaway**: Cases appear to strongly correlate with deaths several weeks later.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/plot-ca-cases-deaths-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n# Versioned data\n\n## Intro to versioned data\n* In panel data, we've seen that time is indicated by `time_value`.\n\n* Now, we add a second time index to indicate the data version...\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <geo_value, time_value, version>\n   geo_value time_value    version percent_cli\n      <char>     <Date>     <Date>       <num>\n1:        ma 2021-03-01 2021-03-04    6.470187\n2:        ma 2021-03-01 2021-03-05    6.207676\n3:        ma 2021-03-01 2021-03-06    5.664716\n4:        ma 2021-03-01 2021-03-07    5.636590\n5:        ma 2021-03-01 2021-03-08    5.665734\n6:        ma 2021-03-01 2021-03-09    5.537332\n```\n\n\n:::\n:::\n\n\n\n\n* Note that this feature can be indicated in different ways (ex. `version`, `issue`, `release`, `as_of`). \n\n## Versioned panel data\nEstimated percentage of outpatient (DV-CLI) data across multiple issue dates, with updates and revisions to past data as new issue dates are released:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/versioned-panel-ex-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Latency and revision in signals\n\n* **Latency** refers to the delay between data collection and availability.\n\nExample: A signal based on medical insurance claims may take several days to appear but is subject to delays as claims are processed over weeks.\n\n* **Revision** occurs when data is updated or corrected after initial publication, often due to new information or late reporting.\n\nExample: COVID-19 case reports are revised frequently after initial publication as new data comes in or reporting backlogs are cleared.\n\n## Latency and revision in signals - Example\n<div style=\"font-size: 0.9em;\">\n* Recall the first example of panel & versioned data we've seen.\n\n<!-- on the % of COVID-related outpatient visits in MA during 2021. -->\n\n* This signal is 3 days latent (`version` - `time_value`) & clearly undergoes revision over time (ex. consider March 1's `percent_cli` across `version`).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <geo_value, time_value, version>\n   geo_value time_value    version percent_cli\n      <char>     <Date>     <Date>       <num>\n1:        ma 2021-03-01 2021-03-04    6.470187\n2:        ma 2021-03-01 2021-03-05    6.207676\n3:        ma 2021-03-01 2021-03-06    5.664716\n4:        ma 2021-03-01 2021-03-07    5.636590\n5:        ma 2021-03-01 2021-03-08    5.665734\n6:        ma 2021-03-01 2021-03-09    5.537332\n```\n\n\n:::\n:::\n\n\n\n\n* The amount of lag in reporting can vary, and not all visits are reported with the same lag.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n     min median     mean     max\n  3 days 3 days 3.6 days 16 days\n```\n\n\n:::\n:::\n\n\n\n</div>\n\n<!-- min_lag: the minimum time to any value  -->\n\n## Revisions\nMany data sources are subject to revisions:\n\n* Case and death counts are frequently corrected or adjusted by authorities.\n\n* Medical claims data can take weeks to be submitted and processed.\n\n<!--* In the previous slide's example because doctor's visits may be reported to the health system partners several days after they occur, these signals are typically available with several days of lag. This means that estimates for a specific day are only available several days later. -->\n\n* Lab tests and medical records can be backlogged for a variety of reasons.\n\n* Surveys are not always completed promptly.\n\n* **Key**: An accurate revision log is crucial for researchers building forecasts of COVID-19 cases or outcomes. \n**A forecast that is made today can should rely on information we have access to today.**\n\n## Types of revisions\n1. **Sources that don't revise** - Ex. Facebook or Google symptoms (provisional and final are the same)\n\n1. **Predictable revisions** - Ex. Claims data (CHNG) and public health reports aligned by observation/test, hosp, or death date\n\n1. **Revisions that are large and erratic to predict** - Ex. COVID cases and deaths \n\n## Types of revisions - Comparison between 2. and 3.\n<div style=\"font-size: 0.8em;\">\n* Revision behavior for two indicators in the HRR containing Charlotte, NC.\n\n<!-- Each colored line corresponds to the data as reported on a particular date (as of dates varying from 28 September through 19 October). -->\n* **DV-CLI signal (left) ** was regularly revised throughout the period, although effects fade farther back.\n\n* **JHU CSSE cases (right) ** remain \"as reported\" on Sept. 28, with a spike toward the end of this period, until a major correction is made on Oct. 19, which brings this down & affects prior data.\n</div>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/figure-1-revisions-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n\n## Key takeaways\n\n* **Medical claims revisions:** More systematic and predictable.\n* **COVID-19 case report revisions:** Erratic and often unpredictable.\n* Large spikes or anomalies can occur as:\n    + **Reporting backlogs** are cleared.\n    + **Changes in case definitions** are implemented.\n\n## Reporting backlogs - Example\n\n* **Left**: Reported cases per day in Bexar County, Texas, during the summer of 2020. On July 16, 4,810 **backlogged cases** were reported, reflecting a 2-week delay. This caused a prolonged spike due to the 7-day trailing average applied to the counts.\n\n* **Right**: CTIS estimates of CLI-in-community showed more stable underlying trends.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/figure-4-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Reporting backlogs - Key takeaways\n\n* **Reporting issues been common across U.S. jurisdictions.**\n\n* For example, audits have regularly discovered **misclassified or unreported cases and deaths**.\n\n* This underscores the value of **cross-checking data with external sources** not part of the same reporting systems.\n\n# Versioning in `epidatr`\n\n## Versioned data in `epidatr`\n<div style=\"font-size: 0.8em;\">\n* Epidata API contains comprehensive data record, capturing each signal's estimate, location, date, and update timeline.\n    \n* **Example**: [Doctor Visits Signal](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html) (from the `covidcast` endpoint)\n    + Estimates the percentage of outpatient doctor visits that are COVID-related.\nTo give a specific example, let's consider the estimate for PA on May 1, 2020:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  as_of = \"2020-05-07\"\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  geo_value signal           source        time_value issue        lag value\n  <chr>     <chr>            <chr>         <date>     <date>     <dbl> <dbl>\n1 pa        smoothed_adj_cli doctor-visits 2020-05-01 2020-05-07     6  2.58\n```\n\n\n:::\n:::\n\n\n\n\n* Initial estimate was *issued* on May 7, 2020 (due to delay from aggregation and ingestion by the API).\n\n</div>\n\n## Understanding data \"as of\" a specific date\n<div style=\"font-size: 0.7em;\">\n* Requesting Specific Data Versions:\n    + Use `as_of`, `issues`, or `lag` arguments to specify data availability.\n    + Only one argument can be used at a time; not all endpoints support all three.\n    \n* We've already used the `as_of` argument, so let's try `lag` \n    + Example for May 7, 2020 (we should get the same output as before):\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  lag = 6\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-07     6  2.58     NA\n```\n\n\n:::\n:::\n\n\n\n**Result**: Estimate of <3% issued on May 7, 2020.\n</div>\n\n## Understanding data \"as of\" a specific date\n<div style=\"font-size: 0.7em;\">\n**Default behaviour:** If we don't specify `as_of`, we get the most recent estimate:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\"\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-07-04    64  5.97     NA\n```\n\n\n:::\n:::\n\n\n\n\n* Substantial Estimate Change:\n    + Estimate increased from <3% to almost 6% after May 7, reflecting new data on visits from May 1.\n    \n* Critical for Forecasting:\n    + Accurate backtesting requires using data available at the time of model fitting, not later updates, to ensure valid forecasting results.\n</div>\n\n## Multiple issues of observations\nBy using the `issues` argument, we can request all issues in a certain time period:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-01\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"2020-05-01\", \"2020-05-15\")\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-07     6  2.58     NA\n2 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-08     7  3.28     NA\n3 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-09     8  3.32     NA\n4 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-12    11  3.59     NA\n5 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-13    12  3.63     NA\n6 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-14    13  3.66     NA\n```\n\n\n:::\n:::\n\n\n\n\n## Observations issued with a specific lag\n<div style=\"font-size: 0.8em;\">\n* We can use the `lag` argument to request only data reported with a certain lag. \n\n* **Example**: Request  a lag of 7 days fetches only data issued exactly 7 days after the corresponding `time_value`:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-01\", \"2020-05-07\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  lag = 7\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-01 2020-05-08     7  3.28     NA\n2 pa        smoothed_adj_cli doctor-vi… 2020-05-02 2020-05-09     7  3.23     NA\n3 pa        smoothed_adj_cli doctor-vi… 2020-05-05 2020-05-12     7  2.78     NA\n4 pa        smoothed_adj_cli doctor-vi… 2020-05-06 2020-05-13     7  2.56     NA\n5 pa        smoothed_adj_cli doctor-vi… 2020-05-07 2020-05-14     7  2.19     NA\n```\n\n\n:::\n:::\n\n\n\n</div>\n\n## Query results exclusion\n<div style=\"font-size: 0.8em;\">\n* Although the query we ran on the previous slide requested values from May 1 to May 7, May 3 and May 4 were not included due to a 7-day lag.\n\n* Results for those dates appear only if updates are issued on the corresponding lag day (e.g., May 10).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepidata <- pub_covidcast(\n  source = \"doctor-visits\",\n  signals = \"smoothed_adj_cli\",\n  time_type = \"day\",\n  time_values = epirange(\"2020-05-03\", \"2020-05-03\"),\n  geo_type = \"state\",\n  geo_values = \"pa\",\n  issues = epirange(\"2020-05-09\", \"2020-05-15\")\n)\nhead(epidata) %>% select(geo_value, signal, source, time_value, issue, lag, value, stderr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 8\n  geo_value signal           source     time_value issue        lag value stderr\n  <chr>     <chr>            <chr>      <date>     <date>     <dbl> <dbl>  <dbl>\n1 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-09     6  2.79     NA\n2 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-12     9  3.02     NA\n3 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-13    10  3.04     NA\n4 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-14    11  3.02     NA\n5 pa        smoothed_adj_cli doctor-vi… 2020-05-03 2020-05-15    12  3.05     NA\n```\n\n\n:::\n:::\n\n\n\n</div>\n\n## Main takeaways\n<div style=\"font-size: 0.8em;\">\n* **Delphi Epidata:** A one-stop platform for real-time epidemic data, providing aggregated signals for disease tracking and forecasting from diverse sources like health records, mobility patterns, and more.\n    \n* **Epidata API:** Open-access API delivering up-to-date, granular epidemiological data + makes all historical versions available.\n\n* **Epidatr:** Enables you to access Delphi's epidemiological data through R and Python, offering easy installation, powerful API functions, and interactive tools for discovering and analyzing health signals.\n\n* **Versioned Data and Latency:** Panel data captures time-series trends, which are often subject to revision.  A standout feature of this API is its inclusion of two critical fields...\n\n    1. `issue`: When the data was published\n    \n    2. `lag`: The delay between the event and when it was published\n    \n    to manage latency and revisions for transparency and more accurate analysis.\n\n</div>\n\n## Final slide {.smaller}\n\n\n### Thanks:\n\n\n\n\n\n\n\n\n\n- The whole [CMU Delphi Team](https://delphi.cmu.edu/about/team/) (across many institutions)\n- Optum/UnitedHealthcare, Change Healthcare.\n- Google, Facebook, Amazon Web Services.\n- Quidel, SafeGraph, Qualtrics.\n- Centers for Disease Control and Prevention.\n- Council of State and Territorial Epidemiologists\n\n\n::: {layout-row=1 fig-align=\"center\"}\n![](gfx/delphi.jpg){height=\"100px\"}\n![](gfx/berkeley.jpg){height=\"100px\"}\n![](gfx/cmu.jpg){height=\"100px\"}\n![](gfx/ubc.jpg){width=\"250px\"}\n![](gfx/stanford.jpg){width=\"250px\"}\n:::\n\n\n",
    "supporting": [
      "gfx"
>>>>>>> fb2c8943b669276c8da23045dc5d931b8afff972
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}