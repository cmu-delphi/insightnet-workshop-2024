{
  "hash": "3aa1590f77d7ebf4e4557e85b1e307b8",
  "result": {
    "markdown": "---\ntalk-title: \"Explore, clean & transform data\"\ntalk-short-title: \"{{< meta talk-title >}}\"\ntalk-subtitle: \"\"\nauthor: \"\"\nother-authors: \"\"\nrepo-address: \"cmu-delphi/insightnet-workshop-2024\"\ntalk-date: \"\"\nformat: revealjs\nexecute:\n  cache: false\n---\n\n  \n  <!-- Set any of the above to \"\" to omit them -->\n  \n  <!-- Or adjust the formatting in _titleslide.qmd -->\n---\n---\n\n\\DeclareMathOperator*{\\minimize}{minimize}\n\n\n\n\n\n\n\n::: flex\n::: w-20\n\n:::\n::: w-80\n## {{< meta talk-title >}} {background-image=\"gfx/cover-art-1.svg\" background-position=\"bottom\"}\n\n### {{< meta talk-subtitle >}}\n\n<br>\n\n#### {{< meta author >}} \n{{< meta other-authors >}}\n\n{{< meta talk-date >}}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Outline\n\n1. Essentials of `dplyr` and `tidyr` \n\n1. Epiverse software ecosystem\n\n1. Panel and versioned data in the epiverse\n\n1. Basic Nowcasting using `epiprocess`\n\n1. Motivating case study \n\n\n## Down with Spreadsheets for Data Manipulation\n\n* Spreadsheets make it difficult to rerun analyses consistently.\n* Using R (and `dplyr`) allows for:\n  * Reproducibility \n  * Ease of modification\n* **Recommendation**: Avoid manual edits; instead, use code for transformations.\n\n\n## Introduction to `dplyr`\n\n* `dplyr` is a powerful package in R for data manipulation.\n* It is part of the **tidyverse**, which includes a collection of packages designed to work together.\n* We focus on basic operations like selecting and filtering data.\n* Make sure to load the necessary libraries before using `dplyr`.\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Meet the Palmers\n![](gfx/meet_the_palmers.png){style=\"width: 70%;\"}\n\n<small>[Illustration from the palmerpenguins website](https://allisonhorst.github.io/palmerpenguins/)</small>\n\n## Working with the `palmerpenguins` Dataset\n\n* The `palmerpenguins` dataset is included in the `palmerpenguins` package.\n* Load both the `tidyverse` and `palmerpenguins` libraries to access and explore the dataset.\n* The dataset includes measurements of penguins such as species, bill length, flipper length, and body mass.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n## Ways to Inspect the Dataset\n\n* Use `head()` to view the first 6 row of the data (`tail()` to view the last 6 rows)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(penguins)  # First 6 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n```{.r .cell-code}\n#tail(penguins)  # Last 6 rows\n```\n:::\n\n\n## Ways to Inspect the Dataset\n* `glimpse()` to get a compact overview of the dataset.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\n\n## Creating Tibbles\n\n* **Tibbles**: Modern data frames with enhanced features.\n* Rows represent **observations** (or cases).\n* Columns represent **variables** (or features).\n* You can create tibbles manually using the `tibble()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntibble(x = letters, y = 1:26)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26 × 2\n   x         y\n   <chr> <int>\n 1 a         1\n 2 b         2\n 3 c         3\n 4 d         4\n 5 e         5\n 6 f         6\n 7 g         7\n 8 h         8\n 9 i         9\n10 j        10\n# ℹ 16 more rows\n```\n:::\n:::\n\n\n## Selecting Columns with `select()`\n\n* The `select()` function is used to pick specific columns from your dataset.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(penguins, species, body_mass_g)  # Select the 'species' and 'body_mass_g' columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 2\n   species body_mass_g\n   <fct>         <int>\n 1 Adelie         3750\n 2 Adelie         3800\n 3 Adelie         3250\n 4 Adelie           NA\n 5 Adelie         3450\n 6 Adelie         3650\n 7 Adelie         3625\n 8 Adelie         4675\n 9 Adelie         3475\n10 Adelie         4250\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n## Selecting Columns with `select()`\n\n* You can exclude columns by prefixing the column names with a minus sign `-`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(penguins, -species)  # Exclude the 'species' column from the dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 7\n   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex    year\n   <fct>           <dbl>         <dbl>             <int>       <int> <fct> <int>\n 1 Torge…           39.1          18.7               181        3750 male   2007\n 2 Torge…           39.5          17.4               186        3800 fema…  2007\n 3 Torge…           40.3          18                 195        3250 fema…  2007\n 4 Torge…           NA            NA                  NA          NA <NA>   2007\n 5 Torge…           36.7          19.3               193        3450 fema…  2007\n 6 Torge…           39.3          20.6               190        3650 male   2007\n 7 Torge…           38.9          17.8               181        3625 fema…  2007\n 8 Torge…           39.2          19.6               195        4675 male   2007\n 9 Torge…           34.1          18.1               193        3475 <NA>   2007\n10 Torge…           42            20.2               190        4250 <NA>   2007\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n* So, this is useful when you want to keep only certain columns or remove unnecessary ones.\n\n## Extracting Columns with `pull()`\n\n* `pull()`: Extract a column as a vector.\n* Let's try this with the `species` column...\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npull(penguins, species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n  [8] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [15] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [22] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [29] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [36] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [43] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [50] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [57] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [64] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [71] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [78] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [85] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [92] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n [99] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[106] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[113] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[120] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[127] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[134] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[141] Adelie    Adelie    Adelie    Adelie    Adelie    Adelie    Adelie   \n[148] Adelie    Adelie    Adelie    Adelie    Adelie    Gentoo    Gentoo   \n[155] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[162] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[169] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[176] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[183] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[190] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[197] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[204] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[211] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[218] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[225] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[232] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[239] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[246] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[253] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[260] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[267] Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo    Gentoo   \n[274] Gentoo    Gentoo    Gentoo    Chinstrap Chinstrap Chinstrap Chinstrap\n[281] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[288] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[295] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[302] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[309] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[316] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[323] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[330] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[337] Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap Chinstrap\n[344] Chinstrap\nLevels: Adelie Chinstrap Gentoo\n```\n:::\n:::\n\n\n\n## Filtering Rows with `filter()`\n\n* The `filter()` function allows you to select rows that meet specific conditions.\n* Conditions can involve column values, such as selecting only \"Gentoo\" penguins or filtering based on measurements like flipper length.\n* This enables you to narrow down your dataset to focus on relevant data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(penguins, species == \"Gentoo\", flipper_length_mm < 208)  # Filter Gentoo penguins with flipper length < 208mm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n1 Gentoo  Biscoe           45.1          14.5               207        5050\n2 Gentoo  Biscoe           48.4          14.4               203        4625\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n## Combining `select()` and `filter()` Functions\n\n* You can combine `select()` and `filter()` functions to refine the dataset further.\n* Use `select()` to choose columns and `filter()` to narrow rows based on conditions.\n* This helps in extracting the exact data needed for analysis.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(filter(penguins, species == \"Gentoo\", flipper_length_mm < 208), species, flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  species flipper_length_mm\n  <fct>               <int>\n1 Gentoo                207\n2 Gentoo                203\n```\n:::\n:::\n\n\n## Using the Pipe Operator `%>%`\n\n* The pipe operator (`%>%`) makes code more readable by chaining multiple operations together.\n* The output of one function is automatically passed to the next function.\n* This allows you to perform multiple steps (e.g., `select()` followed by `filter()`) in a clear and concise manner.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# This code reads more like poetry!\npenguins %>% \n  select(species, flipper_length_mm) %>%\n  filter(species == \"Gentoo\", flipper_length_mm < 208)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  species flipper_length_mm\n  <fct>               <int>\n1 Gentoo                207\n2 Gentoo                203\n```\n:::\n:::\n\n\n## Key Practices in `dplyr`\n\n* Use **tibbles** for easier data handling.\n* Use **`select()`** and **`filter()`** for data manipulation.\n* Use **`pull()`** to extract columns as vectors.\n* Use **`head()`**, **`tail()`**, and **`glimpse()`** for quick data inspection.\n* Chain functions with **`%>%`** for cleaner code.\n\n## Grouping Data with `group_by()`\n\n* Use `group_by()` to group data by one or more columns.\n* Allows performing operations on specific groups of data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  group_by(species) %>%\n  filter(body_mass_g == min(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 8\n# Groups:   species [3]\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n1 Adelie    Biscoe           36.5          16.6               181        2850\n2 Adelie    Biscoe           36.4          17.1               184        2850\n3 Gentoo    Biscoe           42.7          13.7               208        3950\n4 Chinstrap Dream            46.9          16.6               192        2700\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n## Penguin bill length and depth\n<div style=\"text-align: center;\">\n![](gfx/bill_length_depth.png){style=\"width: 60%;\"}\n\n<small>[Illustration from the palmerpenguins website](https://allisonhorst.github.io/palmerpenguins/)</small>\n</div>\n\n## Creating New Columns with `mutate()`\n\n* `mutate()` is used to create new columns.\n* Perform calculations using existing columns and assign to new columns.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  mutate(bill_size_mm2 = bill_depth_mm * bill_length_mm) %>% \n  select(-c(flipper_length_mm, body_mass_g, sex)) # too many cols to print\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 6\n   species island    bill_length_mm bill_depth_mm  year bill_size_mm2\n   <fct>   <fct>              <dbl>         <dbl> <int>         <dbl>\n 1 Adelie  Torgersen           39.1          18.7  2007          731.\n 2 Adelie  Torgersen           39.5          17.4  2007          687.\n 3 Adelie  Torgersen           40.3          18    2007          725.\n 4 Adelie  Torgersen           NA            NA    2007           NA \n 5 Adelie  Torgersen           36.7          19.3  2007          708.\n 6 Adelie  Torgersen           39.3          20.6  2007          810.\n 7 Adelie  Torgersen           38.9          17.8  2007          692.\n 8 Adelie  Torgersen           39.2          19.6  2007          768.\n 9 Adelie  Torgersen           34.1          18.1  2007          617.\n10 Adelie  Torgersen           42            20.2  2007          848.\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n## Creating New Columns with `mutate()`\n\n* `mutate()` can create multiple new columns in one step.\n* Logical comparisons (e.g., `sex == \"male\"`) can be used within `mutate()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  mutate(bill_size_mm2 = bill_depth_mm * bill_length_mm, \n         TF = sex == \"male\") %>% \n  select(-c(flipper_length_mm, body_mass_g, year)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 7\n   species island    bill_length_mm bill_depth_mm sex    bill_size_mm2 TF   \n   <fct>   <fct>              <dbl>         <dbl> <fct>          <dbl> <lgl>\n 1 Adelie  Torgersen           39.1          18.7 male            731. TRUE \n 2 Adelie  Torgersen           39.5          17.4 female          687. FALSE\n 3 Adelie  Torgersen           40.3          18   female          725. FALSE\n 4 Adelie  Torgersen           NA            NA   <NA>             NA  NA   \n 5 Adelie  Torgersen           36.7          19.3 female          708. FALSE\n 6 Adelie  Torgersen           39.3          20.6 male            810. TRUE \n 7 Adelie  Torgersen           38.9          17.8 female          692. FALSE\n 8 Adelie  Torgersen           39.2          19.6 male            768. TRUE \n 9 Adelie  Torgersen           34.1          18.1 <NA>            617. NA   \n10 Adelie  Torgersen           42            20.2 <NA>            848. NA   \n# ℹ 334 more rows\n```\n:::\n:::\n\n\n## Combining `group_by()` and `mutate()`\n\n* First, group data using `group_by()`.\n* Then, use `drop_na()` from `tidyr` to exclude rows with missing values.\n* Finally, `mutate` to perform calculations for each group.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  drop_na() %>% # Remove all non-complete rows\n  group_by(species) %>%\n  mutate(body_mass_median = median(body_mass_g)) %>% \n  select(-c(flipper_length_mm, body_mass_g, sex)) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n# Groups:   species [1]\n  species island    bill_length_mm bill_depth_mm  year body_mass_median\n  <fct>   <fct>              <dbl>         <dbl> <int>            <dbl>\n1 Adelie  Torgersen           39.1          18.7  2007             3700\n2 Adelie  Torgersen           39.5          17.4  2007             3700\n3 Adelie  Torgersen           40.3          18    2007             3700\n4 Adelie  Torgersen           36.7          19.3  2007             3700\n5 Adelie  Torgersen           39.3          20.6  2007             3700\n6 Adelie  Torgersen           38.9          17.8  2007             3700\n```\n:::\n:::\n\n\n## Conditional Calculations in `mutate()` with `if_else()`\n* `if_else()` allows conditional logic within `mutate()`.\n* Perform different operations depending on conditions, like \"big\" or \"small.\"\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nt <- 800\npenguins %>%\n  mutate(bill_size_mm2 = bill_depth_mm * bill_length_mm, \n         TF = sex == \"male\",\n         bill_size_binary = if_else(bill_size_mm2 > t, \"big\", \"small\")) %>% \n  select(-c(flipper_length_mm, body_mass_g, sex)) %>% # too many cols to print\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm  year bill_size_mm2 TF   \n  <fct>   <fct>              <dbl>         <dbl> <int>         <dbl> <lgl>\n1 Adelie  Torgersen           39.1          18.7  2007          731. TRUE \n2 Adelie  Torgersen           39.5          17.4  2007          687. FALSE\n3 Adelie  Torgersen           40.3          18    2007          725. FALSE\n4 Adelie  Torgersen           NA            NA    2007           NA  NA   \n5 Adelie  Torgersen           36.7          19.3  2007          708. FALSE\n6 Adelie  Torgersen           39.3          20.6  2007          810. TRUE \n# ℹ 1 more variable: bill_size_binary <chr>\n```\n:::\n:::\n\n\n## Summarizing Data with `summarise()`\n* `summarise()` reduces data to summary statistics (e.g., mean, median).\n* Typically used after `group_by()` to summarize each group.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  drop_na() %>%\n  group_by(species) %>%\n  summarise(body_mass_median = median(body_mass_g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species   body_mass_median\n  <fct>                <dbl>\n1 Adelie                3700\n2 Chinstrap             3700\n3 Gentoo                5050\n```\n:::\n:::\n\n\n\n## Using `summarise()` with Multiple Calculations\n* Use `summarise()` to calculate multiple summary statistics at once.\n* Include multiple columns and functions in a single call.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  drop_na() %>%\n  group_by(species) %>%\n  summarise(body_mass_median = median(body_mass_g), \n            bill_depth_median = median(bill_depth_mm),\n            flipper_length_median = median(flipper_length_mm),\n            bill_length_mm = median(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  species   body_mass_median bill_depth_median flipper_length_median\n  <fct>                <dbl>             <dbl>                 <dbl>\n1 Adelie                3700              18.4                   190\n2 Chinstrap             3700              18.4                   196\n3 Gentoo                5050              15                     216\n# ℹ 1 more variable: bill_length_mm <dbl>\n```\n:::\n:::\n\n* Yikes! This can get long. Is there a way to condense this?\n\n## Using `across()` to Apply Functions to Multiple Columns in one Swoop\n* `across()` applies a function (e.g., median) to multiple columns.\n* It's especially useful for summarizing multiple numeric columns in one step.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins %>%\n  drop_na() %>% \n  group_by(species) %>%\n  summarise(across(where(is.numeric), median))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  species   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  <fct>              <dbl>         <dbl>             <dbl>       <dbl> <dbl>\n1 Adelie              38.8          18.4               190        3700  2008\n2 Chinstrap           49.6          18.4               196        3700  2008\n3 Gentoo              47.4          15                 216        5050  2008\n```\n:::\n:::\n\n\n## Using `count()` to Aggregate Data\n* `count()` is a shortcut for grouping and summarizing the data:\n\nFor example, if we want to count the number of penguins by species, then\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_count <- penguins %>%\n  group_by(species) %>%\n  summarize(count = n())\n```\n:::\n\n\nis equivalent to \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins_count <- penguins %>%\n  count(species)\n\npenguins_count # Let's see what the counts are.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n:::\n\n\n## Tidy Data\n\n> \"Happy families are all alike; every unhappy family is unhappy in its own way.\" — Leo Tolstoy  \n\n* **Tidy datasets** are like happy families: consistent, standardized, and easy to work with.  \n* **Messy datasets** are like unhappy families: each one messy in its own unique way.  \nIn this section:\n* We'll define what makes data *tidy* and how to transform between the tidy and messy formats.\n\n## What is Tidy Data?\n\n* Tidy data follows a consistent structure: **each row represents one observation, and each column represents one variable.**\n\n<!-- * **Example:** Suppose we have the following messy/wide dataset of the counts of two species of penguins on two islands: -->\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Simple example of messy data (wide format)\npenguins_wide <- tibble(\n  island = c(\"Biscoe\", \"Biscoe\", \"Dream\"),\n  year = c(2007, 2008, 2007),\n  Adelie = c(10, 18, 20),\n  Gentoo = c(34, 46, 0)\n)\npenguins_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  island  year Adelie Gentoo\n  <chr>  <dbl>  <dbl>  <dbl>\n1 Biscoe  2007     10     34\n2 Biscoe  2008     18     46\n3 Dream   2007     20      0\n```\n:::\n:::\n\n\n##  Tidying Messy Data with `pivot_longer()`\n* To turn messy data into tidy data, we often use the `tidyr` package in the tidyverse.\n* Use `pivot_longer()` to convert data from **wide format** (multiple columns for the same variable) to **long format** (one column per variable).\n* This makes it easier to perform group-based calculations or create visualizations.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  island  year species count\n  <chr>  <dbl> <chr>   <dbl>\n1 Biscoe  2007 Adelie     10\n2 Biscoe  2007 Gentoo     34\n3 Biscoe  2008 Adelie     18\n4 Biscoe  2008 Gentoo     46\n5 Dream   2007 Adelie     20\n6 Dream   2007 Gentoo      0\n```\n:::\n:::\n\n\n## Making Data Wider with `pivot_wider()`\n\n* Sometimes, you need to convert data from long format to wide format using `pivot_wider()`.\n* This can be useful when you want to separate variables into individual columns.\n* Let's try converting `penguins_tidy` back to `penguins_wide`!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Pivoting long data back to wide format\npenguins_wide_back <- penguins_tidy %>%\n  pivot_wider(names_from = species, values_from = count)\n\npenguins_wide_back\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  island  year Adelie Gentoo\n  <chr>  <dbl>  <dbl>  <dbl>\n1 Biscoe  2007     10     34\n2 Biscoe  2008     18     46\n3 Dream   2007     20      0\n```\n:::\n:::\n\n\n## `complete()` and `fill()` to Handle Missing Data\n<div style=\"font-size: 0.7em;\">\n1. **`complete()`**: Adds missing rows for combinations of specified variables.\n2. **`fill()`**: Fills missing values in columns, typically from previous or next available values (default is LOCF).\n</div>\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# First, use complete() to add missing year (2008 for Dream)\npenguins_complete <- penguins_wide %>%\n  complete(island, year)\npenguins_complete\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  island  year Adelie Gentoo\n  <chr>  <dbl>  <dbl>  <dbl>\n1 Biscoe  2007     10     34\n2 Biscoe  2008     18     46\n3 Dream   2007     20      0\n4 Dream   2008     NA     NA\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Then, use fill() to fill the missing penguin counts\npenguins_complete %>%\n  fill(Adelie, Gentoo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  island  year Adelie Gentoo\n  <chr>  <dbl>  <dbl>  <dbl>\n1 Biscoe  2007     10     34\n2 Biscoe  2008     18     46\n3 Dream   2007     20      0\n4 Dream   2008     20      0\n```\n:::\n:::\n\n\n## Introduction to Joins in `dplyr`\n<div style=\"font-size: 0.8em;\">\n* Joining datasets is a powerful tool for combining info. from multiple sources.\n* In R, `dplyr` provides several functions to perform different types of joins.\n* We'll demonstrate joining `penguins_complete` (our penguin counts dataset) with `island_info` (dataset containing additional info. about the islands).\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Island information dataset\nisland_info <- tibble(\n  island = c(\"Biscoe\", \"Dream\", \"Torgersen\"),\n  location = c(\"Antarctica\", \"Antarctica\", \"Antarctica\"),\n  region = c(\"West\", \"East\", \"East\")\n)\n\nisland_info\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  island    location   region\n  <chr>     <chr>      <chr> \n1 Biscoe    Antarctica West  \n2 Dream     Antarctica East  \n3 Torgersen Antarctica East  \n```\n:::\n:::\n\n* Notice that the `island_info` dataset includes an island, Torgersen, that is not in `penguins_complete`.\n</div>\n\n## Left Join: Keep All Rows from the First Dataset\n\n* A **left join** keeps all rows from the **first dataset** (`penguins_complete`), and adds matching data from the second dataset (`island_info`).\n* So **all rows from the first dataset** (`penguins_complete`) will be preserved.\n* The datasets are joined by matching the `island` column, specified by the by argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Left join: combining penguins data with island info\npenguins_with_info <- penguins_complete %>%\n  left_join(island_info, by = \"island\")\n\npenguins_with_info\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n  island  year Adelie Gentoo location   region\n  <chr>  <dbl>  <dbl>  <dbl> <chr>      <chr> \n1 Biscoe  2007     10     34 Antarctica West  \n2 Biscoe  2008     18     46 Antarctica West  \n3 Dream   2007     20      0 Antarctica East  \n4 Dream   2008     NA     NA Antarctica East  \n```\n:::\n:::\n\n\n## Right Join: Keep All Rows from the Second Dataset\n\n* A **right join** keeps all rows from the **second dataset** (`island_info`), and adds matching data from the first dataset (`penguins_complete`).\n* If a row in the second dataset doesn't have a match in the first, then the columns from the first will be filled with NA. \n* We can see this for the `Torgersen` row from `island_info`...\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Right join: keep all rows from island_info\npenguins_right_join <- penguins_complete %>%\n  right_join(island_info, by = \"island\")\n\npenguins_right_join\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  island     year Adelie Gentoo location   region\n  <chr>     <dbl>  <dbl>  <dbl> <chr>      <chr> \n1 Biscoe     2007     10     34 Antarctica West  \n2 Biscoe     2008     18     46 Antarctica West  \n3 Dream      2007     20      0 Antarctica East  \n4 Dream      2008     NA     NA Antarctica East  \n5 Torgersen    NA     NA     NA Antarctica East  \n```\n:::\n:::\n\n\n## Inner Join: Only Keeping Matching Rows\n* An inner join will only keep rows where there is a match in both datasets.\n* So, if an island in `island_info` does not have a corresponding entry in `penguins_complete`, then that row will be excluded.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Inner join: only matching rows are kept\npenguins_inner_join <- penguins_complete %>%\n  inner_join(island_info, by = \"island\")\n\npenguins_inner_join\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n  island  year Adelie Gentoo location   region\n  <chr>  <dbl>  <dbl>  <dbl> <chr>      <chr> \n1 Biscoe  2007     10     34 Antarctica West  \n2 Biscoe  2008     18     46 Antarctica West  \n3 Dream   2007     20      0 Antarctica East  \n4 Dream   2008     NA     NA Antarctica East  \n```\n:::\n:::\n\n\n## Full Join: Keeping All Rows from Both Datasets\n\n* A full join will keep all rows from both datasets.\n* If an island in either dataset has no match in the other, the missing values will be filled with NA.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Full join: keep all rows from both datasets\npenguins_full_join <- penguins_complete %>%\n  full_join(island_info, by = \"island\")\n\npenguins_full_join\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  island     year Adelie Gentoo location   region\n  <chr>     <dbl>  <dbl>  <dbl> <chr>      <chr> \n1 Biscoe     2007     10     34 Antarctica West  \n2 Biscoe     2008     18     46 Antarctica West  \n3 Dream      2007     20      0 Antarctica East  \n4 Dream      2008     NA     NA Antarctica East  \n5 Torgersen    NA     NA     NA Antarctica East  \n```\n:::\n:::\n\n\n## Summary of the Four Join Functions\n\n* **Left join:** All rows from the left dataset and matching rows from the right dataset.\n* **Right join:** All rows from the right dataset and matching rows from the left dataset.\n* **Inner join:** Only matching rows from both datasets.\n* **Full join:** All rows from both datasets, with NA where no match exists.\n\n## Final thoughts on joins\n* Joins are an essential part of data wrangling in R.\n* The choice of join depends on the analysis you need to perform:\n    + Use **left joins** when you want to keep all data from the first dataset.\n    + Use **right joins** when you want to keep all data from the second dataset.\n    + Use **inner joins** when you're only interested in matching rows.\n    + Use **full joins** when you want to preserve all information from both datasets.\n\n## Goodbye palmer penguins\n<!-- Penguins are great at `group_by()` – they always know how to stick together in a `summarize()`d form! 🐧 -->\n**What's a penguin's favorite tool?** \n\n%>% — to keep the fish moving, from one catch to the next! 🐧 \n\n<div style=\"text-align: center;\">\n![](gfx/penguins_logo.png){style=\"width: 30%;\"}\n\n<small>[Logo from the palmerpenguins website](https://allisonhorst.github.io/palmerpenguins/)</small>\n</div>\n\n## Epiverse software ecosystem\n<!-- Interworking, community-driven, packages for epi tracking & forecasting. -->\n\n```{mermaid}\n%%| fig-width: 9\n%%| fig-height: 6\nflowchart LR\nA(\"{epidatr}\") --> C(\"{epiprocess}\")\nB(\"{epidatpy}\") --> C\nD(\"{other sources}\") --> C\nC --> E(\"{epipredict}\")\n\nclassDef smallText fill:#fff,stroke:#000,stroke-width:1px,font-size:14px,font-weight:bold,color:royalblue;\n  class A,B,C,D,E smallText;\n```\n\n\n<!-- 1. Fetch data: epidatr, epidatpy, and other sources, 2. Explore, clean, transform & backtest 3. Pre-built forecasters, modular forecasting framework: epipredict -->\n  \n  \n  \n# Data structures\n  \n## What is panel data?\n<div style=\"font-size: 0.8em;\">\n* Recall that [panel data](https://en.wikipedia.org/wiki/Panel_data), or longitudinal data, \ncontain cross-sectional measurements of subjects over time. \n* Built-in example: [`covid_case_death_rates`](\n  https://cmu-delphi.github.io/epidatasets/reference/covid_case_death_rates.html) \ndataset, which is a snapshot **as of** May 31, 2022 that contains daily state-wise measures of `case_rate` and  `death_rate` for COVID-19 in 2021:\n  \n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nAn `epi_df` object, 6 x 4 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2022-05-31\n\n# A tibble: 6 × 4\n  geo_value time_value case_rate death_rate\n* <chr>     <date>         <dbl>      <dbl>\n1 ak        2020-12-31      35.9      0.158\n2 al        2020-12-31      65.1      0.438\n3 ar        2020-12-31      66.0      1.27 \n4 as        2020-12-31       0        0    \n5 az        2020-12-31      76.8      1.10 \n6 ca        2020-12-31      96.0      0.751\n```\n:::\n:::\n\n\n* **Question:** How do we store & work with such snapshots in the epiverse software ecosystem?\n  </div>\n  \n## `epi_df`: snapshot of a data set\n  \n* a tibble that requires columns `geo_value` and `time_value`.\n* arbitrary additional columns containing [measured values]{.primary}\n* additional [keys]{.primary} to index (`age_group`, `ethnicity`, etc.)\n\n::: {.callout-note}\n## `epi_df`\n\nRepresents a [snapshot]{.primary} that\ncontains the most [up-to-date values]{.primary} of the signal variables, [as of]{.primary} a given time.\n:::\n  \n## `epi_df`: snapshot of a data set\n  \n\n::: {.cell layout-align=\"center\"}\n<style type=\"text/css\">\n.withscroll {\n  height: 55vh;\n  overflow-y: auto !important;\n}\n</style>\n:::\n\n::: {.cell layout-align=\"center\"}\n<details><summary>Example data object documentation, license, attribution</summary><div class=\"withscroll\">No documentation for 'covid_case_death_rates' in specified packages and libraries:\nyou could try '??covid_case_death_rates'\n</div></details>\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nAn `epi_df` object, 20,496 x 4 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2022-05-31\n\n# A tibble: 20,496 × 4\n   geo_value time_value case_rate death_rate\n * <chr>     <date>         <dbl>      <dbl>\n 1 ak        2020-12-31      35.9      0.158\n 2 al        2020-12-31      65.1      0.438\n 3 ar        2020-12-31      66.0      1.27 \n 4 as        2020-12-31       0        0    \n 5 az        2020-12-31      76.8      1.10 \n 6 ca        2020-12-31      96.0      0.751\n 7 co        2020-12-31      35.8      0.649\n 8 ct        2020-12-31      52.1      0.819\n 9 dc        2020-12-31      31.0      0.601\n10 de        2020-12-31      64.3      0.912\n# ℹ 20,486 more rows\n```\n:::\n:::\n\n\n## Sliding examples on `epi_df`\n\n### Growth rates\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedf <- filter(edf, geo_value %in% c(\"ut\", \"ca\")) %>%\n  group_by(geo_value) %>%\n  mutate(gr_cases = growth_rate(time_value, case_rate, method = \"trend_filter\"))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/unnamed-chunk-8-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n## `epi_archive`: collection of `epi_df`s\n\n* full version history of a data set\n* acts like a bunch of `epi_df`s --- but stored [compactly]{.primary}\n* allows similar functionality as `epi_df` but using only [data that would have been available at the time]{.primary}\n\n::: {.callout-note}\n## Revisions\n\nEpidemiology data gets revised frequently. (Happens in Economics as well.) \n\n* We may want to use the data [as it looked in the past]{.primary} \n* or we may want to examine [the history of revisions]{.primary}.\n:::\n  \n  \n## Revision patterns\n  \n\n::: {.cell layout-align=\"center\"}\n<details><summary>Example data object documentation, license, attribution</summary><div class=\"withscroll\"><pre>\narchive_cases_dv_subset       package:epiprocess       R Documentation\n\n<u>S</u><u>u</u><u>b</u><u>s</u><u>e</u><u>t</u> <u>o</u><u>f</u> <u>d</u><u>a</u><u>i</u><u>l</u><u>y</u> <u>C</u><u>O</u><u>V</u><u>I</u><u>D</u>-<u>1</u><u>9</u> <u>d</u><u>o</u><u>c</u><u>t</u><u>o</u><u>r</u> <u>v</u><u>i</u><u>s</u><u>i</u><u>t</u><u>s</u> <u>a</u><u>n</u><u>d</u> <u>c</u><u>a</u><u>s</u><u>e</u><u>s</u> <u>f</u><u>r</u><u>o</u><u>m</u> <u>6</u> <u>s</u><u>t</u><u>a</u><u>t</u><u>e</u><u>s</u> <u>i</u><u>n</u>\n<u>a</u><u>r</u><u>c</u><u>h</u><u>i</u><u>v</u><u>e</u> <u>f</u><u>o</u><u>r</u><u>m</u><u>a</u><u>t</u>\n\n<u>D</u><u>e</u><u>s</u><u>c</u><u>r</u><u>i</u><u>p</u><u>t</u><u>i</u><u>o</u><u>n</u>:\n\n     This data source is based on information about outpatient visits,\n     provided to us by health system partners, and also contains\n     confirmed COVID-19 cases based on reports made available by the\n     Center for Systems Science and Engineering at Johns Hopkins\n     University. This example data ranges from June 1, 2020 to December\n     1, 2021, issued on dates from June 1, 2020 to December 1, 2021. It\n     is limited to California, Florida, Texas, and New York.\n\n     It is used in the epiprocess 'compactify', 'epi_archive', and\n     advanced-use ('advanced') vignettes.\n\n<u>U</u><u>s</u><u>a</u><u>g</u><u>e</u>:\n\n     archive_cases_dv_subset\n     \n<u>F</u><u>o</u><u>r</u><u>m</u><u>a</u><u>t</u>:\n\n     An object of class 'epi_archive' of length 6.\n\n<u>D</u><u>a</u><u>t</u><u>a</u> <u>d</u><u>i</u><u>c</u><u>t</u><u>i</u><u>o</u><u>n</u><u>a</u><u>r</u><u>y</u>:\n\n     The data in the 'epi_archive$DT' attribute has columns:\n\n     geo_value the geographic value associated with each row of\n          measurements.\n\n     time_value the time value associated with each row of\n          measurements.\n\n     version the time value specifying the version for each row of\n          measurements.\n\n     percent_cli percentage of doctor’s visits with CLI (COVID-like\n          illness) computed from medical insurance claims\n\n     case_rate_7d_av 7-day average signal of number of new confirmed\n          cases due to COVID-19 per 100,000 population, daily\n\n<u>S</u><u>o</u><u>u</u><u>r</u><u>c</u><u>e</u>:\n\n     This object contains a modified part of the COVID-19 Data\n     Repository by the Center for Systems Science and Engineering\n     (CSSE) at Johns Hopkins University as republished in the COVIDcast\n     Epidata API. This data set is licensed under the terms of the\n     Creative Commons Attribution 4.0 International license by Johns\n     Hopkins University on behalf of its Center for Systems Science in\n     Engineering. Copyright Johns Hopkins University 2020.\n\n     Modifications:\n\n        • From the COVIDcast Epidata API: 'case_rate_7d_av' signal was\n          computed by Delphi from the original JHU-CSSE data by\n          calculating moving averages of the preceding 7 days, so the\n          signal for June 7 is the average of the underlying data for\n          June 1 through 7, inclusive.\n\n        • Furthermore, the data has been limited to a very small number\n          of rows, the signal names slightly altered, and formatted\n          into an 'epi_archive'.\n\n     This object contains a modified part of the Delphi 'doctor-visits'\n     indicator. This data source is computed by the Delphi Group from\n     information about outpatient visits, provided to Delphi by health\n     system partners, and published in the COVIDcast Epidata API. This\n     data set is licensed under the terms of the Creative Commons\n     Attribution 4.0 International license by the Delphi group.\n\n     Modifications:\n\n        • From the COVIDcast Doctor Visits signal: The signal\n          'smoothed_adj_cli' is taken directly from the API without\n          changes.\n\n        • Furthermore, the data has been limited to a very small number\n          of rows, the signal names slightly altered, and formatted\n          into an 'epi_archive'.\n\n<u>E</u><u>x</u><u>a</u><u>m</u><u>p</u><u>l</u><u>e</u><u>s</u>:\n\n     # Since this is a re-exported dataset, it cannot be loaded using\n     # the `data()` function. `data()` looks for a file of the same name\n     # in the `data/` directory, which doesn't exist in this package.\n     # works\n     epiprocess::archive_cases_dv_subset\n     \n     # works\n     library(epiprocess)\n     archive_cases_dv_subset\n     \n     # fails\n     ## Not run:\n     \n     data(archive_cases_dv_subset, package = \"epiprocess\")\n     ## End(Not run)\n     \n</pre></div></details>\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/unnamed-chunk-10-1.svg){fig-align='center'}\n:::\n:::\n\n\n## Finalized data\n<div style=\"font-size: 0.9em;\">\n  * Counts are revised as time proceeds\n* Want to know the [final]{.primary} value \n* Often not available until weeks/months later\n</div>\n  Forecasting\n: At time $t$, predict the final value for time $t+h$, $h > 0$\n  \n  <br>\n  \n  Backcasting\n: At time $t$, predict the final value for time $t-h$, $h < 0$\n\n  <br>\n  \n  Nowcasting\n: At time $t$, predict the final value for time $t$\n  \n# Nowcasting with one time series\n\n<!-- predicting a finalized value from a provisional value and making predictions. -->\n## Backfill Canadian edition\n  \n* Every week the BC CDC releases COVID-19 hospitalization data.\n\n* Following week they revise the number upward (by ~25%) due to lagged reports.\n\n![](gfx/bc_hosp_admissions_ex.jpg){style=\"width: 60%;\"}\n<!-- Newest iteration of \"backfill”, Canada edition. Every week the BC CDC releases hospitalization data. The following week they revise the number upward (by about 25%) due to lagging reports. Every single week, the newspaper says “hospitalizations have declined”. This week the BC CDC’s own report said “hospitalizations have declined”. The takeaway in the news is that hospitalizations ALWAYS fall from the previous week, but once backfilled, they’re rarely down -->\n\n* **Takeaway**: Once the data is backfilled, hospitalizations rarely show a decline, challenging the common media narrative.\n\n## Aside on Nowcasting\n\n* To some Epis, \"nowcasting\" can be equated with \"estimate the time-varying instantaneous reproduction number, $R_t$\"\n\n* Example using the number of reported COVID-19 cases in British Columbia between January 2020 and April 15, 2023. \n<!-- This data is the number of reported COVID-19 cases in British Columbia between January 2020 and April 15, 2023. The values are.up-to-date as of August 2023. -->\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](gfx/nowcasting-1.svg){fig-align='center' height=400px}\n:::\n:::\n\n\n* Group built [`{rtestim}`](https://dajmcdon.github.io/rtestim) doing for this nonparametrically.\n\n* We may come back to this later...\n\n## Mathematical setup\n\n* Suppose today is time $t$\n\n* Let $y_i$ denote a series of interest observed at times $i=1,\\ldots, t$.\n\n::: {.callout-important icon=\"false\"}\n## Our goal\n\n* Produce a **point nowcast** for the finalized values of $y_t$.\n* Accompany with time-varying prediction intervals\n\n:::\n\n* We also have access to $p$ other time series \n$x_{ij},\\; i=1,\\ldots,t, \\; j = 1,\\ldots,p$\n\n* All may be subject to revisions.\n\n## Final slide {.smaller}\n\n### Thanks:\n\n\n\n\n\n- The whole [CMU Delphi Team](https://delphi.cmu.edu/about/team/) (across many institutions)\n- Optum/UnitedHealthcare, Change Healthcare.\n- Google, Facebook, Amazon Web Services.\n- Quidel, SafeGraph, Qualtrics.\n- Centers for Disease Control and Prevention.\n- Council of State and Territorial Epidemiologists\n\n\n::: {layout-row=1 fig-align=\"center\"}\n![](gfx/delphi.jpg){height=\"100px\"}\n![](gfx/berkeley.jpg){height=\"100px\"}\n![](gfx/cmu.jpg){height=\"100px\"}\n![](gfx/ubc.jpg){width=\"250px\"}\n![](gfx/stanford.jpg){width=\"250px\"}\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}