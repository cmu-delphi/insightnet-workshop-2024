{
  "hash": "45803e6dafcfc9324ed41552fa48a6fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntalk-title: \"Forecasting with `{epipredict}`\"\ntalk-short-title: \"Forecasting\"\ntalk-subtitle: \"InsightNet Forecasting Workshop 2024\"\nauthor: \"Daniel J. McDonald and Ryan J. Tibshirani\"\nother-authors: \"Alice Clime, Rachel Lobay, and Logan C. Brooks\"\nrepo-address: \"cmu-delphi/insightnet-workshop-2024\"\ntalk-date: \"12 December -- Afternoon\"\nformat: revealjs\n---\n\n---\n---\n\n\n\n\\DeclareMathOperator*{\\minimize}{minimize}\n\n\n\n\n\n\n\n\n\n\n\n::: flex\n::: w-20\n\n:::\n::: w-80\n## {{< meta talk-title >}} {background-image=\"gfx/cover-art-1.svg\" background-position=\"bottom\"}\n\n### {{< meta talk-subtitle >}}\n\n<br>\n\n#### {{< meta author >}} \n\n\n{{< meta other-authors >}}\n\n\n{{< meta talk-date >}}\n\n\n\n\n:::\n:::\n\n\n\n\n\n\n## Outline\n\n1. `{epipredict}`\n\n1. Pre-processing\n\n1. Fit and Predict with `arx_forecaster()`\n\n1. Customizing `arx_forecaster()`\n\n1. Forecasting with Versioned Data\n\n1. Building a Forecaster\n\n# `{epipredict}` \n\n## `{epipredict}` \n\n<https://cmu-delphi.github.io/epipredict>\n\n#### Installation \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Stable version\npak::pkg_install(\"cmu-delphi/epipredict@main\")\n# Development version\n# pak::pkg_install(\"cmu-delphi/epipredict@dev\")\n```\n:::\n\n\n\n\n\n## What `{epipredict}` provides (i)\n\nBasic and easy to use [\"canned\" forecasters]{.primary}: \n\n  * Baseline flat forecaster\n  \n  * Autoregressive forecaster (ARX)\n  \n  * Autoregressive classifier\n  \n  * CDC FluSight flatline forecaster\n  \n## What `{epipredict}` provides (ii)\n\n* A framework for creating [custom forecasters]{.primary} out of [modular]{.primary} components. \n\n* There are four types of components:\n\n  1. [Preprocessor]{.primary}: do things to the data before model training\n  \n  1. [Trainer]{.primary}: train a model on data, resulting in a fitted model object\n\n  1. [Predictor]{.primary}: make predictions, using a fitted model object\n\n  1. [Postprocessor]{.primary}: do things to the predictions before returning\n  \n  \n\n# Preprocessing\n\n## Examples of preprocessing{.smaller}\n\n::: {.fragment .fade-in-then-semi-out}\n\n### EDA type stuff\n\n1. Making locations/signals commensurate (scaling)\n1. Dealing with revisions \n1. Detecting and removing outliers\n1. Imputing or removing missing data\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n### Feature engineering\n\n1. Creating lagged predictors\n1. Day of Week effects\n1. Rolling averages for smoothing \n1. Lagged differences\n1. Growth rates instead of raw signals\n1. The sky's the limit\n\n:::\n\n## Get the data\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(epidatr)\nlibrary(epiprocess)\nlibrary(epipredict)\n\ncases <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"confirmed_incidence_num\",\n  time_type = \"day\",\n  geo_type = \"state\",\n  time_values = epirange(20200401, 20230401),\n  geo_values = \"*\") |>\n  select(geo_value, time_value, cases = value)\n\ndeaths <- pub_covidcast(\n  source = \"jhu-csse\",\n  signals = \"deaths_incidence_num\",\n  time_type = \"day\",\n  geo_type = \"state\",\n  time_values = epirange(20200401, 20230401),\n  geo_values = \"*\") |>\n  select(geo_value, time_value, deaths = value)\n```\n:::\n\n\n\n\n\n## Create an `epi_df`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- left_join(cases, deaths, by = c(\"time_value\", \"geo_value\")) |>\n  as_epi_df()\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `epi_df` object, 60,036 x 4 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2024-11-21 13:40:43.941989\n\n# A tibble: 60,036 × 4\n   geo_value time_value cases deaths\n * <chr>     <date>     <dbl>  <dbl>\n 1 ak        2020-04-01    13      0\n 2 al        2020-04-01   112      4\n 3 ar        2020-04-01    61      2\n 4 as        2020-04-01     0      0\n 5 az        2020-04-01   124      7\n 6 ca        2020-04-01  1254     29\n 7 co        2020-04-01  4655    388\n 8 ct        2020-04-01   429     16\n 9 dc        2020-04-01    91      0\n10 de        2020-04-01    49     10\n# ℹ 60,026 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Pre-processing: data scaling\n\nScale cases and deaths by population and multiply by 100K\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- left_join(\n  x = df,\n  y = state_census |> select(pop, abbr),   # state_census is available in epipredict\n  by = c(\"geo_value\" = \"abbr\")) |>\n    mutate(cases = cases / pop * 1e5, \n           deaths = deaths / pop * 1e5) |> \n    select(-pop)\n```\n:::\n\n\n\n\n## Scaled COVID cases and deaths \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf |> \n  filter(geo_value %in% c(\"ca\", \"ma\", \"ny\", \"tx\")) |>\n  autoplot(cases, deaths) \n```\n\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/autoplot-deaths-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Pre-processing: smoothing\n\nSmooth the data by computing 7-day averages of cases and deaths for each state\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- df |>\n  group_by(geo_value) |>\n  epi_slide(cases_7dav = mean(cases, na.rm = T),\n            deaths_7dav = mean(deaths, na.rm = T),\n            .window_size = 7) |>\n  ungroup() |>\n  select(!c(cases, deaths)) |>\n  rename(cases = cases_7dav, \n         deaths = deaths_7dav)\n```\n:::\n\n\n\n\n## Scaled and smoothed COVID cases deaths \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf |> \n  filter(geo_value %in% c(\"ca\", \"ma\", \"ny\", \"tx\")) |>\n  autoplot(cases, deaths) \n```\n\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/autoplot-7dav-deaths-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n## Pre-processing: fix outliers and negative values\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndetection_methods <- dplyr::bind_rows(\n  dplyr::tibble(method = \"rm\", args = list(list(detect_negatives = TRUE)), abbr = \"rm\")#,\n  #dplyr::tibble(method = \"stl\", args = list(list(detect_negatives = TRUE, seasonal_period = 7)),\n  #              abbr = \"stl_seasonal\")\n  )\n\ndeaths_outlr <- df |> \n  group_by(geo_value) |>\n  mutate(outlier_info = detect_outlr(x = time_value, \n                                     y = deaths, \n                                     methods = detection_methods, \n                                     combiner = \"median\"\n                                     )) |>\n  ungroup() |>\n  unnest(outlier_info)\n\ndf$deaths <- deaths_outlr$combined_replacement\n\ndeaths_outlr |>\n  filter(geo_value %in% c(\"ca\", \"ma\", \"ny\", \"tx\")) |> \n  ggplot(aes(x = time_value)) +\n  geom_line(aes(y = deaths), linetype = 2) +\n  geom_line(aes(y = combined_replacement, col = geo_value)) +\n  geom_hline(yintercept = 0, linetype = 3) +\n  facet_wrap(vars(geo_value), scales = \"free_y\") +\n  scale_color_viridis_d() +\n  labs(x = \"\", y = \"Covid-19 deaths per 100k people\")\n```\n\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/outliers-deaths-1.svg){fig-align='center'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n# Fit and Predict with `arx_forecaster`\n\n## Fit ARX on training set\n\n* Back to the [ARX(1)]{.primary} model for COVID deaths:\n$\\quad \\hat y_{t+28} = \\hat\\phi + \\hat\\phi_0 y_{t} + \\hat\\beta_0 x_{t}$\n\n* Only focus on California (for now)\n\n* Using `{epipredict}`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|7-13\"}\n# split into train and test \nca <- df |> filter(geo_value == \"ca\")\nt0_date <- as.Date('2021-04-01')\ntrain <- ca |> filter(time_value <= t0_date)\ntest <- ca |> filter(time_value > t0_date)\n\n# fit ARX\nepi_arx <- arx_forecaster(epi_data = train |> as_epi_df(), \n                          outcome = \"deaths\", \n                          predictors = c(\"cases\", \"deaths\"),\n                          trainer = linear_reg() |> set_engine(\"lm\"),\n                          args_list = arx_args_list(lags = 0, ahead = 28,\n                                                    quantile_levels = c(0.1, 0.9)))\n```\n:::\n\n\n\n\n## `arx_forecaster` output\n\n* A [fitted model]{.primary} object which can be used any time in the future to create forecasts (`$epi_workflow`).\n\n* A [forecast]{.primary} (point prediction + interval) \nfor 28 days after the last available time value in the data (`$predictions`).\n\n\n## `arx_forecaster` output\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepi_arx \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n══ A basic forecaster of type ARX Forecaster ═══════════════════════════════════\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis forecaster was fit on 2024-11-21 13:41:47.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTraining data was an <epi_df> with:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Geography: state,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Other keys: ,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Time type: day,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Using data up-to-date as of: 2024-11-21 13:40:43.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Predictions ─────────────────────────────────────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nA total of 1 prediction is available for\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• 1 unique geographic region,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• At forecast date: 2021-04-01,\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• For target date: 2021-04-29.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extract fitted object\n\n<div class=\"scrollable-output\">\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepi_arx$epi_workflow\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n══ Epi Workflow [trained] ══════════════════════════════════════════════════════\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPreprocessor: Recipe\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel: linear_reg()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPostprocessor: Frosting\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Preprocessor ────────────────────────────────────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n6 Recipe steps.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n1. step_epi_lag()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n2. step_epi_lag()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n3. step_epi_ahead()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n4. step_naomit()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n5. step_naomit()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n6. step_training_window()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Model ───────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nstats::lm(formula = ..y ~ ., data = data)\n\nCoefficients:\n (Intercept)   lag_0_cases  lag_0_deaths  \n    0.037694      0.009953      0.201329  \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Postprocessor ───────────────────────────────────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n5 Frosting layers.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n1. layer_predict()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n2. layer_residual_quantiles()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n3. layer_add_forecast_date()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n4. layer_add_target_date()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n5. layer_threshold()\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n## `$epi_workflow`\n\nContains information on \n\n* [Preprocessing]{.primary} steps automatically performed by `arx_forecaster` (e.g. compute lags of the predictors)\n\n* [Fitted model]{.primary} \n\n* [Postprocessing]{.primary} steps automatically performed by `arx_forecaster` (e.g. compute quantiles)\n\n## Extract predictions\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepi_arx$predictions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n  geo_value .pred        .pred_distn forecast_date target_date\n  <chr>     <dbl>             <dist> <date>        <date>     \n1 ca        0.109 quantiles(0.11)[2] 2021-04-01    2021-04-29 \n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-important icon=\"false\"}\n## Note \n\n`.pred_dstn` is actually a “distribution”, parameterized by its quantiles. \n:::\n\n\n## Extract predictions\n\nWe can extract the distribution into a “long” `epi_df`: \n\n* <span class=\"inner-list\"> one row per quantile </span>\n\n* <span class=\"inner-list\">`values` = value associated to that quantile</span>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nepi_arx$predictions |>\n  mutate(.pred_distn = nested_quantiles(.pred_distn)) |>  # create a \"nested\" list-column\n  unnest(.pred_distn)                                     # then unnest it\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  geo_value .pred values quantile_levels forecast_date target_date\n  <chr>     <dbl>  <dbl>           <dbl> <date>        <date>     \n1 ca        0.109 0.0684             0.1 2021-04-01    2021-04-29 \n2 ca        0.109 0.150              0.9 2021-04-01    2021-04-29 \n```\n\n\n:::\n:::\n\n\n\n\n\n## Predict with fitted ARX (split-sample)\n\n* `arx_forecaster` fits a model to the training set, and outputs only one prediction (for time $t_0+h$).\n\n* To get [predictions]{.primary} for the [test]{.primary} set:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredict(epi_arx$epi_workflow, test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `epi_df` object, 707 x 6 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2024-11-21 13:40:43.941989\n\n# A tibble: 707 × 6\n   geo_value time_value  .pred        .pred_distn forecast_date target_date\n * <chr>     <date>      <dbl>             <dist> <date>        <date>     \n 1 ca        2021-04-02 0.106  quantiles(0.11)[2] 2021-04-01    2021-04-29 \n 2 ca        2021-04-03 0.101   quantiles(0.1)[2] 2021-04-01    2021-04-29 \n 3 ca        2021-04-04 0.0984  quantiles(0.1)[2] 2021-04-01    2021-04-29 \n 4 ca        2021-04-05 0.100   quantiles(0.1)[2] 2021-04-01    2021-04-29 \n 5 ca        2021-04-06 0.0993  quantiles(0.1)[2] 2021-04-01    2021-04-29 \n 6 ca        2021-04-07 0.0976  quantiles(0.1)[2] 2021-04-01    2021-04-29 \n 7 ca        2021-04-08 0.0975  quantiles(0.1)[2] 2021-04-01    2021-04-29 \n 8 ca        2021-04-09 0.0979  quantiles(0.1)[2] 2021-04-01    2021-04-29 \n 9 ca        2021-04-10 0.104   quantiles(0.1)[2] 2021-04-01    2021-04-29 \n10 ca        2021-04-11 0.106  quantiles(0.11)[2] 2021-04-01    2021-04-29 \n# ℹ 697 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Predict with ARX (when re-fitting)\n\nIn practice, if we want to [re-train]{.primary} the forecasters as [new data]{.primary} arrive,\nwe fit and predict combining `arx_forecaster` with `epi_slide`.\n\n\n## Predict with ARX (re-fitting on trailing window)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nh <- 28         #horizon\nw <- 120 + h    #trailing window length\nn <- nrow(ca)   #time-series length\n\n# Specify the forecast dates\nfc_time_values <- seq(from = t0_date, to = ca$time_value[n]-h, by = \"1 day\")\n\n# Slide the arx_forecaster \npred_arx <- ca |>\n  epi_slide(\n    ~ arx_forecaster(epi_data = .x,\n                     outcome = \"deaths\", \n                     predictors = c(\"cases\", \"deaths\"), \n                     trainer = linear_reg() |> set_engine(\"lm\"),\n                     args_list = arx_args_list(lags = 0, ahead = h,\n                                               quantile_levels = c(0.1, 0.9))\n                     )$predictions |>\n        pivot_quantiles_wider(.pred_distn),\n  .window_size = w, \n  .ref_time_values = fc_time_values\n)\n```\n:::\n\n\n\n\n## Predict with ARX \n\n::: {.callout-important icon=\"false\"}\n## Note (window length)\n\nWe set $w = 120 + h$ to match the window size of the ARX model we fitted manually.\nPreviously, when considering a window from $t-w$ to $t$, \nwe had access to all outcomes in that window, and to all predictors between \n$t-w-h$ and $t-h$. \n(That's because we lagged $x$ before applying the window.) \nSo we were \"cheating\" by saying that \nthe trailing window had length $w=120$, as its actual size was $120+h$! \n:::\n  \n::: {.callout-important icon=\"false\"}\n## Note (all past)\n\nThe method [fitting on all past data]{.primary} up to the forecasting date can be \nimplemented by setting:\n\n`.window_size = Inf` in `epi_slide`.\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n\n## Predict with ARX (re-fitting on trailing window)\n\n<div class=\"large-output\">\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npred_arx \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `epi_df` object, 680 x 9 with metadata:\n* geo_type  = state\n* time_type = day\n* as_of     = 2024-11-21 13:40:43.941989\n\n# A tibble: 680 × 9\n# Groups:   geo_value [1]\n   geo_value time_value cases deaths .pred forecast_date target_date  `0.1`\n * <chr>     <date>     <dbl>  <dbl> <dbl> <date>        <date>       <dbl>\n 1 ca        2021-04-01  3.39  0.187 0.166 2021-04-01    2021-04-29  0.109 \n 2 ca        2021-04-02  3.46  0.170 0.166 2021-04-02    2021-04-30  0.110 \n 3 ca        2021-04-03  3.40  0.146 0.162 2021-04-03    2021-05-01  0.108 \n 4 ca        2021-04-04  3.25  0.141 0.161 2021-04-04    2021-05-02  0.103 \n 5 ca        2021-04-05  3.44  0.142 0.162 2021-04-05    2021-05-03  0.0992\n 6 ca        2021-04-06  3.49  0.134 0.161 2021-04-06    2021-05-04  0.0988\n 7 ca        2021-04-07  3.46  0.126 0.160 2021-04-07    2021-05-05  0.0962\n 8 ca        2021-04-08  3.49  0.125 0.159 2021-04-08    2021-05-06  0.0952\n 9 ca        2021-04-09  3.53  0.124 0.158 2021-04-09    2021-05-07  0.0948\n10 ca        2021-04-10  4.17  0.123 0.163 2021-04-10    2021-05-08  0.100 \n# ℹ 670 more rows\n# ℹ 1 more variable: `0.9` <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n## Predict with ARX (re-fitting on trailing window)\n\n\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/arx-plot-cv-predictions-1.svg){fig-align='left'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n                                 MAE     MASE\ntime series CV + trailing 0.03707981 796.6647\n```\n\n\n:::\n:::\n\n\n\n\n\n# Customizing `arx_forecaster`\n\n## Simple adjustments\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\narx_forecaster(epi_data = train |> as_epi_df(), \n               outcome = \"deaths\", \n               predictors = c(\"cases\", \"deaths\"),\n               trainer = linear_reg() |> set_engine(\"lm\"),\n               args_list = arx_args_list(lags = 0, ahead = 28,\n                                         quantile_levels = c(0.1, 0.9)))\n```\n:::\n\n\n\n\n::: {.fragment .fade-in}\n* Modify `predictors` to add/drop predictors \n\n  * <span class=\"inner-list\">e.g. drop `deaths` for regression with a \n  lagged predictor, or drop `cases` to get AR model</span>\n\n  * <span class=\"inner-list\">default: `predictors = outcome`</span>\n\n:::  \n  \n## Simple adjustments\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\narx_forecaster(epi_data = train |> as_epi_df(), \n               outcome = \"deaths\", \n               predictors = c(\"cases\", \"deaths\"),\n               trainer = linear_reg() |> set_engine(\"lm\"),\n               args_list = arx_args_list(lags = 0, ahead = 28,\n                                         quantile_levels = c(0.1, 0.9)))\n```\n:::\n\n\n\n\n* Modify `trainer` to use a model that is not `lm` (default)\n\n  * <span class=\"inner-list\"> e.g. `trainer = quantile_reg()`</span>\n  \n  * <span class=\"inner-list\">can use any `{parsnip}` models, \n  see [list](https://www.tidymodels.org/find/parsnip/)</span>\n  \n   \n\n\n## Simple adjustments\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"5-6\"}\narx_forecaster(epi_data = train |> as_epi_df(), \n               outcome = \"deaths\", \n               predictors = c(\"cases\", \"deaths\"),\n               trainer = linear_reg() |> set_engine(\"lm\"),\n               args_list = arx_args_list(lags = 0, ahead = 28,\n                                         quantile_levels = c(0.1, 0.9)))\n```\n:::\n\n\n\n\n* Modify `arx_args_list` to change lags, horizon, quantile levels, ...\n\n::: {.fragment .fade-in}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narx_args_list(\n  lags = c(0L, 7L, 14L),\n  ahead = 7L,\n  n_training = Inf,\n  forecast_date = NULL,\n  target_date = NULL,\n  adjust_latency = c(\"none\", \"extend_ahead\", \"extend_lags\", \"locf\"),\n  warn_latency = TRUE,\n  quantile_levels = c(0.05, 0.95),\n  symmetrize = TRUE,\n  nonneg = TRUE,\n  quantile_by_key = character(0L),\n  check_enough_data_n = NULL,\n  check_enough_data_epi_keys = NULL,\n  ...\n)\n```\n:::\n\n\n\n:::\n\n## Modifying the ARX forecaster\n\n### Add hospitalizations as a predictor\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhhs <- pub_covidcast(\n  source = \"hhs\",\n  signals = \"confirmed_admissions_covid_1d_prop_7dav\",\n  time_type = \"day\",\n  geo_type = \"state\",\n  time_values = epirange(20200401, 20230401),\n  geo_values = \"*\") |>\n  select(geo_value, time_value, hospitalizations = value)\n\ndf_extend <- left_join(df, hhs, by = c(\"time_value\", \"geo_value\")) |>\n  as_epi_df() \n\nca_extend <- df_extend |> filter(geo_value == \"ca\")\n```\n:::\n\n\n\n\n## Modifying the ARX forecaster\n\n### Add hospitalizations as a predictor\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\n# Specify the forecast dates\nn = nrow(ca_extend)\nfc_time_values <- seq(from = t0_date, to = ca_extend$time_value[n]-h, by = \"1 day\")\n\n# Slide the arx_forecaster \npred_arx_hosp <- ca_extend |>\n  epi_slide(\n    ~ arx_forecaster(epi_data = .x,\n                     outcome = \"deaths\", \n                     predictors = c(\"cases\", \"deaths\", \"hospitalizations\"), \n                     trainer = linear_reg() |> set_engine(\"lm\"),\n                     args_list = arx_args_list(lags = 0, ahead = 28,\n                                               quantile_levels = c(0.1, 0.9))\n                     )$predictions |>\n        pivot_quantiles_wider(.pred_distn),\n  .window_size = w, \n  .ref_time_values = fc_time_values\n)\n```\n:::\n\n\n\n\n## Predictions (hospitalizations added as a predictor)\n\n\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/arx-with-hospital-plot-1.svg){fig-align='left'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n                                 MAE     MASE\ntime series CV + trailing 0.03445943 740.3657\n```\n\n\n:::\n:::\n\n\n\n\n\n## Modifying the ARX forecaster\n\n### Add more lags\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"8-11\"}\npred_arx_more_lags <- ca_extend |>\n  epi_slide(\n    ~ arx_forecaster(epi_data = .x,\n                     outcome = \"deaths\", \n                     predictors = c(\"cases\", \"deaths\", \"hospitalizations\"), \n                     trainer = linear_reg() |> set_engine(\"lm\"),\n                     args_list = arx_args_list(\n                       lags = list(\n                         cases = c(0:4, 7, 14), \n                         deaths = c(0, 7, 14), \n                         hospitalizations = c(0:7, 14)),\n                       ahead = 28,\n                       quantile_levels = c(0.1, 0.9))\n                     )$predictions |>\n        pivot_quantiles_wider(.pred_distn),\n  .window_size = w, \n  .ref_time_values = fc_time_values\n)\n```\n:::\n\n\n\n\n## Predictions (more lags)\n\n\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/arx-with-more-lags-plot-1.svg){fig-align='left'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n                                MAE     MASE\ntime series CV + trailing 0.1098031 2359.134\n```\n\n\n:::\n:::\n\n\n\n\n\n## Modifying the ARX forecaster\n\n### Change trainer\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\npred_arx_rf <- ca_extend |>\n  epi_slide(\n    ~ arx_forecaster(epi_data = .x,\n                     outcome = \"deaths\", \n                     predictors = c(\"cases\", \"deaths\", \"hospitalizations\"), \n                     trainer = parsnip::rand_forest(mode = \"regression\"),\n                     args_list = arx_args_list(lags = list(\n                       cases = c(0:4, 7, 14), \n                       deaths = c(0, 7, 14), \n                       hospitalizations = c(0:7, 14)),\n                       ahead = 28,\n                       quantile_levels = c(0.1, 0.9))\n                     )$predictions |>\n        pivot_quantiles_wider(.pred_distn),\n  .window_size = w, \n  .ref_time_values = fc_time_values\n)\n```\n:::\n\n\n\n\n## Predictions (trained using random forest)\n\n\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/arx-with-random-forests-plot-1.svg){fig-align='left'}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n                                 MAE    MASE\ntime series CV + trailing 0.02745191 589.808\n```\n\n\n:::\n:::\n\n\n\n\n\n## Modifying the ARX forecaster\n\n### Geo-pooling\n\n## Modifying the ARX forecaster\n\n### Multiple horizon\n\n# Forecasting with Versioned Data\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n## Versioned data\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nus_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n→ An `epi_archive` object, with metadata:\nℹ Min/max time values: 2020-04-01 / 2023-01-31\nℹ First/last version with update: 2021-04-01 / 2023-02-01\nℹ Versions end: 2023-02-01\nℹ A preview of the table (92197 rows x 5 columns):\nKey: <geo_value, time_value, version>\n          version time_value geo_value     cases     deaths\n           <Date>     <Date>    <char>     <num>      <num>\n    1: 2021-04-01 2020-04-01        ak        NA         NA\n    2: 2021-04-01 2020-04-02        ak        NA         NA\n    3: 2021-04-01 2020-04-03        ak        NA         NA\n    4: 2021-04-01 2020-04-04        ak        NA         NA\n    5: 2021-04-01 2020-04-05        ak        NA         NA\n   ---                                                     \n92193: 2023-02-01 2023-01-27        wy   4.61203 0.17172453\n92194: 2023-02-01 2023-01-28        wy   4.61203 0.17172453\n92195: 2023-02-01 2023-01-29        wy   4.61203 0.17172453\n92196: 2023-02-01 2023-01-30        wy   4.61203 0.17172453\n92197: 2023-02-01 2023-01-31        wy -14.74378 0.04906416\n```\n\n\n:::\n:::\n\n\n\n\n## Version-aware forecasting with geo-pooling\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|5-17\"}\nforecast_dates <- seq(from = t0_date, to = as.Date(\"2023-02-01\"), by = \"1 month\")\nh <- c(7, 14, 21, 28)\n\nforecast_k_days_ahead <- function(epi_archive, forecast_dates, ahead = 7) {\n  epi_archive |>\n    epix_slide(\n      ~ arx_forecaster(\n        .x, \n        outcome = \"deaths\", \n        predictors = c(\"cases\", \"deaths\"),\n        trainer = linear_reg() |> set_engine(\"lm\"),\n        args_list = arx_args_list(lags = 0, ahead = ahead,\n                                  quantile_levels = c(0.1, 0.9))\n      )$predictions |> pivot_quantiles_wider(.pred_distn),\n      .before = 120,\n      .versions = forecast_dates\n    )\n}\n\nforecasts <- bind_rows(map(h, ~ forecast_k_days_ahead(us_data, forecast_dates, ahead = .x)))\n```\n:::\n\n\n\n\n## Version-aware forecasting with geo-pooling\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](day2-afternoon_files/figure-revealjs/plot-version-aware-1.svg){fig-align='center'}\n:::\n:::\n\n\n\n\n# Building a forecaster\n\n## Philosophy of forecasting\n\n::: {.fragment .fade-in-then-semi-out}\n\nWe should build up modular components\n\nBe able to add/remove layers of complexity sequentially\n\n:::\n\n::: {.fragment .fade-in-then-semi-out}\n\n  1. [Preprocessor]{.primary}: do things to the data before model training\n  \n  1. [Trainer]{.primary}: train a model on data, resulting in a fitted model object\n\n  1. [Predictor]{.primary}: make predictions, using a fitted model object\n\n  1. [Postprocessor]{.primary}: do things to the predictions before returning\n  \n:::\n\n## Fit a forecaster from scratch\n\nSo far, we performed some [manual pre-processing]{.primary}, and then relied on a [canned forecaster]{.primary}\nto automatically perform [more pre-processing]{.primary}, [training]{.primary}, [predicting]{.primary}, and [post-processing]{.primary}.\n\n\n::: {.callout-important icon=\"false\"}\n## \nWhat if we want more direct control on each single step?\n\n:::\n\n## Fit a forecaster from scratch\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1-6|8-9|11-16|18-20|21-29\"}\n# A preprocessing \"recipe\" that turns raw data into features / response\nr <- epi_recipe(ca) |>\n  step_epi_lag(cases, lag = c(0, 7, 14)) |>\n  step_epi_lag(deaths, lag = c(0, 7, 14)) |>\n  step_epi_ahead(deaths, ahead = 28) |>\n  step_epi_naomit()\n\n# Training engine\ne <- quantile_reg(quantile_levels = c(.1, .5, .9))\n\n# A postprocessing routine describing what to do to the predictions\nf <- frosting() |>\n  layer_predict() |>\n  layer_threshold(.pred, lower = 0) |> # predictions / intervals should be non-negative\n  layer_add_target_date() |>\n  layer_add_forecast_date()\n\n# Bundle up the preprocessor, training engine, and postprocessor\n# We use quantile regression\newf <- epi_workflow(r, e, f)\n\n# Fit it to data (we could fit this to ANY data that has the same format)\ntrained_ewf <- ewf |> fit(ca)\n\n# examines the recipe to determine what we need to make the prediction\nlatest <- get_test_data(r, ca)\n\n# we could make predictions using the same model on ANY test data\npreds <- trained_ewf |> predict(new_data = latest)\n```\n:::\n\n\n\n\n\n## Thanks:\n\n\n\n\n\n\n\n\n\n- The whole [CMU Delphi Team](https://delphi.cmu.edu/about/team/) (across many institutions)\n- Optum/UnitedHealthcare, Change Healthcare.\n- Google, Facebook, Amazon Web Services.\n- Quidel, SafeGraph, Qualtrics.\n- Centers for Disease Control and Prevention.\n- Council of State and Territorial Epidemiologists\n\n\n::: {layout-row=1 fig-align=\"center\"}\n![](gfx/delphi.jpg){height=\"100px\"}\n![](gfx/berkeley.jpg){height=\"100px\"}\n![](gfx/cmu.jpg){height=\"100px\"}\n![](gfx/ubc.jpg){width=\"250px\"}\n![](gfx/stanford.jpg){width=\"250px\"}\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}