---
talk-title: "Forecasting with `{epipredict}`"
talk-short-title: "Forecasting"
talk-subtitle: "InsightNet Forecasting Workshop 2024"
talk-date: "12 December -- Afternoon"
format: revealjs
---


{{< include _titleslide.qmd >}}



## Outline

1. `{epipredict}`

1. Pre-processing

1. Fit and Predict with `arx_forecaster()`

1. Customizing `arx_forecaster()`

1. Forecasting with Versioned Data

1. Building a Forecaster

1. A Flu Forecaster

# `{epipredict}` 

## `{epipredict}` 

<https://cmu-delphi.github.io/epipredict>

#### Installation 

```{r install, eval=FALSE}
#| echo: true
# Stable version
pak::pkg_install("cmu-delphi/epipredict@main")
# Development version
# pak::pkg_install("cmu-delphi/epipredict@dev")
```


## What `{epipredict}` provides (i)

Basic and easy to use ["canned" forecasters]{.primary}: 

  * Baseline flat forecaster
  
  * Autoregressive forecaster (ARX)
  
  * Autoregressive classifier
  
  * CDC FluSight flatline forecaster
  
## What `{epipredict}` provides (ii)

* A framework for creating [custom forecasters]{.primary} out of [modular]{.primary} components. 

* There are four types of components:

  1. [Preprocessor]{.primary}: do things to the data before model training
  
  1. [Trainer]{.primary}: train a model on data, resulting in a fitted model object

  1. [Predictor]{.primary}: make predictions, using a fitted model object

  1. [Postprocessor]{.primary}: do things to the predictions before returning
  
  

# Pre-processing

## Examples of pre-processing{.smaller}

::: {.fragment .fade-in-then-semi-out}

### EDA type stuff

1. Making locations/signals commensurate (scaling)
1. Dealing with revisions 
1. Detecting and removing outliers
1. Imputing or removing missing data

:::

::: {.fragment .fade-in-then-semi-out}

### Feature engineering

1. Creating lagged predictors
1. Day of Week effects
1. Rolling averages for smoothing 
1. Lagged differences
1. Growth rates instead of raw signals
1. The sky's the limit

:::

## Get the data

```{r get-data}
#| echo: true
library(epidatr)
library(epiprocess)
library(epipredict)

cases <- pub_covidcast(
  source = "jhu-csse",
  signals = "confirmed_incidence_num",
  time_type = "day",
  geo_type = "state",
  time_values = epirange(20200401, 20230401),
  geo_values = "*") |>
  select(geo_value, time_value, cases = value)

deaths <- pub_covidcast(
  source = "jhu-csse",
  signals = "deaths_incidence_num",
  time_type = "day",
  geo_type = "state",
  time_values = epirange(20200401, 20230401),
  geo_values = "*") |>
  select(geo_value, time_value, deaths = value)
```


## Create an `epi_df`

```{r epi-df}
#| echo: true
df <- left_join(cases, deaths, by = c("time_value", "geo_value")) |>
  as_epi_df()

df
```

## Pre-processing: data scaling

Scale cases and deaths by population and multiply by 100K

```{r scale-data}
#| echo: true
df <- left_join(
  x = df,
  y = state_census |> select(pop, abbr),   # state_census is available in epipredict
  by = c("geo_value" = "abbr")) |>
    mutate(cases = cases / pop * 1e5, 
           deaths = deaths / pop * 1e5) |> 
    select(-pop)
```


## Scaled COVID cases and deaths 

```{r autoplot-deaths}
#| echo: true
#| code-fold: true
#| fig-width: 10
#| fig-height: 5
df |> 
  filter(geo_value %in% c("ca", "ma", "ny", "tx")) |>
  autoplot(cases, deaths) 
```

## Pre-processing: smoothing

Smooth the data by computing 7-day averages of cases and deaths for each state

```{r 7dav-data}
#| echo: true
df <- df |>
  group_by(geo_value) |>
  epi_slide(cases_7dav = mean(cases, na.rm = T),
            deaths_7dav = mean(deaths, na.rm = T),
            .window_size = 7) |>
  ungroup() |>
  select(!c(cases, deaths)) |>
  rename(cases = cases_7dav, 
         deaths = deaths_7dav)
```

## Scaled and smoothed COVID cases deaths 

```{r autoplot-7dav-deaths}
#| echo: true
#| code-fold: true
#| fig-width: 10
#| fig-height: 5
df |> 
  filter(geo_value %in% c("ca", "ma", "ny", "tx")) |>
  autoplot(cases, deaths) 
```

## Pre-processing: fix outliers and negative values

```{r outliers-deaths}
#| echo: true
#| code-fold: true
#| fig-width: 10
#| fig-height: 5
detection_methods <- dplyr::bind_rows(
  dplyr::tibble(method = "rm", args = list(list(detect_negatives = TRUE)), abbr = "rm")#,
  #dplyr::tibble(method = "stl", args = list(list(detect_negatives = TRUE, seasonal_period = 7)),
  #              abbr = "stl_seasonal")
  )

deaths_outlr <- df |> 
  group_by(geo_value) |>
  mutate(outlier_info = detect_outlr(x = time_value, 
                                     y = deaths, 
                                     methods = detection_methods, 
                                     combiner = "median"
                                     )) |>
  ungroup() |>
  unnest(outlier_info)

deaths_outlr |>
  filter(geo_value %in% c("ca", "ma", "ny", "tx")) |> 
  ggplot(aes(x = time_value)) +
  geom_line(aes(y = deaths), linetype = 2) +
  geom_line(aes(y = combined_replacement, col = geo_value)) +
  geom_hline(yintercept = 0, linetype = 3) +
  facet_wrap(vars(geo_value), scales = "free_y") +
  scale_color_viridis_d() +
  labs(x = "", y = "Covid-19 deaths per 100k people")
```

```{r outlier-cases}
cases_outlr <- df |> 
  group_by(geo_value) |>
  mutate(outlier_info = detect_outlr(x = time_value, 
                                     y = cases, 
                                     methods = detection_methods, 
                                     combiner = "median"
                                     )) |>
  ungroup() |>
  unnest(outlier_info)

df$deaths <- deaths_outlr$combined_replacement
df$cases <- cases_outlr$combined_replacement
```

# Fit and Predict with `arx_forecaster`

## Fit ARX on training set

* Back to the [ARX(1)]{.primary} model for COVID deaths:
$\quad \hat y_{t+28} = \hat\phi + \hat\phi_0 y_{t} + \hat\beta_0 x_{t}$

* Only focus on California (for now)

* Using `{epipredict}`

```{r epipredict-arx}
#| echo: true
#| code-line-numbers: "|7-13"
# split into train and test 
ca <- df |> filter(geo_value == "ca")
t0_date <- as.Date('2021-04-01')
train <- ca |> filter(time_value <= t0_date)
test <- ca |> filter(time_value > t0_date)

# fit ARX
epi_arx <- arx_forecaster(epi_data = train |> as_epi_df(), 
                          outcome = "deaths", 
                          predictors = c("cases", "deaths"),
                          trainer = linear_reg() |> set_engine("lm"),
                          args_list = arx_args_list(lags = 0, ahead = 28,
                                                    quantile_levels = c(0.1, 0.9)))
```

## `arx_forecaster` output

* A [fitted model]{.primary} object which can be used any time in the future to create forecasts (`$epi_workflow`).

* A [forecast]{.primary} (point prediction + interval) 
for 28 days after the last available time value in the data (`$predictions`).


## `arx_forecaster` output

```{r output-arx, message=TRUE}
#| echo: true
epi_arx 
```


## Extract fitted object

<div class="scrollable-output">

```{r epi-workflow-arx, message=TRUE}
#| echo: true
epi_arx$epi_workflow
```

</div>

## `$epi_workflow`

Contains information on 

* [Pre-processing]{.primary} steps automatically performed by `arx_forecaster` (e.g. compute lags of the predictors)

* [Fitted model]{.primary} 

* [Post-processing]{.primary} steps automatically performed by `arx_forecaster` (e.g. compute quantiles)

## Extract predictions

```{r epi-pred-arx}
#| echo: true
epi_arx$predictions
```

::: {.callout-important icon="false"}
## Note 

`.pred_dstn` is actually a “distribution”, parameterized by its quantiles. 
:::


## Extract predictions

We can extract the distribution into a “long” `epi_df`

```{r epi-pred-quantile-longer}
#| echo: true
epi_arx$predictions |>
  pivot_quantiles_longer(.pred_distn)
```

or into a "wide" `epi_df`

```{r epi-pred-quantile-wider}
#| echo: true
epi_arx$predictions |>
  pivot_quantiles_wider(.pred_distn)
```


## Predict with fitted ARX (split-sample)

* `arx_forecaster` fits a model to the training set, and outputs only one prediction (for time $t_0+h$).

* To get [predictions]{.primary} for the [test]{.primary} set:

```{r arx-test-predict}
#| echo: true
predict(epi_arx$epi_workflow, test)
```

## Predict with ARX (when re-fitting)

In practice, if we want to [re-train]{.primary} the forecasters as [new data]{.primary} arrive,
we fit and predict combining `arx_forecaster` with `epi_slide`.


## Predict with ARX (re-fitting on trailing window)

```{r epipredict-cv-trailing}
#| echo: true
h <- 28         #horizon
w <- 120 + h    #trailing window length
n <- nrow(ca)   #time-series length

# Specify the forecast dates
fc_time_values <- seq(from = t0_date, to = ca$time_value[n]-h, by = "1 day")

# Slide the arx_forecaster 
pred_arx <- ca |>
  epi_slide(
    ~ arx_forecaster(epi_data = .x,
                     outcome = "deaths", 
                     predictors = c("cases", "deaths"), 
                     trainer = linear_reg() |> set_engine("lm"),
                     args_list = arx_args_list(lags = 0, ahead = h,
                                               quantile_levels = c(0.1, 0.9))
                     )$predictions |>
        pivot_quantiles_wider(.pred_distn),
  .window_size = w, 
  .ref_time_values = fc_time_values
)
```

## Predict with ARX 

::: {.callout-important icon="false"}
## Note (window length)

We set $w = 120 + h$ to match the window size of the ARX model we fitted manually.
Previously, when considering a window from $t-w$ to $t$, 
we had access to all outcomes in that window, and to all predictors between 
$t-w-h$ and $t-h$. 
(That's because we lagged $x$ before applying the window.) 
So we were "cheating" by saying that 
the trailing window had length $w=120$, as its actual size was $120+h$! 
:::
  
::: {.callout-important icon="false"}
## Note (all past)

The method [fitting on all past data]{.primary} up to the forecasting date can be 
implemented by setting:

`.window_size = Inf` in `epi_slide`.
:::

```{r epipredict-cv, eval=FALSE}
# slide an arx_forecaster with appropriate outcome, predictions and lags
epi_pred <- epi_slide(
  ca, 
  ~ arx_forecaster(epi_data = .x,
                   outcome = "deaths", 
                   predictors = c("cases", "deaths"), 
                   trainer = linear_reg() |> set_engine("lm"),
                   args_list = arx_args_list(lags = 0, ahead = h,
                                             quantile_levels = c(0.1, 0.9))
                   )$predictions,
  .window_size = Inf, 
  .ref_time_values = fc_time_values
)
```


## Predict with ARX (re-fitting on trailing window)

<div class="large-output">

```{r epipredict-cv-trailing-head}
#| echo: true
pred_arx 
```

</div>

## Predict with ARX (re-fitting on trailing window)

```{r arx-plot-cv-predictions}
#| fig-align: left
ca |> 
  full_join(pred_arx |> select(!c(cases, deaths, time_value)), 
            join_by(time_value == target_date, geo_value == geo_value)) |>
  mutate(observed = deaths, 
         predicted = .pred) |>
  pivot_longer(cols = c(observed, predicted), names_to = 'Deaths') |>
  ggplot(aes(time_value, value)) +
  geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`), alpha = .3, fill = "#00BFC4") +
  geom_line(aes(col = Deaths, alpha = ifelse(time_value > t0_date, 1, .5))) + 
  geom_vline(xintercept = t0_date) +    
  geom_vline(xintercept = t0_date + h, lty = 2) +
  labs(x = "", y = "Deaths per 100k people") +
  theme(legend.position = "bottom", legend.title = element_blank()) +
  scale_alpha_identity()
```

```{r function errors}
MSE <- function(truth, prediction) {
  mean((truth - prediction)^2)}

MAE <- function(truth, prediction) {
  mean(abs(truth - prediction))}

MAPE <- function(truth, prediction) {
  100 * mean(abs(truth - prediction) / truth)}

MASE <- function(truth, prediction) {
  100 * MAE(truth, prediction) / mean(abs(diff(truth)))}

getErrors <- function(truth, prediction, type) {
  return(data.frame(#"MSE" = MSE(truth, prediction), 
                    "MAE"= MAE(truth, prediction), 
                    #"MAPE" = MAPE(truth, prediction), 
                    "MASE" = MASE(truth, prediction), 
                    row.names = type))
}
```

```{r error-arx}
test_h <- test[-(1:h-1), ] 
getErrors(test_h$deaths, pred_arx$.pred, "time series CV + trailing")
```


# Customizing `arx_forecaster`

## Simple adjustments

```{r print-model-1}
#| echo: true
#| eval: false
#| code-line-numbers: "|3"
arx_forecaster(epi_data = train |> as_epi_df(), 
               outcome = "deaths", 
               predictors = c("cases", "deaths"),
               trainer = linear_reg() |> set_engine("lm"),
               args_list = arx_args_list(lags = 0, ahead = 28,
                                         quantile_levels = c(0.1, 0.9)))
```

::: {.fragment .fade-in}
* Modify `predictors` to add/drop predictors 

  * <span class="inner-list">e.g. drop `deaths` for regression with a 
  lagged predictor, or drop `cases` to get AR model</span>

  * <span class="inner-list">default: `predictors = outcome`</span>

:::  
  
## Simple adjustments

```{r print-model-2}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
arx_forecaster(epi_data = train |> as_epi_df(), 
               outcome = "deaths", 
               predictors = c("cases", "deaths"),
               trainer = linear_reg() |> set_engine("lm"),
               args_list = arx_args_list(lags = 0, ahead = 28,
                                         quantile_levels = c(0.1, 0.9)))
```

* Modify `trainer` to use a model that is not `lm` (default)

  * <span class="inner-list"> e.g. `trainer = quantile_reg()`</span>
  
  * <span class="inner-list">can use any `{parsnip}` models, 
  see [list](https://www.tidymodels.org/find/parsnip/)</span>
  
   


## Simple adjustments

```{r print-model-3}
#| echo: true
#| eval: false
#| code-line-numbers: "5-6"
arx_forecaster(epi_data = train |> as_epi_df(), 
               outcome = "deaths", 
               predictors = c("cases", "deaths"),
               trainer = linear_reg() |> set_engine("lm"),
               args_list = arx_args_list(lags = 0, ahead = 28,
                                         quantile_levels = c(0.1, 0.9)))
```

* Modify `arx_args_list` to change lags, horizon, quantile levels, ...

::: {.fragment .fade-in}
```{r arx_args_list}
#| echo: true
#| eval: false
arx_args_list(
  lags = c(0L, 7L, 14L),
  ahead = 7L,
  n_training = Inf,
  forecast_date = NULL,
  target_date = NULL,
  adjust_latency = c("none", "extend_ahead", "extend_lags", "locf"),
  warn_latency = TRUE,
  quantile_levels = c(0.05, 0.95),
  symmetrize = TRUE,
  nonneg = TRUE,
  quantile_by_key = character(0L),
  check_enough_data_n = NULL,
  check_enough_data_epi_keys = NULL,
  ...
)
```
:::

## Modifying the ARX forecaster

### Change predictors: hospitalizations instead of cases

```{r get-hhs-data}
#| echo: true
hhs <- pub_covidcast(
  source = "hhs",
  signals = "confirmed_admissions_covid_1d_prop_7dav",
  time_type = "day",
  geo_type = "state",
  time_values = epirange(20200401, 20230401),
  geo_values = "*") |>
  select(geo_value, time_value, hospitalizations = value)

df_extend <- left_join(df, hhs, by = c("time_value", "geo_value")) |>
  as_epi_df() 

ca_extend <- df_extend |> filter(geo_value == "ca")
```

## Modifying the ARX forecaster

### Change predictors: hospitalizations instead of cases

```{r arx-with-hospital}
#| echo: true
#| code-line-numbers: "10"
# Specify the forecast dates
n = nrow(ca_extend)
fc_time_values <- seq(from = t0_date, to = ca_extend$time_value[n]-h, by = "1 day")

# Slide the arx_forecaster 
pred_arx_hosp <- ca_extend |>
  epi_slide(
    ~ arx_forecaster(epi_data = .x,
                     outcome = "deaths", 
                     predictors = c("deaths", "hospitalizations"), 
                     trainer = linear_reg() |> set_engine("lm"),
                     args_list = arx_args_list(lags = 0, ahead = 28,
                                               quantile_levels = c(0.1, 0.9))
                     )$predictions |>
        pivot_quantiles_wider(.pred_distn),
  .window_size = w, 
  .ref_time_values = fc_time_values
)
```

## Predictions (hospitalizations instead of cases in predictor set)

```{r arx-with-hospital-plot}
#| fig-align: left
ca_extend |> 
  full_join(pred_arx_hosp |> select(!c(cases, deaths, time_value)), 
            join_by(time_value == target_date, geo_value == geo_value)) |>
  mutate(observed = deaths, 
         predicted = .pred) |>
  pivot_longer(cols = c(observed, predicted), names_to = 'Deaths') |>
  ggplot(aes(time_value, value)) +
  geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`), alpha = .3, fill = "#00BFC4") +
  geom_line(aes(col = Deaths, alpha = ifelse(time_value > t0_date, 1, .5))) + 
  geom_vline(xintercept = t0_date) +    
  geom_vline(xintercept = t0_date + h, lty = 2) +
  labs(x = "", y = "Deaths per 100k people") +
  theme(legend.position = "bottom", legend.title = element_blank()) +
  scale_alpha_identity()
```

```{r error-arx-with-hospital}
getErrors((ca_extend |> filter(time_value %in% pred_arx_hosp$target_date))$deaths,
          pred_arx_hosp$.pred, "")
```


## Modifying the ARX forecaster

### Add more lags

```{r arx-with-more-lags}
#| echo: true
#| code-line-numbers: "8"
pred_arx_more_lags <- ca_extend |>
  epi_slide(
    ~ arx_forecaster(epi_data = .x,
                     outcome = "deaths", 
                     predictors = c("deaths", "hospitalizations"), 
                     trainer = linear_reg() |> set_engine("lm"),
                     args_list = arx_args_list(
                       lags = c(0, 7, 14),
                       ahead = 28,
                       quantile_levels = c(0.1, 0.9))
                     )$predictions |>
        pivot_quantiles_wider(.pred_distn),
  .window_size = w, 
  .ref_time_values = fc_time_values
)
```

## Predictions (more lags)

```{r arx-with-more-lags-plot}
#| fig-align: left
ca_extend |> 
  full_join(pred_arx_more_lags |> select(!c(cases, deaths, time_value)), 
            join_by(time_value == target_date, geo_value == geo_value)) |>
  mutate(observed = deaths, 
         predicted = .pred) |>
  pivot_longer(cols = c(observed, predicted), names_to = 'Deaths') |>
  ggplot(aes(time_value, value)) +
  geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`), alpha = .3, fill = "#00BFC4") +
  geom_line(aes(col = Deaths, alpha = ifelse(time_value > t0_date, 1, .5))) + 
  geom_vline(xintercept = t0_date) +    
  geom_vline(xintercept = t0_date + h, lty = 2) +
  labs(x = "", y = "Deaths per 100k people") +
  theme(legend.position = "bottom", legend.title = element_blank()) +
  scale_alpha_identity()
```

```{r error-arx-more-lags}
getErrors((ca_extend |> filter(time_value %in% pred_arx_more_lags$target_date))$deaths,
          pred_arx_more_lags$.pred, "")
```


## Modifying the ARX forecaster

### Change trainer

```{r arx-with-random-forests}
#| echo: true
#| code-line-numbers: "6"
pred_arx_rf <- ca_extend |>
  epi_slide(
    ~ arx_forecaster(epi_data = .x,
                     outcome = "deaths", 
                     predictors = c("deaths", "hospitalizations"), 
                     trainer = parsnip::rand_forest(mode = "regression"),
                     args_list = arx_args_list(
                       lags = 0, 
                       #lags = c(0, 7, 14),  # worse predictions
                       ahead = 28,
                       quantile_levels = c(0.1, 0.9))
                     )$predictions |>
        pivot_quantiles_wider(.pred_distn),
  .window_size = w, 
  .ref_time_values = fc_time_values
)
```

## Predictions (trained using random forest)

```{r arx-with-random-forests-plot}
#| fig-align: left
ca_extend |> 
  full_join(pred_arx_rf |> select(!c(cases, deaths, time_value)), 
            join_by(time_value == target_date, geo_value == geo_value)) |>
  mutate(observed = deaths, 
         predicted = .pred) |>
  pivot_longer(cols = c(observed, predicted), names_to = 'Deaths') |>
  ggplot(aes(time_value, value)) +
  geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`), alpha = .3, fill = "#00BFC4") +
  geom_line(aes(col = Deaths, alpha = ifelse(time_value > t0_date, 1, .5))) + 
  geom_vline(xintercept = t0_date) +    
  geom_vline(xintercept = t0_date + h, lty = 2) +
  labs(x = "", y = "Deaths per 100k people") +
  theme(legend.position = "bottom", legend.title = element_blank()) +
  scale_alpha_identity()
```


```{r error-arx-random-forests}
getErrors((ca_extend |> filter(time_value %in% pred_arx_rf$target_date))$deaths,
          pred_arx_rf$.pred, "")
```


## Modifying the ARX forecaster

### Geo-pooling

```{r arx-geo-pooling, eval=FALSE}
#| echo: true
#| code-line-numbers: "1"
pred_arx_geo_pool <- df_extend |>
  filter(time_value > as.Date("2020-06-01") & 
           !geo_value %in% c("as", "gu", "mp")) |>
  epi_slide(
    ~ arx_forecaster(epi_data = .x,
                     outcome = "deaths", 
                     predictors = c("deaths", "hospitalizations"), 
                     trainer = linear_reg() |> set_engine("lm"),
                     args_list = arx_args_list(
                       lags = 0,
                       ahead = 28,
                       quantile_levels = c(0.1, 0.9))
                     )$predictions |>
        pivot_quantiles_wider(.pred_distn),
  .window_size = w, 
  .ref_time_values = fc_time_values
)

```

## Predictions (geo-pooling)

```{r arx-geo-pooling-plot, eval=FALSE}
#| fig-align: left
df_extend |> 
  filter(geo_value %in% c("ca", "ma", "ny", "tx")) |>
  left_join(pred_arx_geo_pool |> select(!c(cases, deaths, time_value)), 
            join_by(time_value == target_date, geo_value == geo_value)) |>
  mutate(observed = deaths, 
         predicted = .pred) |>
  pivot_longer(cols = c(observed, predicted), names_to = 'Deaths') |>
  ggplot(aes(time_value, value)) +
  geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`), alpha = .3, fill = "#00BFC4") +
  geom_line(aes(col = Deaths, alpha = ifelse(time_value > t0_date, 1, .5))) + 
  geom_vline(xintercept = t0_date) +    
  geom_vline(xintercept = t0_date + h, lty = 2) +
  facet_wrap(vars(geo_value)) +
  labs(x = "", y = "Deaths per 100k people") +
  theme(legend.position = "bottom", legend.title = element_blank()) +
  scale_alpha_identity()
```


```{r error-arx-geo-pooling, eval=FALSE}
getErrors((ca_extend |> filter(time_value %in% pred_arx_geo_pool$target_date))$deaths,
          pred_arx_geo_pool$.pred, "")
```



## Modifying the ARX forecaster

### Multiple horizons

```{r arx-multiple-h}
#| echo: true
#| code-line-numbers: "1-2,11,18|19-20"
fc_time_values <- seq(from = t0_date, to = as.Date("2023-02-01"), by = "1 month")
pred_h_days_ahead <- function(epi_df, ahead = 7) {
  epi_df |>
    epi_slide(
      ~ arx_forecaster(epi_data = .x,
                       outcome = "deaths", 
                       predictors = c("deaths", "hospitalizations"), 
                       trainer = linear_reg() |> set_engine("lm"),
                       args_list = arx_args_list(
                         lags = 0,  
                         ahead = ahead,
                         quantile_levels = c(0.1, 0.9))
      )$predictions |> 
        pivot_quantiles_wider(.pred_distn),
  .window_size = w, 
  .ref_time_values = fc_time_values
  )
}
h <- c(7, 14, 21, 28)
forecasts <- bind_rows(map(h, ~ pred_h_days_ahead(ca_extend, ahead = .x)))
```

## Predictions (multiple horizons)

```{r arx-multiple-h-plot}
#| fig-width: 10
#| fig-height: 5
ggplot(data = forecasts, aes(x = target_date, group = time_value)) +
  geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`, fill = factor(forecast_date)), 
              alpha = 0.4) +
  geom_vline(aes(xintercept = forecast_date, color = factor(forecast_date)), 
             lty = 2) +
  geom_line(data = ca_extend,
    aes(x = time_value, y = deaths),
    inherit.aes = FALSE, na.rm = TRUE, alpha = .5
  ) +
  geom_line(aes(y = .pred, color = factor(forecast_date))) +
  geom_point(aes(y = .pred, color = factor(forecast_date))) +
  labs(x = "", y = "Deaths per 100k people") +
  theme(legend.position = "none")
```


# Forecasting with Versioned Data

```{r get-versioned-data}
source(here::here("_code/versioned_data.R"))
```

```{r versioned-weekly-avg}
forecast_dates <- seq(from = t0_date, to = as.Date("2023-02-01"), by = "1 month")

data_archive <- data_archive |>
  epix_slide(
    .before = Inf, 
    .versions = forecast_dates,
    function(x, gk, rtv) {
      x |>
        group_by(geo_value) |>
        epi_slide_mean(case_rate, .window_size = 7L) |>
        epi_slide_mean(death_rate, .window_size = 7L) |>
        ungroup() |>
        rename(case_rate_7d_av = slide_value_case_rate,
               death_rate_7d_av = slide_value_death_rate)
    }
  ) |>
  rename(
    cases = case_rate_7d_av,
    deaths = death_rate_7d_av
  ) |>
  select(version, time_value, geo_value, cases, deaths) |>
  as_epi_archive(compactify = TRUE)

us_data <- data_archive$DT |> 
  #filter(geo_value == "ca") |>
  as_epi_archive()
```

## Versioned data

```{r print-versioned-data}
#| echo: true
us_data
```

## Version-aware forecasting with geo-pooling

```{r predict-version-aware}
#| echo: true
#| code-line-numbers: "|5-17"
forecast_dates <- seq(from = t0_date, to = as.Date("2023-02-01"), by = "1 month")
h <- c(7, 14, 21, 28)

forecast_k_days_ahead <- function(epi_archive, forecast_dates, ahead = 7) {
  epi_archive |>
    epix_slide(
      ~ arx_forecaster(
        .x, 
        outcome = "deaths", 
        predictors = c("cases", "deaths"),
        trainer = linear_reg() |> set_engine("lm"),
        args_list = arx_args_list(lags = 0, ahead = ahead,
                                  quantile_levels = c(0.1, 0.9))
      )$predictions |> pivot_quantiles_wider(.pred_distn),
      .before = 120,
      .versions = forecast_dates
    )
}

forecasts <- bind_rows(map(h, ~ forecast_k_days_ahead(us_data, forecast_dates, ahead = .x)))
```

## Version-aware forecasting with geo-pooling

```{r plot-version-aware}
#| fig-width: 10
#| fig-height: 5
geo <- "ca"
forecasts_filtered <- forecasts |>
  filter(geo_value == geo) |>
  mutate(time_value = version)

data_at_fc <- bind_rows(
  map(forecast_dates,
      ~ us_data |>
        epix_as_of(.x) |>
        mutate(version = .x)
  )) |>
  filter(geo_value == geo)

ggplot(data = forecasts_filtered, aes(x = target_date, group = time_value)) +
  geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`, fill = factor(time_value)), alpha = 0.4) +
  geom_vline(data = data_at_fc, aes(color = factor(version), xintercept = version), lty = 2) +
  geom_line(
    data = data_at_fc,
    aes(x = time_value, y = deaths, color = factor(version)),
    inherit.aes = FALSE, na.rm = TRUE, alpha = .5
  ) +
  geom_line(aes(y = .pred, color = factor(time_value))) +
  geom_point(aes(y = .pred, color = factor(time_value))) +
  labs(x = "", y = "Deaths per 100k people") +
  theme(legend.position = "none")
```

# Building a forecaster

## Philosophy of forecasting

::: {.fragment .fade-in-then-semi-out}

We should build up modular components

Be able to add/remove layers of complexity sequentially

:::

::: {.fragment .fade-in-then-semi-out}

  1. [Preprocessor]{.primary}: do things to the data before model training
  
  1. [Trainer]{.primary}: train a model on data, resulting in a fitted model object

  1. [Predictor]{.primary}: make predictions, using a fitted model object

  1. [Postprocessor]{.primary}: do things to the predictions before returning
  
:::

## Fit a forecaster from scratch

So far, we performed some [manual pre-processing]{.primary}, and then relied on a [canned forecaster]{.primary}
to automatically perform [more pre-processing]{.primary}, [training]{.primary}, [predicting]{.primary}, and [post-processing]{.primary}.


::: {.callout-important icon="false"}
## What if we want more direct control on each single step?

:::

## Fit a forecaster from scratch

```{r forecaster-from-scratch}
#| echo: true
#| eval: false
#| code-line-numbers: "1-6|8-9|11-16|18-20|21-29"
# A preprocessing "recipe" that turns raw data into features / response
r <- epi_recipe(ca) |>
  step_epi_lag(cases, lag = c(0, 7, 14)) |>
  step_epi_lag(deaths, lag = c(0, 7, 14)) |>
  step_epi_ahead(deaths, ahead = 28) |>
  step_epi_naomit()

# Training engine
e <- quantile_reg(quantile_levels = c(.1, .5, .9))

# A post-processing routine describing what to do to the predictions
f <- frosting() |>
  layer_predict() |>
  layer_threshold(.pred, lower = 0) |> # predictions / intervals should be non-negative
  layer_add_target_date() |>
  layer_add_forecast_date()

# Bundle up the preprocessor, training engine, and postprocessor
# We use quantile regression
ewf <- epi_workflow(r, e, f)

# Fit it to data (we could fit this to ANY data that has the same format)
trained_ewf <- ewf |> fit(ca)

# examines the recipe to determine what we need to make the prediction
latest <- get_test_data(r, ca)

# we could make predictions using the same model on ANY test data
preds <- trained_ewf |> predict(new_data = latest)
```


# A Flu Forecaster

## Get the data

```{r get-flu-data}
#| echo: true
flu <- pub_covidcast(
  source = "hhs",
  signals = "confirmed_admissions_influenza_1d_prop",
  time_type = "day",
  geo_type = "state",
  time_values = epirange(20200101, 20241231)
  #issues = epirange(20200101, 20241231)
) |> 
  select(geo_value, time_value, hosp = value) |>
  as_epi_df()

```

## Build forecaster

```{r forecaster-flu}
#| echo: true
# A preprocessing "recipe" that turns raw data into features / response
r <- epi_recipe(flu) |>
  #drop_non_seasons() |>
  step_population_scaling(
    hosp,
    df = epidatasets::state_census,
    df_pop_col = "pop",
    create_new = FALSE,
    rate_rescaling = 1e5,
    by = c("geo_value" = "abbr")) |>
  step_epi_lag(hosp, lag = c(0, 7, 14)) |>
  step_epi_ahead(hosp, ahead = 14) |>
  step_epi_naomit()

# Training engine
e <- quantile_reg(quantile_levels = c(0.01, 0.025, 1:19 / 20, 0.975, 0.99)) # 23 ForecastHub quantiles

# A post-processing routine describing what to do to the predictions
f <- frosting() |>
  layer_predict() |>
  layer_threshold(.pred, lower = 0) |> # predictions / intervals should be non-negative
  layer_population_scaling(
    .pred, 
    df = epidatasets::state_census,
    df_pop_col = "pop",
    create_new = FALSE,
    rate_rescaling = 1e5,
    by = c("geo_value" = "abbr")) |>
  layer_add_target_date() |>
  layer_add_forecast_date()

# Bundle up the preprocessor, training engine, and postprocessor
# We use quantile regression
ewf <- epi_workflow(r, e, f)

# Fit it to data (we could fit this to ANY data that has the same format)
trained_ewf <- ewf |> fit(flu)

# examines the recipe to determine what we need to make the prediction
latest <- get_test_data(r, flu)

# we could make predictions using the same model on ANY test data
preds <- trained_ewf |> predict(new_data = latest)
```

## Predictions

```{r}
preds |> pivot_quantiles_wider(.pred)
```
