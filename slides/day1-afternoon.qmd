---
talk-title: "Explore, clean & transform data"
talk-short-title: "{{< meta talk-title >}}"
talk-subtitle: ""
author: ""
other-authors: ""
repo-address: "cmu-delphi/insightnet-workshop-2024"
talk-date: ""
format: revealjs
execute:
  cache: false
---
  
  <!-- Set any of the above to "" to omit them -->
  
  <!-- Or adjust the formatting in _titleslide.qmd -->
  {{< include _titleslide.qmd >}}

```{r theme}
theme_set(theme_bw())

library(tidyverse)
library(epidatr)
library(epiprocess)
library(epipredict)
library(epidatasets)
# install.packages("remotes")
# remotes::install_github("UBC-STAT/stat-406-rpackage", dependencies = TRUE)
library(Stat406)
```

## Outline

1. Essentials of `dplyr` and `tidyr` 

1. Epiverse software ecosystem

1. Panel and versioned data in the epiverse

1. Basic Nowcasting using `epiprocess`

1. Motivating case study 


# Essentials of `dplyr` and `tidyr` 

## Down with Spreadsheets for Data Manipulation

* Spreadsheets make it difficult to rerun analyses consistently.
* Using R (and `dplyr`) allows for:
  * Reproducibility 
  * Ease of modification
* **Recommendation**: Avoid manual edits; instead, use code for transformations.
* Let's see what we mean by this...

## Introduction to `dplyr`
<div style="font-size: 0.8em;">
* `dplyr` is a powerful package in R for data manipulation.
* It is part of the `tidyverse`, which includes a collection of packages designed to work together... Here's some of it's greatest hits:
</div>
<div style="text-align: center;">
![](gfx/tidyverse_packages.png){style="width: 35%; display: block; margin-left: auto; margin-right: auto;"}
<br>
<small>[Source](https://laddem.github.io/courses/tidyverse/)</small>
</div>

## Introduction to `dplyr`

![](gfx/dplyr.png){style="width: 20%"}

To load `dplyr` you may simply load the `tidyverse` package:

```{r load-tidyverse}
#| echo: true
# install.packages("tidyverse")
library(tidyverse)  # Load tidyverse, which includes dplyr & tidyr
```

## Introduction to `dplyr`
Our focus will be on basic operations like selecting and filtering data.

![](gfx/dplyr_and_fun.png){style="width: 70%;"}
<div style="text-align: center;">
<small>[Source](https://towardsdatascience.com/data-manipulation-in-r-with-dplyr-3095e0867f75)</small>
</div>


## Downloading JHU CSSE COVID-19 Case Data

* Let's start with something familiar... Here's a task for you:
* Use `pub_covidcast()` to download **JHU CSSE COVID-19 confirmed case data** (`confirmed_incidence_num`) for CA, NC, and NY from March 1, 2022 to March 31, 2022 as of January 1, 2024.
* Try this for yourself. Then click the dropdown on the next slide to check your work...

## Downloading JHU CSSE COVID-19 Case Data

```{r load-dataset}
#| echo: true
#| code-fold: true
library(epidatr)

cases_df <- pub_covidcast(
  source = "jhu-csse",
  signals = "confirmed_incidence_num",
  geo_type = "state",
  time_type = "day",
  geo_values = "ca,nc,ny",
  time_values = epirange(20220301, 20220331),
  as_of = as.Date("2024-01-01")
)
```

Now we only really need a few columns here...
```{r}
#| echo: true
cases_df <- cases_df |> 
  select(geo_value, time_value, raw_cases = value) # We'll talk more about this soon :)
```

## Ways to Inspect the Dataset

Use `head()` to view the first six row of the data 
```{r head-tail-funs}
#| echo: true
head(cases_df)  # First 6 rows
```

and tail to view the last six

```{r}
tail(cases_df)  # Last 6 rows
```

## Ways to Inspect the Dataset
Now, for our first foray into the `tidyverse`...

Use `glimpse()` to get a compact overview of the dataset.

```{r glimpse-ex}
#| echo: true
glimpse(cases_df)
```

## Creating Tibbles

* **Tibbles**: Modern data frames with enhanced features.
* Rows represent **observations** (or cases).
* Columns represent **variables** (or features).
* You can create tibbles manually using the `tibble()` function.

```{r create-tibble}
#| echo: true
tibble(x = letters, y = 1:26)
```

## Selecting Columns with `select()`

The `select()` function is used to pick specific columns from your dataset.

```{r select-columns}
#| echo: true
select(cases_df, geo_value, time_value)  # Select the 'geo_value' and 'time_value' columns
```

## Selecting Columns with `select()`

You can exclude columns by prefixing the column names with a minus sign `-`.

```{r select-columns-exclude}
#| echo: true
select(cases_df, -raw_cases)  # Exclude the 'raw_cases' column from the dataset
```

## Extracting Columns with `pull()`

* `pull()`: Extract a column as a vector.
* Let's try this with the `cases` column...

```{r pull-column-direct}
#| echo: true
pull(cases_df, raw_cases) 
```


## Filtering Rows with `filter()`

* The `filter()` function allows you to select rows that meet specific conditions.
* Conditions can involve column values, such as filtering for only NC or higher numbers of cases.
* This enables you to narrow down your dataset to focus on relevant data.

```{r filter-rows}
#| echo: true
filter(cases_df, geo_value == "nc", raw_cases > 500)  # Filter for NC with raw daily cases > 500
```

## Combining `select()` and `filter()` Functions

* You can further combine `select()` and `filter()` to further refine the dataset.
* Use `select()` to choose columns and `filter()` to narrow down rows.
* This helps in extracting the exact data needed for analysis.

```{r select-filter-combine}
#| echo: true
select(filter(cases_df, geo_value == "nc", raw_cases > 1000), time_value, raw_cases) |> 
  head()
```

## Using the Pipe Operator `|>`

* The pipe operator (`|>`) makes code more readable by chaining multiple operations together.
* The output of one function is automatically passed to the next function.
* This allows you to perform multiple steps (e.g., `filter()` followed by `select()`) in a clear and concise manner.

```{r pipe-operator}
#| echo: true
# This code reads more like poetry!
cases_df |> 
  filter(geo_value == "nc", raw_cases > 1000) |> 
  select(time_value, raw_cases) |> 
  head()
```

## Key Practices in `dplyr`

* Use **tibbles** for easier data handling.
* Use **`select()`** and **`filter()`** for data manipulation.
* Use **`pull()`** to extract columns as vectors.
* Use **`head()`**, **`tail()`**, and **`glimpse()`** for quick data inspection.
* Chain functions with **`|>`** for cleaner code.

## Grouping Data with `group_by()`

* Use `group_by()` to group data by one or more columns.
* Allows performing operations on specific groups of data.

```{r group-by-ex}
#| echo: true
cases_df |>
  group_by(geo_value) |>
  filter(raw_cases == max(raw_cases, na.rm = TRUE))
```

## Creating New Columns with `mutate()`

<div style="text-align: center;">
![](gfx/dplyr_mutate.jpg){style="width: 45%; display: block; margin-left: auto; margin-right: auto;"}
<br>
<small>[Artwork by @allison_horst](https://x.com/allison_horst)</small>
</div>

## Creating New Columns with `mutate()`

* `mutate()` is used to create new columns.
* Perform calculations using existing columns and assign to new columns.

```{r mutate-one-var-ex}
#| echo: true
ny_subset = cases_df |>
  filter(geo_value == "ny")

ny_subset |> 
  mutate(cumulative_cases = cumsum(raw_cases)) |> 
  head()
```

## Creating New Columns with `mutate()`

* `mutate()` can create multiple new columns in one step.
* Logical comparisons (e.g., `over_5000 = raw_cases > 5000`) can be used within `mutate()`.

```{r mutate-two-var-ex}
#| echo: true
ny_subset |> 
  mutate(over_5000 = raw_cases > 5000,
         cumulative_cases = cumsum(raw_cases)) |> 
  head()
```

## Combining `group_by()` and `mutate()`

* First, group data using `group_by()`.
* Then, use `mutate` to perform the calculations for each group.
* Finally, use `arrange` to display the output by `geo_value`.

```{r group-by-mutate-combo}
#| echo: true
cases_df |>
  group_by(geo_value) |>
  mutate(cumulative_cases = cumsum(raw_cases)) |> 
  arrange(geo_value) |> 
  head()
```

## Conditional Calculations with `if_else()`
* `if_else()` allows conditional logic within `mutate()`.
* Perform different operations depending on conditions, like "high" or "low."

```{r cond-calc-if-else}
#| echo: true
t <- 5000

cases_df |>
  mutate(high_low_cases = if_else(raw_cases > t, "high", "low")) |> 
  head()
```

## Summarizing Data with `summarise()`
* `summarise()` reduces data to summary statistics (e.g., mean, median).
* Typically used after `group_by()` to summarize each group.

```{r summarise-median-one-var}
#| echo: true
cases_df |>
  group_by(geo_value) |>
  summarise(median_cases = median(raw_cases))
```

## Using `count()` to Aggregate Data
`count()` is a shortcut for grouping and summarizing the data.

For example, if we want to get the total number of complete rows for each state, then
```{r summarise-count}
#| echo: true
cases_count <- cases_df |>
  drop_na() |> # Removes rows where any value is missing (from tidyr)
  group_by(geo_value) |>
  summarize(count = n())
```

is equivalent to 

```{r count-fun}
#| echo: true
cases_count <- cases_df |>
  drop_na() |> 
  count(geo_value)

cases_count # Let's see what the counts are.
```

## Key Practices in `dplyr`: Round 2

* Use **group_by()** to group data by one or more variables before applying functions.
* Use **mutate** to create new columns or modify existing ones by applying functions to existing data.
* Use **summarise** to reduce data to summary statistics (e.g., mean, median).
* **count()** is a convenient shortcut for counting rows by group without needing `group_by()` and `summarise()`.

## Tidy Data and Tolstoy

> "Happy families are all alike; every unhappy family is unhappy in its own way." — Leo Tolstoy  

* **Tidy datasets** are like happy families: consistent, standardized, and easy to work with.  
* **Messy datasets** are like unhappy families: each one messy in its own unique way.  
In this section:
* We'll define what makes data *tidy* and how to transform between the tidy and messy formats.

## Tidy Data and Tolstoy

![](gfx/tidy_messy_data.jpg){style="width: 60%;"}

<small>[Artwork by @allison_horst](https://x.com/allison_horst)</small>


## What is Tidy Data?

* Tidy data follows a consistent structure: **each row represents one observation, and each column represents one variable.**
* `cases_df` is one classic example of tidy data.

```{r}
head(cases_df)
```

* To convert between tidy and messy data, we can use the `tidyr` package in the tidyverse.

## `pivot_wider()` and  `pivot_longer()`
<div style="text-align: center;">
![](gfx/pivot_wider_longer.jpg){style="width: 40%; display: block; margin-left: auto; margin-right: auto;"}
<br>
<small>[Artwork by @allison_horst](https://x.com/allison_horst)</small>
</div>

## Making Data Wider with `pivot_wider()`
<div style="font-size: 0.9em;">
* To convert data from long format to wide/messy format use`pivot_wider()`.
* For example, let's try creating a column for each time value in `cases_df`:
</div>

<!-- Example. Spreadsheet from hell -->

```{r pivoting-wide-ex}
#| echo: true
messy_cases_df <- cases_df |>
  pivot_wider(
    names_from = time_value,   # Create new columns for each unique date
    values_from = raw_cases    # Fill those columns with the raw_case values
  )

# View the result
messy_cases_df
```

##  Tidying Messy Data with `pivot_longer()`
* Use `pivot_longer()` to convert data from **wide format** (multiple columns for the same variable) to **long format** (one column per variable).
* Let's try turning `messy_cases_df` back into the original tidy `cases_df`!

```{r messy-to-tidy-ex}
#| echo: true
tidy_cases_df <- messy_cases_df |>
  pivot_longer(
    cols = -geo_value,          # Keep the 'geo_value' column as it is
    names_to = "time_value",    # Create a new 'time_value' column from the column names
    values_to = "raw_cases"     # Values from the wide columns should go into 'raw_cases'
  )

# View the result
head(tidy_cases_df, n = 3) # Notice the class of time_value here
```

##  Tidying Messy Data with `pivot_longer()`

* When we used `pivot_longer()`, the `time_value` column is converted to a character class because the column names are treated as strings.
* So, to truly get the original `cases_df` we need to convert `time_value` back to the `Date` class.
* Then, we can use `identical()` to check if the two data frames are exactly the same.
```{r}
#| echo: true
tidy_cases_df = tidy_cases_df |> mutate(time_value = as.Date(time_value))

identical(tidy_cases_df |> arrange(time_value), cases_df)
```

Great. That was a success!

## Missing Data
* Sometimes you may have missing data in your time series.
* Can be due to actual missing data, or it can be due to the fact that the data is only reported on certain days. 
* Let's create a dataset with missing data & consider each of those cases:

```{r}
#| echo: true
ca_missing <- cases_df |>
  filter(geo_value == "ca") |>
  slice(1:2, 4:6) # Select rows 1 to 2 and 4 to 6; ie. omit 2022-03-03

ca_missing
```

## `complete()` and `fill()` to Handle Missing Data

A simple workflow to handle missing data relies on one or both of these functions:

1. **`complete()`**: Adds missing rows for combinations of specified variables.

2. **`fill()`**: Fills missing values in columns, typically from previous or next available values (default is LOCF).

## Data Only Reported on Certain Days

* If the data is only reported on certain days, it is often useful to fill in the missing data with explicit zeros. 

* `complete()` is enough to handle this:

```{r complete-ex}
#| echo: true
# First, use complete() to add missing time_value (2022-03-03)
ca_complete <- ca_missing |>
  complete(geo_value, time_value = seq(min(time_value), max(time_value), by = "day"),
           fill = list(raw_cases = 0))
ca_complete
```
<!-- Using complete(time_value) doesn't work as expected because it doesn't automatically generate a sequence of missing dates between the min and max values of time_value. Instead, it simply tries to match the unique values in time_value and doesn't infer a complete range. To ensure complete() does what you want for time, it is best practice to explicitly create a sequence of dates that covers the entire range of time_value. -->

## Data is Genuinely Missing

* If the data is truly missing, then there are multiple options (ex. omission, single imputation, multiple imputation).
* A common single imputation method  used to handle missing data in time series or longitudinal datasets is LOCF.
* We can easily perform LOCF using `complete()` followed by `fill()`.
* Start with `complete()`:

```{r}
#| echo: true
# First, use complete() to add missing time_value (2022-03-03)
ca_complete <- ca_missing |>
  complete(geo_value, time_value = seq(min(time_value), max(time_value), by = "day"))
head(ca_complete, n = 4) # notice no fill with 0s this time, NA by default
```

## Data is Genuinely Missing
Then, use `fill()` to fill the counts using LOCF (default):

```{r fill-ex}
#| echo: true
ca_complete |>
  fill(raw_cases)
```

## Introduction to Joins in `dplyr`
* Joining datasets is a powerful tool for combining info. from multiple sources.
* In R, `dplyr` provides several functions to perform different types of joins.
* We'll demonstrate joining a subset of `cases_df` (our case counts dataset) with `state_census`.
* **Motivation**: We can scale the case counts by population to make them comparable across regions of different sizes.

## Subset `cases_df`

To simplify things, let's use `filter()` to only grab one date of `cases_df`:
```{r}
#| echo: true
cases_df_sub = cases_df |> filter(time_value == "2022-03-01") 
cases_df_sub
```

Though note that what we're going to do can be applied to the entirety of `cases_df`.

## Load State Census Data

The `state_census` dataset from `epidatasets` contains state populations from the 2019 census.
```{r state-census}
#| echo: true
# State census dataset from epidatasets
library(epidatasets)
state_census = state_census |> select(abbr, pop) |> filter(abbr != "us")

state_census |> head()
```

Notice that this includes many states that are not in `cases_df_sub`.

## Left Join: Keep All Rows from the First Dataset

* A **left join** keeps all rows from the **first dataset** (`cases_df_sub`), and adds matching data from the second dataset (`state_census`).
* So **all rows from the first dataset** (`cases_df_sub`) will be preserved.
* The datasets are joined by matching the `geo_value` column, specified by the by argument.

```{r left-join}
#| echo: true
# Left join: combining March 1, 2022 state case data with the census data
cases_left_join <- cases_df_sub |>
  left_join(state_census, by = c("geo_value" = "abbr"))

cases_left_join
```

## Right Join: Keep All Rows from the Second Dataset
<div style="font-size: 0.9em;">
* A **right join** keeps all rows from the **second dataset** (`state_census`), and adds matching data from the first dataset (`cases_df_sub`).
* If a row in the second dataset doesn't have a match in the first, then the columns from the first will be filled with NA. 
* For example, can see this for the `al` row from `state_census`...
</div>
```{r right-join}
#| echo: true
# Right join: keep all rows from state_census
cases_right_join <- cases_df_sub |>
  right_join(state_census, by = c("geo_value" = "abbr"))

head(cases_right_join)
```

## Inner Join: Only Keeping Matching Rows
* An inner join will only keep rows where there is a match in both datasets.
* So, if a state in `state_census` does not have a corresponding entry in `cases_df_sub`, then that row will be excluded.
```{r inner-join}
#| echo: true
# Inner join: only matching rows are kept
cases_inner_join <- cases_df_sub |>
  inner_join(state_census, by = c("geo_value" = "abbr"))

cases_inner_join
```

## Full Join: Keeping All Rows from Both Datasets

* A full join will keep all rows from both datasets.
* If a state in either dataset has no match in the other, the missing values will be filled with NA.
```{r full-join}
#| echo: true
# Full join: keep all rows from both datasets
cases_full_join <- cases_df_sub |>
  full_join(state_census, by = c("geo_value" = "abbr"))

head(cases_full_join)
```


## Summary of the Four Join Functions

* **Left join:** All rows from the left dataset and matching rows from the right dataset.
* **Right join:** All rows from the right dataset and matching rows from the left dataset.
* **Inner join:** Only matching rows from both datasets.
* **Full join:** All rows from both datasets, with NA where no match exists.

## Final Thoughts on Joins
* Joins are an essential part of data wrangling in R.
* The choice of join depends on the analysis you need to perform:
    + Use **left joins** when you want to keep all data from the first dataset.
    + Use **right joins** when you want to keep all data from the second dataset.
    + Use **inner joins** when you're only interested in matching rows.
    + Use **full joins** when you want to preserve all information from both datasets.

## Three Review Questions

**Q1)**: What can we use to fill in the missing `time_value` for the states in `cases_full_join`?

```{r}
#| echo: true
#| code-fold: true
cases_full_join |> 
     fill(time_value)
```
**Q2)**: Now, what join function should you use if your goal is to scale the cases by population in `cases_df`?
```{r}
#| echo: true
#| code-fold: true
# Either left_join
cases_left_join <- cases_df |>
  left_join(state_census, by = c("geo_value" = "abbr"))

cases_left_join
cases_df = cases_left_join

# Or inner_join
cases_inner_join <- cases_df |>
  inner_join(state_census, by = c("geo_value" = "abbr"))

cases_inner_join
```

**Q3)**: Finally, please create a new column in `cases_df` where you scale the cases by population and multiply by 1e5 to get cases / 100k.
```{r}
#| echo: true
#| code-fold: true
cases_df <- cases_df |>
  mutate(scaled_cases = raw_cases / pop * 1e5) # cases / 100K
head(cases_df)
```

## Epi. Data Processing with `epiprocess`
<div style="font-size: 0.8em;">
* `epiprocess` is a package that offers additional functionality to pre-process such epidemiological data.
* You can work with an `epi_df` like you can with a tibble by using dplyr verbs.
* For example, on `cases_df`, we can easily use `epi_slide_mean()` to calculate trailing 14 day averages of cases:
</div>
```{r trailing-averages}
#| echo: true
cases_df <- cases_df |>
  as_epi_df(as_of = as.Date("2024-01-01")) |>
  group_by(geo_value) |>
  epi_slide_mean(scaled_cases, .window_size = 14, na.rm = TRUE) |>
  rename(smoothed_scaled_cases = slide_value_scaled_cases) 

head(cases_df)
```

## Epi. Data Processing with `epiprocess`
It is easy to produce an autoplot the smoothed confirmed daily cases for each `geo_value`:
```{r}
#| echo: true
cases_df |>
  autoplot(smoothed_scaled_cases)
```

## Epi. Data Processing with `epiprocess`

Alternatively, we can display both the smoothed and the original daily case rates:

```{r}
#| echo: false
ggplot(cases_df) +
  geom_line(aes(x = time_value, y = scaled_cases, color = geo_value), size = 0.25) +
  geom_line(aes(x = time_value, y = smoothed_scaled_cases, color = geo_value), size = 1) +
  facet_wrap(vars(geo_value), nrow = 1, scales = "free") +
  ylab("Cases per 100k") +
  theme_bw() +
  theme(legend.position = "none") +
  guides(x =  guide_axis(angle = 25))
```
Now, before exploring some more features of `epiprocess`, let's have a look at the epiverse software ecosystem it's part of...


# Epiverse Software Ecosystem

## The Epiverse Ecosystem
Interworking, community-driven, packages for epi tracking & forecasting.

![](gfx/epiverse_packages_flow.jpg){style="width: 60%; display: block; margin-left: auto; margin-right: auto;"}

<!-- 1. Fetch data: epidatr, epidatpy, and other sources, 2. Explore, clean, transform & backtest 3. Pre-built forecasters, modular forecasting framework: epipredict -->
  
  
  
# Panel and Versioned Data in the Epiverse
  
## What is Panel Data?
<div style="font-size: 0.8em;">
* Recall that [panel data](https://en.wikipedia.org/wiki/Panel_data), or longitudinal data, 
contain cross-sectional measurements of subjects over time. 
* Built-in example: [`covid_case_death_rates`](
  https://cmu-delphi.github.io/epidatasets/reference/covid_case_death_rates.html) 
dataset, which is a snapshot **as of** May 31, 2022 that contains daily state-wise measures of `case_rate` and `death_rate` for COVID-19 in 2021:
  
```{r}
#| echo: false
edf <- covid_case_death_rates
head(edf)
```

* How do we store & work with such snapshots in the epiverse software ecosystem?
</div>
  
  
## `epi_df`: Snapshot of a Dataset

* You can convert panel data into an `epi_df` with the required `geo_value` and `time_value` columns

Therefore, an `epi_df` is...
* a tibble that requires columns `geo_value` and `time_value`.
* arbitrary additional columns containing [measured values]{.primary}
* additional [keys]{.primary} to index (`age_group`, `ethnicity`, etc.)

::: {.callout-note}
## `epi_df`

Represents a [snapshot]{.primary} that
contains the most [up-to-date values]{.primary} of the signal variables, [as of]{.primary} a given time.
:::
  
  
## `epi_df`: Snapshot of a Dataset

```{r}
#| echo: true
edf <- covid_case_death_rates
edf
```

## Examples of Preprocessing

### EDA Features

1. Making locations commensurate (per capita scaling)
1. Correlating signals across location or time 
1. Computing growth rates
1. Detecting and removing outliers
1. Dealing with revisions 

## Features - Correlations at Different Lags

```{r}
#| echo: true
cor0 <- epi_cor(edf, case_rate, death_rate, cor_by = time_value)
cor14 <- epi_cor(edf, case_rate, death_rate, cor_by = time_value, dt1 = -14)
```

```{r}
#| fig-align: center
#| warning: false
rbind(
  cor0 |> mutate(lag = 0),
  cor14 |> mutate(lag = 14)
) |>
  mutate(lag = as.factor(lag)) |>
  ggplot(aes(x = time_value, y = cor)) +
  geom_hline(yintercept = 0, size = 1.5) +
  geom_line(aes(color = lag), size = 1.5) +
  scale_color_brewer(palette = "Set1") +
  scale_x_date(minor_breaks = "month", date_labels = "%b %Y") +
  labs(x = "Date", y = "Correlation", col = "Lag")
```

## Features - Compute Growth Rates

```{r, echo=TRUE}
edf <- filter(edf, geo_value %in% c("ut", "ca")) |>
  group_by(geo_value) |>
  mutate(gr_cases = growth_rate(time_value, case_rate, method = "trend_filter"))
```

```{r}
#| fig-align: center
ggplot(edf, aes(x = time_value, y = gr_cases)) +
  geom_hline(yintercept = 0, size = 1.5) +
  geom_line(aes(col = geo_value), size = 1.5) +
  geom_hline(yintercept = 0) +
  scale_y_continuous(labels = scales::label_percent()) +
  scale_color_manual(values = c(3, 6)) +
  scale_x_date(minor_breaks = "month", date_labels = "%b %Y") +
  labs(x = "Date", y = "Growth rate", col = "State")
```

## Features - Outlier Detection

```{r outliers}
#| fig-width: 8
#| fig-height: 4
#| warning: false
edfo <- covid_incidence_outliers |>
  dplyr::select(geo_value, time_value, cases) |>
  as_epi_df() |>
  group_by(geo_value) |>
  mutate(outlier_info = detect_outlr_rm(
    x = time_value, y = cases
  )) |> 
  ungroup() |> 
  unnest() |> 
  mutate(cases_corrected = replacement) |> 
  select(geo_value, time_value, cases, cases_corrected)
edfo |> 
  pivot_longer(starts_with("cases")) |> 
  mutate(
    name = case_when(
      name == "cases_corrected" ~ "corrected",
      TRUE ~ "original"
    ),
    name = as.factor(name),
    name = fct_relevel(name, "original")
  ) |> 
  ggplot(aes(x = time_value)) +
  geom_line(aes(y = value, color = name)) +
  scale_color_brewer(palette = "Set1") +
  geom_hline(yintercept = 0) +
  facet_wrap(vars(geo_value), scales = "free_y", nrow = 1) +
  scale_x_date(minor_breaks = "month", date_labels = "%b %Y") +
  labs(x = "Date", y = "Reported COVID-19 cases") +
  theme(legend.position = c(.075, .8), legend.background = element_rect(fill = NA), legend.key = element_rect(fill = NA))
```

## `epi_archive`: Collection of `epi_df`s

* full version history of a data set
* acts like a bunch of `epi_df`s --- but stored [compactly]{.primary}
* allows similar functionality as `epi_df` but using only [data that would have been available at the time]{.primary}

::: {.callout-note}
## Revisions

Epidemiology data gets revised frequently.

* We may want to use the data [as it looked in the past]{.primary} 
* or we may want to examine [the history of revisions]{.primary}.
:::

## `epi_archive`: Collection of `epi_df`s

```{r}
#| echo: true
archive_cases_dv_subset
```
  
## Revision Patterns


```{r}
ggplot(snapshots |> filter(!latest),
       aes(x = time_value, y = percent_cli)) +  
  geom_line(aes(color = factor(version))) + 
  geom_vline(aes(color = factor(version), xintercept = version), lty = 3) +
  facet_wrap(~ geo_value, scales = "free_y", nrow = 1) +
  scale_x_date(minor_breaks = "month", date_labels = "%b %Y") +
  labs(x = "", y = "% of doctor's visits with\n Covid-like illness") + 
  scale_color_viridis_d(option = "B", end = .8) +
  theme(legend.position = "none") +
  geom_line(data = snapshots |> filter(latest),
            aes(x = time_value, y = percent_cli), 
            inherit.aes = FALSE, color = "black")
```

## Finalized Data
<div style="font-size: 0.9em;">
  * Counts are revised as time proceeds
* Want to know the [final]{.primary} value 
* Often not available until weeks/months later
</div>
  Forecasting
: At time $t$, predict the final value for time $t+h$, $h > 0$
  
  <br>
  
  Backcasting
: At time $t$, predict the final value for time $t-h$, $h < 0$

  <br>
  
  Nowcasting
: At time $t$, predict the final value for time $t$

# Basic Nowcasting in the Epiverse

<!-- predicting a finalized value from a provisional value and making predictions. -->
## Backfill Canadian edition
  
* Every week the BC CDC releases COVID-19 hospitalization data.

* Following week they revise the number upward (by ~25%) due to lagged reports.

![](gfx/bc_hosp_admissions_ex.jpg){style="width: 60%; display: block; margin-left: auto; margin-right: auto;"}
<!-- Newest iteration of "backfill”, Canada edition. Every week the BC CDC releases hospitalization data. The following week they revise the number upward (by about 25%) due to lagging reports. Every single week, the newspaper says “hospitalizations have declined”. This week the BC CDC’s own report said “hospitalizations have declined”. The takeaway in the news is that hospitalizations ALWAYS fall from the previous week, but once backfilled, they’re rarely down -->

* **Takeaway**: Once the data is backfilled, hospitalizations rarely show a decline, challenging the common media narrative.

## Aside on Nowcasting

* To some Epis, "nowcasting" can be equated with "estimate the time-varying instantaneous reproduction number, $R_t$"

* Example using the number of reported COVID-19 cases in British Columbia between January 2020 and April 15, 2023. 
<!-- This data is the number of reported COVID-19 cases in British Columbia between January 2020 and April 15, 2023. The values are.up-to-date as of August 2023. -->
```{r}
#| fig-width: 9
#| fig-height: 3
#| out-height: "400px"
#| label: nowcasting
library(rtestim)
p1 <- Stat406::bccovid |>
  ggplot(aes(date, cases)) + 
  geom_line(colour = primary) +
  geom_vline(xintercept = ymd("2023-04-15"), colour = secondary,
             linewidth = 2) +
  labs(y = "BC Covid-19 cases", x = "Date") +
  scale_y_continuous(expand = expansion(c(0, NA)))
bc_rt <- estimate_rt(Stat406::bccovid$cases, x = Stat406::bccovid$date, 
                     lambda = c(1e6, 1e5))
p2 <- plot(confband(bc_rt, lambda = 1e5)) + 
  coord_cartesian(ylim = c(0.5, 2)) +
  scale_y_continuous(expand = expansion(0))
cowplot::plot_grid(p1, p2)
```

* Group built [`{rtestim}`](https://dajmcdon.github.io/rtestim) doing for this nonparametrically.

* We may come back to this later...

## Mathematical Setup

* Suppose today is time $t$

* Let $y_i$ denote a series of interest observed at times $i=1,\ldots, t$.

::: {.callout-important icon="false"}
## Our goal

* Produce a **point nowcast** for the finalized values of $y_t$.
* Accompany with time-varying prediction intervals

:::

* We also have access to $p$ other time series 
$x_{ij},\; i=1,\ldots,t, \; j = 1,\ldots,p$

* All may be subject to revisions.

# Nowcasting with One Variable

## Nowcasting Simple Ratio Ex: NCHS Mortality 

* In this example, we'll demonstrate the concept of nowcasting using **NHCS mortality data**
(the number of weekly new deaths with confirmed or presumed COVID-19, per 100,000 population).
* We will work with **provisional** data (real-time reports) and compare them to **finalized** data (final reports).
* The goal is to estimate or **nowcast the mortality rate** for weeks when only provisional data is available.
  
## Fetch Versioned Data

Let's fetch versioned mortality data from the API (`pub_covidcast`) for CA (`geo_values = "ca"`) and the signal of interest (`deaths_covid_incidence_num`) over early 2024.
```{r mortality-archive-construct}
#| echo: true
# Fetch the versioned NCHS mortality data (weekly)
mortality_archive <- pub_covidcast(
  source = "nchs-mortality",
  signals = "deaths_covid_incidence_num",
  geo_type = "state",
  time_type = "week",
  geo_values = "ca",  # California (CA)
  time_values = epirange(202401, 202413),  
  issues = "*"
) |> 
  select(geo_value, time_value, version = issue, mortality = value) |> 
  as_epi_archive(compactify = TRUE)

# Set the start and end days for the analysis 
# corresponding to the weeks entered in time_values
start_time = as.Date("2023-12-31")
end_time = as.Date("2024-03-24")
```

## Latency in Reporting - Minimum Lag

* A quick inspection reveals that mortality rates are systematically 7 days latent (**fixed lag**).

```{r inspect-latency-dplyr-way}
#| echo: true
mortality_revision_inspect = mortality_archive$DT |> mutate(version_time_diff = version - time_value)

# Look at the first revision for each week
mortality_revision_inspect |> group_by(time_value) |> slice(1) |> head()
```

* Use `revision_summary()` from `epiprocess` to generate basic statistics about the revision behavior for the dataset.

```{r revision-summary-ex}
#| eval: false
revision_summary(mortality_archive, print_inform = TRUE)
```

## Latency in Reporting - Finalized Value Attainment
<div style="font-size: 0.8em;">
* **Question:** When is the **finalized value** first attained for each date? Would we have access to any in real-time?
* How fast are the final values attained & what's the pattern for these times, if any?


```{r finalized-value-first-attained-fun}
#| echo: false
check_when_finalized <- function(epi_archive, start_date = NULL, end_date = NULL) {
  # Extract the mortality archive data
  dt <- epi_archive$DT
  
  # Extract the latest (finalized) version
  mortality_latest <- epix_as_of(epi_archive, max_version = max(dt$version))
  
  # Merge the finalized mortality data with all versions
  merged_data <- dt |>
    filter(geo_value %in% mortality_latest$geo_value &
             time_value %in% mortality_latest$time_value) |>
    inner_join(mortality_latest, by = c("geo_value", "time_value"), suffix = c("", "_finalized"))
  
  # Find the minimal version where the finalized mortality first occurred
  finalized_version_data <- merged_data |>
    filter(mortality == mortality_finalized) |>
    group_by(geo_value, time_value) |>
    summarize(min_version = min(version), .groups = 'drop') |>
    mutate(diff = min_version - time_value)
  
  return(finalized_version_data)
}
```

```{r check-when-finalized-run}
#| echo: false
res <- check_when_finalized(mortality_archive, start_date = start_time, end_date = end_time)
head(res)
```
And here's a numerical summary:
```{r summary-diff}
#| echo: false
summary(as.numeric(res$diff))
```

* **Conclusion**: Tends to take a long time & varies. Even for this relatively small time period... Goes as low as 84 days or as high as 294 days. Yikes.
* So if we were doing this in real-time, then we wouldn't have access to the finalized data.
</div>

## Comparison of Final vs. Multiple Revisions
This figure shows the finalized rates in comparison to **multiple revisions** to see how the data changes over time:

```{r mortality-by-revision-date}
#| echo: false

# Visualize the mortality values for different revisions
revision_dates <- seq(min(mortality_archive$DT$version), end_time, by = "1 week")

# Create a data frame for each version and label them by revision date
mortality_revisions <- map_dfr(revision_dates, function(date) {
  epix_as_of(mortality_archive, max_version = date) |>
    mutate(revision_date = date)  # Add a column for the revision date
})

# Extract the latest/finalized version
mortality_latest <- epix_as_of(mortality_archive, max_version = max(mortality_archive$DT$version))

```

```{r final-vs-revisions-plot}
#| echo: false
#| fig-width: 9
#| fig-height: 4
#| out-height: "500px"
ggplot() +
  geom_line(data = mortality_latest, aes(x = time_value, y = mortality), color = "black", size = 1) +
  geom_line(data = mortality_revisions, aes(x = time_value, y = mortality, color = as.factor(revision_date))) +
  geom_point(data = mortality_revisions, aes(x = time_value, y = mortality, color = as.factor(revision_date)), size = 2) +
  labs(color = "Revision Date") + 
  ggtitle("COVID-19 Mortality in CA: Finalized (black) vs Various Revisions")

```

## Comparison of Final vs. One Revision
<div style="font-size: 0.8em;">
The below figure compares the finalized rates (in black) to **one revision** (in yellow) from March 3, 2024.

```{r one-revision-final-plot}
#| out-height: "400px"
as_of_date = as.Date("2024-03-03")

ggplot() +
  geom_line(data = mortality_latest, aes(x = time_value, y = mortality), color = "black", size = 1) +
  geom_line(data = mortality_revisions |> filter(revision_date == as_of_date), aes(x = time_value, y = mortality), color = "#FFB300") +
  ggtitle(paste0("COVID-19 Mortality, CA: Finalized (black) vs ", as_of_date, " Revision (yellow)"))
```
The real-time data is biased downwards (systematically below the true value). That is, the signal tends to get scaled up with future revisions.
</div>

## Calculate One Ratio: Provisional vs. Finalized Data
<!-- * Let's start simple with computing one ratio. -->
<div style="font-size: 0.8em;">
* Suppose that the day is March 10, 2024. Then, because the data is 7 days latent, we can compute the ratio between provisional and finalized data for **March 3, 2024**.

```{r one-ratio-calc}
#| echo: true
as_of_date = as.Date("2024-03-10"); fixed_lag = 7

# Load the finalized mortality data for CA
ca_finalized <- mortality_latest |>
  filter(time_value == (as_of_date - fixed_lag)) |>
  dplyr::select(mortality)

# Load the provisional mortality data for the same week
mortality_old = epix_as_of(mortality_archive, max_version = as_of_date)

ca_provisional <- mortality_old |>
  filter(time_value == (as_of_date - fixed_lag)) |>
  dplyr::select(mortality)

# Calculate ratio between provisional and finalized cases for the week of interest
ratio <- ca_provisional$mortality / ca_finalized$mortality
ratio
```

**Conclusion**: The real-time rate is well below the finalized for this time (26 vs 72 here).

**Question**: Can we generalize this over many days? 
</div>

## Calculating the Ratio using Multiple Dates
* Let's move from calculating the ratio by using one day to multiple days with the goal to use it to nowcast for Feb. 18, which has a **provisional value** of 23
```{r provisional-val-feb27}
#| echo: true
as_of_date = as.Date("2024-02-25")

provisional <- epix_as_of(mortality_archive, max_version = as_of_date) |>
  filter(time_value == as_of_date - 7) |>
  pull(mortality)
provisional
```

and a **finalized value** of 104

```{r finalized-val-feb27}
#| echo: true
finalized <- mortality_latest |>
  filter(time_value == as_of_date - 7) |>
  pull(mortality)
finalized
```

## Calculating the Ratio using Multiple Dates
First, let's download the real-time rates for CA, and compare them to their finalized version.

```{r real-time-mortality}
#| echo: true
dates <- seq(start_time, (as_of_date - 7), by = "day")
mortality_real_time <- function(date) {
  epix_as_of(mortality_archive, max_version = (date + 7L)) |>
    filter(time_value == date)
}
mortality_real_time_df <- map_dfr(dates, mortality_real_time)
head(mortality_real_time_df)
```

## Calculating the Ratio using Multiple Dates
Now, let's plot the real-time vs the finalized mortality rates:
```{r real-time-vs-finalized}
ggplot() +
  geom_line(data = mortality_latest |> filter(time_value <= (as_of_date - 7)), aes(x = time_value, y = mortality)) +
  geom_line(data = mortality_real_time_df, aes(x = time_value, y = mortality),
            col = 'red') +
  ggtitle("Mortality, CA: finalized (black) vs real-time (red)")
```
* **Takeaways**: The real-time counts are biased **well below** the finalized counts.
* Systematic underreporting tends to lessen over time (the gap between the lines decreases).

## Realistic Limitation of Nowcasting - Finalized Data
* Recall that real-time access to finalized data is limited as finalized values can take months to report (e.g., Jan. 7 is finalized 294 days later).
* To nowcast accurately, we must rely on the **best available approximation of finalized data** at the time of estimation (Feb. 25).

```{r finalized-data-as-of-Feb-25}
#| echo: true
mortality_as_of_feb25 <- epix_as_of(mortality_archive, max_version = as_of_date)
head(mortality_as_of_feb25)
```

## Ratio Calculation & Summary
<div style="font-size: 0.8em;">
We then use these "finalized" and real-time values to compute the mean ratio:
```{r ratio-calc-summary}
#| echo: true
# exclude date we're nowcasting for
mortality_real_time_df = mortality_real_time_df |> filter(time_value != "2024-02-18") 
mortality_as_of_feb25 = mortality_as_of_feb25 |> filter(time_value != "2024-02-18")
ratio_real_time_to_feb25 <- mortality_real_time_df$mortality / mortality_as_of_feb25$mortality
summary(ratio_real_time_to_feb25)
```
On average, the real-time rates are ~25.7% of the finalized.
</div>

```{r boxplot-ratio}
#| echo: false
ratio_df <- data.frame(ratio_real_time_to_feb25, mean_ratio = mean(ratio_real_time_to_feb25))

# Create the boxplot with mean marked as a bold cross
ggplot(ratio_df, aes(y = ratio_real_time_to_feb25)) +
  geom_boxplot(fill = "lightblue", color = "black") +
  geom_point(
    aes(x = 0, y = mean_ratio),  # Place point at the mean
    shape = 4,                  # Cross shape
    size = 7,                   # Size of the cross
    color = "darkblue",         # Color of the cross
    stroke = 2                  # Boldness of the cross
  ) +
  labs(
    title = "Distribution of Real-Time to Finalized Mortality Ratios",
    y = "Real-Time to Finalized Ratio"
  ) +
  theme_minimal() +  # Minimal theme for clean look
  theme(
    plot.title = element_text(hjust = 0.5)  # Center the title
  ) +
  coord_cartesian(ylim = c(0.2, 0.3))  # Limit y-axis between 0 and 0.5 to zoom in
```
<div style="font-size: 0.8em;">
Tells us the distribution is right-skewed (mean > median) and so we should opt for the median.
</div>

## Nowcasting on Feb. 25
Since the **median ratio** between real-time and finalized values is **0.250** (i.e., real-time values are typically 25% of the finalized), then the nowcast is
```{r nowcast-feb-27}
#| echo: true
# Now we can nowcast properly:
nowcast <- provisional *
  1 / median(ratio_real_time_to_feb25)
nowcast
```
So, this **nowcast is 92**, which is much closer to the **finalized value of 104** than the **provisional value of 23**.

## Summary of Three Main Steps 
So the main steps for this type of fixed lag nowcasting are...

1. Obtain the **provisional value** for the target.

2. Estimate the ratio using the **real-time** and **"finalized"** data (for all previous dates that follow a consistent pattern in reporting). 

3. Profit.

```{r summary-steps}
#| echo: true
#| eval: false
#| code-fold: true
#| code-summary: "Expand for the accompanying code"
# Today
as_of_date = as.Date("2024-02-25")

# 1. Obtain the provisional value
provisional <- epix_as_of(mortality_archive, max_version = as_of_date) |>
  filter(time_value == as_of_date - 7) |>
  pull(mortality)
provisional

# 2. Estimate the ratio 
mortality_real_time_df <- map_dfr(dates, mortality_real_time) |> filter(time_value != "2024-02-18") # Real-time
mortality_as_of_feb25 <- epix_as_of(mortality_archive, max_version = as_of_date) |> filter(time_value != "2024-02-18")  # "Finalized"

ratio_real_time_to_feb25 <- mortality_real_time_df$mortality / mortality_as_of_feb25$mortality

# 3. Profit.
nowcast <- provisional *
  1 / median(ratio_real_time_to_feb25)
nowcast
```

## Nowcasting Mortality for Multiple Dates

* **Define Nowcast Function**:
  * **Input**: Takes in the dates to nowcast and the fixed lag
  * **Output**: The nowcasted mortality rates based on the ratio of real-time to finalized data.
```{r nowcasting-function}
#| echo: true
#| code-fold: true
nowcast_function <- function(nowcast_date, fixed_lag) {
  as_of_date = nowcast_date + fixed_lag
  
  # 1. Obtain the provisional value for the target.
  provisional <- epix_as_of(mortality_archive, max_version = as_of_date) |>
    filter(time_value == as_of_date - fixed_lag) |>
    pull(mortality)
  
  #2. Estimate the ratio multiplier using
  # real-time
  dates_seq <- seq(start_time, (nowcast_date - fixed_lag), by = "week")
  mortality_real_time <- map_dfr(dates_seq, mortality_real_time)
  
  # and "finalized" data
  finalized <- epix_as_of(mortality_archive, max_version = as_of_date) |> filter(time_value >= start_time & time_value <= (nowcast_date - fixed_lag)) 
  
  ratios <- mortality_real_time$mortality / finalized$mortality
  
  # Remove infinite or NaN ratios (i.e., keep only finite values)
  median_ratio <- median(ratios[is.finite(ratios)])
  
  #3. Profit.
  nowcast <- provisional * (1 / median_ratio)
  
  # Return a dataframe with the nowcast and date
  tibble(
    time_value = nowcast_date,
    nowcast_mortality = nowcast
  )
}
```

## Map Nowcast Over Multiple Dates
* We can use `map2()` to apply the function to a series of weeks (e.g., Jan. 28 to Mar. 24).
* Returns a **dataframe** with nowcasted results.

```{r apply-nowcast-fun}
#| echo: true
# Apply Nowcast Function Over Multiple Dates
nowcast_dates <- seq(as.Date("2024-01-28"), as.Date("2024-03-24"), by = "week")
fixed_lag <- 7
nowcast_results_df <- map2(nowcast_dates, fixed_lag, nowcast_function) |> list_rbind()
```

## Map Nowcast Over Multiple Dates
Let's smooth with a rolling trailing mean (window size 4) & see the results:
```{r}
# Smooth results: Apply rolling median to nowcast_mortality with a window size of 4
nowcast_results_df$nowcast_mortality <- zoo::rollapply(nowcast_results_df$nowcast_mortality, width = 4, FUN = mean, partial = TRUE, align = "right")
# nowcast_results_df$nowcast_mortality[1:3] |> median()

nowcast_results_df
```

## Visualize Nowcast, Real-time, and Finalized Values
Finally, we can compare these nowcast results to the real-time and finalized values:
```{r nowcast-fun-plot-results}
#| echo: false
ggplot() +
  geom_line(data = nowcast_results_df, aes(x = time_value, y = nowcast_mortality), col = 'blue') + # nowcast
  geom_line(data =  map_dfr(nowcast_dates, mortality_real_time), aes(x = time_value, y = mortality), col = 'red') + # real-time
  # Add points for nowcast data (blue points)
  geom_point(data = nowcast_results_df, aes(x = time_value, y = nowcast_mortality), col = 'blue', shape = 16) + # shape 16 for solid points
  # Add points for real-time data (red points)
  geom_point(data = map_dfr(nowcast_dates, mortality_real_time), aes(x = time_value, y = mortality), col = 'red', shape = 16) + 
  geom_line(data = mortality_latest |> filter(time_value %in% nowcast_dates), aes(x = time_value, y = mortality), col = 'black') + # finalized
  geom_point(data = mortality_latest |> filter(time_value %in% nowcast_dates), aes(x = time_value, y = mortality), col = 'black', shape = 16) + 
  ggtitle("Mortality, CA: Nowcast results (blue) vs real-time (red) and finalized (black)")
```
The real-time counts tend to be biased below the finalized counts. Nowcasted values tend to provide a much better approximation of the truth (at least for these dates).

# Nowcasting with Two Variables

## Nowcasting: Moving from One Signal to Two

* Recall that in nowcasting the goal is to predict a finalized value from a provisional value.
* Now, we'll move from one signal to two, creating a simple linear model to nowcast.
* Exogenous features (predictors) could include relevant signals, such as Google symptom search trends.
* We will use these signals to nowcast hospital admissions related to influenza.


## Data Sources: Google Searches & Hospital Admissions

* **Google Search Trends**: Symptoms like cough, fever, and shortness of breath.
  * **s01**: Cough, Phlegm, Sputum, Upper respiratory tract infection  
  * **s02**: Nasal congestion, Post nasal drip, Sinusitis, Common cold

* **Hospital Admissions**: Data from the Department of Health & Human Services on confirmed influenza admissions.

* Using these, we will **nowcast** hospital admissions by using Google symptom search trends for GA from April to June 2023.

* The first step is to fetch this data...

## Data Sources: Google Searches & Hospital Admissions

```{r fetch-google-data}
#| echo: true
# Fetch Google symptom data for s01 and s02
x1 <- pub_covidcast(
  source = "google-symptoms",
  signals = "s01_smoothed_search", 
  geo_type = "state",
  time_type = "day",
  geo_values = "ga",
  time_values = epirange(20230401, 20230701),
  issues = "*"
) |>
  select(geo_value, time_value, version = issue, avg_search_vol_s01 = value) |>
  as_epi_archive(compactify = FALSE)

x2 <- pub_covidcast(
  source = "google-symptoms",
  signals = "s02_smoothed_search",
  geo_type = "state",
  time_type = "day",
  geo_values = "ga",
  time_values = epirange(20230401, 20230701),
  issues = "*"
) |>
  select(geo_value, time_value, version = issue, avg_search_vol_s02 = value) |>
  as_epi_archive(compactify = FALSE)

# Fetch hospital admissions data
y1 <- pub_covidcast(
  source = "hhs",
  signals = "confirmed_admissions_influenza_1d",
  geo_type = "state",
  time_type = "day",
  geo_values = "ga",
  time_values = epirange(20230401, 20230701),
  issues = "*"
) |>
  select(geo_value, time_value, version = issue, admissions = value) |>
  as_epi_archive(compactify = FALSE)
```

## Merging the Archives

* We'll merge the symptom search trends (`x1`, `x2`) with hospital admissions data (`y`) using `epix_merge()` from `epiprocess`.
* This allows us to match data by time and geography, & fill any missing values with the most recent observation (LOCF).

```{r}
#| echo: false
# Merge the Google trends data (x1, x2) with hospital admissions data (y)
archive <- epix_merge(x1, y1, sync = "locf", compactify = FALSE)
archive <- epix_merge(archive, x2, sync = "locf", compactify = FALSE)
```

## Linear Model: A Simple Approach for Nowcasting

* Aside from ratios, one of the simplest approach to nowcasting is to use a **linear regression model**.
* We model the relationship between provisional (predictor) data and response data.
* This model helps us make **predictions** for the finalized data based on the current (provisional) signals.

## Linear Regression
* **Goal**: Estimate the coefficients $\beta_0$ and $\beta_1$ that describe the relationship between the predictor $x_i$ and the outcome $y_i$.
* **Linear Model**: The relationship is assumed to be:

  $$y_i \approx \beta_0 + \beta_1 x_i $$
  
  where
  $\beta_0$ is the intercept,
  $\beta_1$ is the slope.
* **In R**: Use `lm(y ~ x)` to estimate the coefficients, where `y` is the outcome variable and `x` is the predictor.

## Multiple Linear Regression
* **Goal**: Estimate coefficients $\beta_0, \beta_1, \dots, \beta_p$ that describe the relationship between multiple predictors $x_{i1}, x_{i2}, \dots, x_{ip}$ and the outcome $y_i$.
* **Model**: The relationship is assumed to be:

  $$y_i \approx \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \dots + \beta_p x_{ip}$$
  
  where:
  $\beta_0$ is the intercept,
  $\beta_1, \dots, \beta_p$ are the coefficients.
* **In R**: Use `lm(y ~ x1 + x2 + ... + xp)` to estimate the coefficients, where `y` is the outcome and `x1, x2, ..., xp` are the predictors.

## Multiple Linear Regression Model

* A linear model is a good choice to describe the relationship between search trends and hospital admissions.
* The model will include two predictors (s01 and s02).
* We'll use these two search trend signals to predict hospital admissions (response).

<!-- A linear regression model will be used to predict hospital admissions from search trends (s01 and s02). -->

## Multiple Linear Regression Model
```{r}
#| echo: true
# Define the function for lm model fit and prediction
lm_mod_pred <- function(data, gk, rtv, ...) {
  
  # Fit the linear model
  model <- lm(admissions ~ avg_search_vol_s01 + avg_search_vol_s02, data = data)
  
  # Make predictions
  predictions = predict(model,
                        newdata = data |>
                          # Use tidyr::fill() for LOCF if predictor data is incomplete 
                          fill(avg_search_vol_s01, .direction = "down") |> 
                          fill(avg_search_vol_s02, .direction = "down") |>
                          filter(time_value == max(time_value)),
                        interval = "prediction", level = 0.9
  )

  # Pull off true time value for comparison to target
  real_time_val = data |> filter(time_value == max(time_value)) |> pull(admissions)

  return(data.frame(predictions, actual_nowcast_date = max(data$time_value), real_time_val = real_time_val))
}
```
Note that this code is intentionally simple; while it can be refined to handle cases like negatives or other boundary conditions, we aim to avoid unnecessary complexity.

## Nowcasting with `epix_slide()`

* We will use `epix_slide()` to create a sliding window of training data.
* The model will be trained on a 14-day window before the target date, and predictions will be made for the target date.
* The beauty of this function is that it is version-aware - the sliding computation at any given reference time **t** is performed on data that would have been available as of **t** automatically. 

## Nowcasting with `epix_slide()`
```{r}
#| echo: true
# Define the reference time points for nowcasting
targeted_nowcast_dates <- seq(as.Date("2023-04-15"), as.Date("2023-06-15"), by = "1 week")
ref_time_values = targeted_nowcast_dates + 2  # Adjust for the systematic 2-day latency in the response
# Determine this from revision_summary(y1, print_inform = TRUE) 

# Perform nowcasting using epix_slide
nowcast_res <- archive |>
  group_by(geo_value) |>
  epix_slide(
    .f = lm_mod_pred,
    .before = 14,  # 14-day training period
    .versions = ref_time_values, 
    .new_col_name = "res"
  ) |>
  unnest() |> # Nesting creates a list-column of data frames; unnesting flattens it back out into regular columns. 
  mutate(targeted_nowcast_date = targeted_nowcast_dates, time_value = actual_nowcast_date) |>
  ungroup()

# View results
head(nowcast_res, n=2)
```

## Compare with the Actual Admissions 

* After making predictions, we compare them to the actual hospital admissions.
```{r}
#| echo: true
# Left join with latest results 
# Latest snapshot of data (with the latest/finalized admissions)
x_latest <- epix_as_of(archive, max_version = max(archive$DT$version)) |> select(-c(avg_search_vol_s01, avg_search_vol_s02))

res <- nowcast_res |> left_join(x_latest, by = c("geo_value", "time_value"))
head(res)
```

## Visualizing the Nowcast Results
<div style="font-size: 0.9em;">
We can then visualize the nowcast results alongside the true values using `ggplot2`:
</div>
```{r plot-lr-nowcast-res}
#| echo: false
# Plot the predictions vs real-time vs actual admissions
ggplot(res, aes(x = time_value)) +
  geom_line(aes(y = admissions, color = "Finalized Admissions"), size = 1.2) +
  geom_point(aes(y = fit, color = "Nowcast"), size = 3) +
  geom_point(aes(y = real_time_val, color = "Real Time"), size = 3) +
  geom_line(aes(y = fit, color = "Nowcast"), size = 1.2, linetype = "dashed") +
  geom_ribbon(aes(ymin = lwr, ymax = upr, fill = "Pred. Interval"), alpha = 0.3) +
  labs(title = "",
       x = "Date", y = "Hospital Admissions", color = "Legend", fill = "Legend") +
  scale_color_manual(values = c("Finalized Admissions" = "black", "Nowcast" = "#1f78b4", "Real Time" = "darkred")) +
  scale_fill_manual(values = c("Pred. Interval" = "#a6cee3")) +
  theme_minimal() +
  theme(legend.position = "top", legend.title = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1))
```

## Key Takeaways: Linear Regression Nowcasting Example

* **Provisional Data as Predictors**: Using **Google symptom search trends** to predict **influenza hospital admissions**.
* **Simple Linear Model**: A linear regression model captures the relationship between symptom searches and hospital admissions.
* **Actionable Predictions**: Nowcasts provide **timely insights** for hospital admissions, even before data is finalized.
* **Sliding Window Approach**: Predictions are based on **data up to the current time**, ensuring no future information influences the nowcast.
* **Evaluation**: Predictions are compared with actual admissions visually.

# Case Study - Nowcasting case rates using %CLI 

## Goal of this Case Study

**Goal**: Nowcast COVID-19 Case Rates using %CLI for Massachusetts.

* %CLI is contained in the Epidata API.
* Case rates by specimen collection date are not. They are from the MA gov website.
* Case rates in the API (JHU) are aligned by report date, not specimen collection/test date.
* Working with cases aligned by **test date** allows us to avoid the more unpredictable delays introduced by the **report date**.

## Summary of Main Steps
<div style="font-size: 0.8em;">
The workflow is similar to the previous example where we nowcasted using two variables, only more involved. 
The main steps are...

1. **Fetch Data**: Retrieve %CLI and COVID-19 case data (by specimen collection date) for MA.

2. **Merge Data**: Align %CLI and case rate data using `epix_merge`, filling missing values via last observation carried forward (LOCF).

3. **Model & Prediction**: Fit a linear model to predict case rates based on %CLI, trained on a 30-day rolling window.

4. **Nowcast Execution**: Use `epix_slide` to nowcast the case rates dynamically. 

5. **Visualization**: Plot actual vs. nowcasted case rates with confidence intervals to assess model accuracy.

So the first step is to fetch the data...
</div>

## Construct an `epi_archive` from Scratch
<div style="font-size: 0.9em;">
[Here's]("https://www.mass.gov/info-details/archive-of-covid-19-cases-2020-2021") the archive of COVID-19 case excel files from the MA gov website, which we'll use to construct our own `epi_archive`.
<br>
Brief summary of this data:

* **First release**: Raw .xlsx data was first released early January 2021.

* **Change in reporting**: Starting **July 1, 2021**, the dashboard shifted from **7 days/week** to **5 days/week** (Monday-Friday).

* **Friday, Saturday, and Sunday** data is included in the **Monday** dashboard.

* When **Monday** is a holiday, the **Friday through Monday** data is posted on **Tuesday**.
</div>

## Construct an `epi_archive` from Scratch
<div style="font-size: 0.8em;">
* **Purpose**: To create an `epi_archive` object for storing versioned time series data.
* **Required Columns**:
  * `geo_value`: Geographic data (e.g., region).
  * `time_value`: Time-related data (e.g., date, time).
  * `version`: Tracks when the data was available (enables version-aware forecasting).
* **Constructor**:
  * `new_epi_archive()`: For manual construction of `epi_archive` (assumes validation of inputs).
* **Recommended Method**:
  * `as_epi_archive()`: Simplifies the creation process, ensuring proper formatting and validation. We'll use this one when we download some data from the MA gov website!
</div>

## Main Steps to Construct the `epi_archive`
<div style="font-size: 0.8em;">
1. **Load necessary Libraries**: Such as `tidyverse`, `readxl`, `epiprocess`.
2. **Process Each Date's Data**: 
   * A function we'll make (`process_covid_data`) downloads and processes daily COVID-19 data from the MA gov Excel files on their website.
   * The data is cleaned and formatted with columns: `geo_value`, `time_value`, `version`, and values.
3. **Handle Missing Data**: Checks if a date's data is available (handle 404 errors).
4. **Create `epi_archive`**: 
   * Combine processed data into a tibble.
   * Convert the tibble to an `epi_archive` object using `as_epi_archive()`.
</div>

## Fetch Data - Code for One Date
```{r}
#| echo: true
# Load required libraries
library(tidyverse)
library(readxl)
library(httr)
library(tibble)
library(epiprocess)

# Function to download and process each Excel file for a given date
process_covid_data <- function(Date) {
  # Generate the URL for the given date
  url <- paste0("https://www.mass.gov/doc/covid-19-raw-data-", tolower(gsub("-0", "-", format(Date, "%B-%d-%Y"))), "/download") 
  # Applies gsub("-0", "-", ...) to replace any occurrence of -0 (such as in "April-01") with just - (resulting in "April-1").
  
  # Check if the URL exists (handle the 404 error by skipping that date)
  response <- GET(url)
  
  if (status_code(response) != 200) {
    return(NULL)  # Skip if URL doesn't exist (404)
  }
  
  # Define the destination file path for the Excel file
  file_path <- tempfile(fileext = ".xlsx")
  
  # Download the Excel file
  GET(url, write_disk(file_path, overwrite = TRUE))
  
  # Read the relevant sheet from the Excel file
  data <- read_excel(file_path, sheet = "CasesByDate (Test Date)")
  
  # Process the data: rename columns and convert Date
  data <- data |>
    rename(
      Date = `Date`,
      Positive_Total = `Positive Total`,
      Positive_New = `Positive New`,
      Case_Average_7day = `7-day confirmed case average`
    ) |>
    mutate(Date = as.Date(Date))  # Convert to Date class
  
  # Create a tibble with the required columns for the epi_archive
  tib <- tibble(
    geo_value = "ma",  # Massachusetts (geo_value)
    time_value = data$Date,  # Date from the data
    version = Date,  # The extracted version date
    case_rate_7d_av = data$Case_Average_7day  # 7-day average case value
  )
  
  return(tib)
}
```

## Fetch Data - Code Breakdown 
<div style="font-size: 0.8em;">
* This purpose of this function is to download and process each Excel file as of a date.
* **URL Creation**: Dynamically generates the URL based on the date, removing leading zeros in day values (e.g., "April-01" → "April-1").
* **Check URL**: Sends a request (`GET(url)`) and skips the date if the URL returns a non-200 status (e.g., 404 error).
* **Download File**: Saves the Excel file to a temporary path using `tempfile()` and `GET()`.
* **Read Data**: Loads the relevant sheet ("CasesByDate") from the Excel file using `read_excel()`.
* **Tibble Creation**: Constructs a tibble with `geo_value`, `time_value`, `version`, and `case_rate_7d_av` to later compile into an `epi_archive` (you can think of an `epi_archive` as being a comprised of many `epi_df`s).
</div>

## Fetch Data - Process Range of Dates
* Note that `process_covid_data()` works on one date at a time.
* So now, we need a function that iterates over a date range and applies `process_covid_data()` to each date & combines the resulting tibbles into an `epi_archive`.
* We call this function `process_data_for_date_range()`...

## Fetch Data - Process Range of Dates
```{r}
#| echo: true
# Function to process data for a range of dates
process_data_for_date_range <- function(start_date, end_date) {
  # Generate a sequence of dates between start_date and end_date
  date_sequence <- seq(as.Date(start_date), as.Date(end_date), by = "day")
  
  # Process data for each date and combine results
  covid_data_list <- lapply(date_sequence, function(Date) {
    process_covid_data(Date)  # Skip over dates with no data (NULLs will be ignored)
  })
  
  # Combine all non-null individual tibbles into one data frame
  combined_data <- bind_rows(covid_data_list[!sapply(covid_data_list, is.null)])
  
  # Convert the combined data into an epi_archive object
  if (nrow(combined_data) > 0) {
    epi_archive_data <- combined_data |>
      as_epi_archive(compactify = FALSE)
    
    return(epi_archive_data)
  } else {
    message("No valid data available for the given date range.")
    return(NULL)
  }
}
```

## Fetch Data - Code Breakdown
Here's a summary of what `process_data_for_date_range()` does:
1. **Generates Date Range**: Creates a sequence of dates between `start_date` and `end_date`.

2. **Processes Data**: Applies the `process_covid_data` function to each date in the range (skip over dates with no data).

3. **Combines Results**: Combines all valid (non-NULL) tibbles into one single data frame.

4. **Creates `epi_archive`**: Converts the combined data into an `epi_archive` object.

## Fetch Data - Run the Function & Inspect Archive
<div style="font-size: 0.75em;">
* Now, let's run the function & inspect the resulting `epi_archive` of 7-day averaged COVID-19 case counts:
* Expect building the archive to take a nontrivial amount of time (enough for a cup of coffee or to meditate on life).
</div>
<!-- To wonder why you chose Expect building the archive to take a nontrivial amount of time (enough for a cup of coffee or to wonder why you chose coding in the first place). -->
```{r}
#| echo: true
# Example usage: process data between Jan. 10, 2021, and Dec. 1, 2021
y <- process_data_for_date_range("2021-01-10", "2021-12-01")  # Raw .xlsx data is first released on Jan. 4, 2021
y
```

## Fetch Data - % Outpatient Doctors Visits for CLI
<div style="font-size: 0.9em;">
* Now, from the Epidata API, let's download the [estimated percentage of outpatient doctor visits]("https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/doctor-visits.html") primarily for COVID-related symptoms, based on health system data.
* Comes pre-smoothed in time using a Gaussian linear smoother
* This will be the predictor when we nowcast COVID-19 Case Rates in MA.
</div>
```{r}
#| echo: true
# Step 1: Fetch Versioned Data 
x <- pub_covidcast(
  source = "doctor-visits",
  signals = "smoothed_adj_cli",
  geo_type = "state",
  time_type = "day",
  geo_values = "ma", # Just for MA to keep it simple (& to go with the case data by test date for that state)
  time_value = epirange(20210301, 20212101), 
  issues = epirange(20210301, 20212101)
) |>
  select(geo_value, time_value,
         version = issue,
         percent_cli = value
  ) |>
  as_epi_archive(compactify = FALSE)
```

## Use `epix_merge()` to Merge the Two Archives
Now we'll use `epix_merge()` to combine the two `epi_archive`s that share the same `geo_value` & `time_value`.

<!-- LOCF is used to ensure missing data is handled by filling forward. -->
```{r}
#| echo: true
archive <- epix_merge(
  x, y,
  sync = "locf",
  compactify = FALSE
)
archive
```

## Fitting and Predicting with Linear Model
<div style="font-size: 0.8em;">
* Define `lm_mod_pred()`: A function that fits a linear model to forecast case rates based on the `percent_cli` predictor.
* Use `predict()` with a 90% prediction interval.
* Save the actual case rates to compare to the nowcasts later.
</div>
```{r}
#| echo: true
lm_mod_pred <- function(data, ...) {
  # Linear model
  model <- lm(case_rate_7d_av ~ percent_cli, data = data)

  # Make predictions
  predictions = predict(model,
                        newdata = data |>
                          fill(percent_cli, .direction = "down") |> 
                          filter(time_value == max(time_value)),
                        interval = "prediction", level = 0.9)
  
  # Pull off real-time value for later comparison to the nowcast value
  real_time_val = data |> filter(time_value == max(time_value)) |> pull(case_rate_7d_av)
  
  # Could clip predictions and bounds at 0
  return(data.frame(predictions, actual_nowcast_date = max(data$time_value), real_time_val = real_time_val)) 
}
```

## Nowcasting with `epix_slide()`
* **Specify targets**: Define the target dates for nowcasting (e.g., 1st of each month) & adjust training data to include the lag for the latent case data.
* **Sliding window**: Use `epix_slide()` to apply the linear model across a sliding window of data for each region.
* **Training-test split**: Use the last 30 days of data to train and predict case rates for each target nowcast date.

## Nowcasting with `epix_slide()`
```{r}
#| echo: true
# Define the reference time points (to give the training/test split)
targeted_nowcast_dates <- seq(as.Date("2021-04-01"), as.Date("2021-11-01"), by = "1 month") 
ref_time_values = targeted_nowcast_dates + 1 # + 1 because the case data is 1 day latent. 
# Determine this from revision_summary(y)

# Use epix_slide to perform the nowcasting with a training-test split
nowcast_res <- archive |>
  group_by(geo_value) |>
  epix_slide(
    .f = lm_mod_pred,  # Pass the function defined above
    .before = 30,   # Training period of 30 days
    .versions = ref_time_values, # Determines the day where training data goes up to (not inclusive)
    .new_col_name = "res"
  ) |>
  unnest() |>
  mutate(targeted_nowcast_date = targeted_nowcast_dates,
         time_value = actual_nowcast_date)

# Take a peek at the results
head(nowcast_res, n = 1)
```

## Visualizing Nowcasts vs. Actual Values
Merge the nowcast results with the latest data for more direct comparison:

```{r}
#| echo: true
x_latest <- epix_as_of(archive, max_version = max(archive$DT$version)) |>
  select(-percent_cli) 

res <- nowcast_res |> left_join(x_latest, by = c("geo_value", "time_value"))

res
```

## Visualizing Nowcasts vs. Actual Values
<div style="font-size: 0.9em;">
Finally, plot the predictions & real-time values on top of latest COVID-19 case rates using `ggplot2`:
</div>
```{r}
#| echo: false
ggplot(res, aes(x = time_value)) +
  geom_line(aes(y = case_rate_7d_av, color = "Finalized Cases (7-dav)"), size = 1.2) +
  geom_point(aes(y = fit, color = "Nowcast"), size = 3) +
  # Plot the real-time values
  geom_point(aes(y = real_time_val, color = "Real Time"), size = 3) +
  geom_line(aes(y = fit, color = "Nowcast"), size = 1.2, linetype = "dashed") +
  geom_ribbon(aes(ymin = lwr, ymax = upr, fill = "Pred. Interval"), alpha = 0.3) +
  # Title and labels
  labs(title = "",
       x = "Date",
       y = "Rate",
       color = "Legend",
       fill = "Legend") +
  # Adjust colors
  scale_color_manual(values = c("Finalized Cases (7-dav)" = "black",
                                "Nowcast" = "#1f78b4",
                                "Real Time" = "darkred")) + 
  scale_fill_manual(values = c("Pred. Interval" = "#a6cee3")) + # Light blue
  # Improve the theme
  theme_minimal() +
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

## Takeaways

**Goal**: Predict COVID-19 case rates using %CLI, overcoming delays in report data.

Main Steps:

1. **Fetch Data**: Collect case rates and %CLI data.

2. **Merge Data**: Align datasets with epix_merge() and fill missing values.

3. **Model**: Fit a linear model to predict case rates.

4. **Nowcast**: Apply dynamic forecasting with epix_slide().

5. **Visualize**: Plot nowcasts vs. actual case rates with confidence intervals.

Overall, nowcasting, based on the linear model, provided a closer approximation of true case rates compared to the real-time values.

## Final slide {.smaller}

### Thanks:

```{r qr-codes}
#| include: false
#| fig-format: png
# Code to generate QR codes to link to any external sources
qrdat <- function(text, ecl = c("L", "M", "Q", "H")) {
  x <- qrcode::qr_code(text, ecl)
  n <- nrow(x)
  s <- seq_len(n)
  tib <- tidyr::expand_grid(x = s, y = rev(s))
  tib$z <- c(x)
  tib
}
qr1 <- qrdat("https://cmu-delphi.github.io/epiprocess/")
qr2 <- qrdat("https://cmu-delphi.github.io/epipredict/")
ggplot(qr1, aes(x, y, fill = z)) +
  geom_raster() +
  ggtitle("{epiprocess}") +
  coord_equal(expand = FALSE) +
  scale_fill_manual(values = c("white", "black"), guide = "none") +
  theme_void(base_size = 18) +
  theme(plot.title = element_text(hjust = .5))
ggplot(qr2, aes(x, y, fill = z)) +
  geom_raster() +
  labs(title = "{epipredict}") +
  coord_equal(expand = FALSE) +
  scale_fill_manual(values = c("white", "black"), guide = "none") +
  theme_void(base_size = 18) +
  theme(plot.title = element_text(hjust = .5))
```

- The whole [CMU Delphi Team](https://delphi.cmu.edu/about/team/) (across many institutions)
- Optum/UnitedHealthcare, Change Healthcare.
- Google, Facebook, Amazon Web Services.
- Quidel, SafeGraph, Qualtrics.
- Centers for Disease Control and Prevention.
- Council of State and Territorial Epidemiologists


::: {layout-row=1 fig-align="center"}
![](gfx/delphi.jpg){height="100px"}
![](gfx/berkeley.jpg){height="100px"}
![](gfx/cmu.jpg){height="100px"}
![](gfx/ubc.jpg){width="250px"}
![](gfx/stanford.jpg){width="250px"}
:::


